{"functions": [{"name": "GetProcessHeap", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-getprocessheap", "description": "Retrieves a handle to the default heap of the calling process. This handle can then be used in subsequent calls to the heap functions.", "parameters": []}, {"name": "GetProcessHeaps", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-getprocessheaps", "description": "Returns the number of active heaps and retrieves handles to all of the active heaps for the calling process.", "parameters": [{"name": "NumberOfHeaps", "type": "", "description": "\nThe maximum number of heap handles that can be stored into the buffer pointed to by ProcessHeaps.", "possible_constants": []}, {"name": "ProcessHeaps", "type": "", "description": "\nA pointer to a buffer that receives an array of heap handles.", "possible_constants": []}]}, {"name": "HeapAlloc", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heapalloc", "description": "Allocates a block of memory from a heap. The allocated memory is not movable.", "parameters": [{"name": "hHeap", "type": "", "description": "\nA handle to the heap from which the memory will be allocated. This handle is returned by the\nHeapCreate or\nGetProcessHeap function.", "possible_constants": []}, {"name": "dwFlags", "type": "", "description": "\nThe heap allocation options. Specifying any of these values will override the corresponding value specified when the heap was created with\nHeapCreate. This parameter can be one or more of the following values.", "possible_constants": [{"HEAP_GENERATE_EXCEPTIONS": 4}, {"HEAP_NO_SERIALIZE": 1}, {"HEAP_ZERO_MEMORY": 8}]}, {"name": "dwBytes", "type": "", "description": "\nThe number of bytes to be allocated.\nIf the heap specified by the hHeap parameter is a \"non-growable\" heap, dwBytes must be less than 0x7FFF8. You create a non-growable heap by calling the HeapCreate function with a nonzero value.", "possible_constants": []}]}, {"name": "HeapCompact", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heapcompact", "description": "Returns  the size of the largest committed free block in the specified heap.   If the Disable heap coalesce on free global flag is set, this function also coalesces adjacent free blocks of memory in the heap.", "parameters": [{"name": "hHeap", "type": "", "description": "\nA handle to the heap. This handle is returned by either the\nHeapCreate or\nGetProcessHeap function.", "possible_constants": []}, {"name": "dwFlags", "type": "", "description": "\nThe heap access options. This parameter can be the following value.", "possible_constants": [{"HEAP_NO_SERIALIZE": 1}]}]}, {"name": "HeapCreate", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heapcreate", "description": "Creates a private heap object that can be used by the calling process. The function reserves space in the virtual address space of the process and allocates physical storage for a specified initial portion of this block.", "parameters": [{"name": "flOptions", "type": "", "description": "\nThe heap allocation options. These options affect subsequent access to the new heap through calls to the heap functions. This parameter can be 0 or one or more of the following values.", "possible_constants": [{"HEAP_CREATE_ENABLE_EXECUTE": 262144}, {"HEAP_GENERATE_EXCEPTIONS": 4}, {"HEAP_NO_SERIALIZE": 1}]}, {"name": "dwInitialSize", "type": "", "description": "\nThe initial size of the heap, in bytes. This value determines the initial amount of memory that is committed for the heap. The value is rounded up to a multiple of the system page size. The value must be smaller than dwMaximumSize.\nIf this parameter is 0, the function commits one page. To determine the size of a page on the host computer, use the\nGetSystemInfo function.", "possible_constants": []}, {"name": "dwMaximumSize", "type": "", "description": "\nThe maximum size of the heap, in bytes. The\nHeapCreate function rounds dwMaximumSize up to a multiple of the system page size and then reserves a block of that size in the process's virtual address space for the heap. If allocation requests made by the\nHeapAlloc or\nHeapReAlloc functions exceed the size specified by dwInitialSize, the system commits additional pages of memory for the heap, up to the heap's maximum size.\nIf dwMaximumSize is not zero, the heap size is fixed and cannot grow beyond the maximum size. Also, the largest memory block that can be allocated from the heap is slightly less than 512 KB for a 32-bit process and slightly less than 1,024 KB for a 64-bit process. Requests to allocate larger blocks fail, even if the maximum size of the heap is large enough to contain the block.\nIf dwMaximumSize is 0, the heap can grow in size. The heap's size is limited only by the available memory. Requests to allocate memory blocks larger than the limit for a fixed-size heap do not automatically fail; instead, the system calls the\nVirtualAlloc function to obtain the memory that is needed for large blocks. Applications that need to allocate large memory blocks should set dwMaximumSize to 0.", "possible_constants": []}]}, {"name": "HeapDestroy", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heapdestroy", "description": "Destroys the specified heap object.\nIt decommits and releases all the pages of a private heap object, and it invalidates the handle to the heap.", "parameters": [{"name": "hHeap", "type": "", "description": "\nA handle to the heap to be destroyed. This handle is returned by the\nHeapCreate function. Do not use the handle to the process heap returned by the\nGetProcessHeap function.", "possible_constants": []}]}, {"name": "HeapFree", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heapfree", "description": "Frees a memory block allocated from a heap by the\nHeapAlloc or\nHeapReAlloc function.", "parameters": [{"name": "hHeap", "type": "", "description": "\nA handle to the heap whose memory block is to be freed. This handle is returned by either the\nHeapCreate or\nGetProcessHeap function.", "possible_constants": []}, {"name": "dwFlags", "type": "", "description": "\nThe heap free options. Specifying the following value overrides the corresponding value specified in the flOptions parameter when the heap was created by using the\nHeapCreate function.", "possible_constants": [{"HEAP_NO_SERIALIZE": 1}]}, {"name": "lpMem", "type": "", "description": "\nA pointer to the memory block to be freed. This pointer is returned by the\nHeapAlloc or\nHeapReAlloc function. This pointer can be NULL.", "possible_constants": []}]}, {"name": "HeapLock", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heaplock", "description": "Attempts to acquire the critical section object, or lock, that is associated with a specified heap.", "parameters": [{"name": "hHeap", "type": "", "description": "\nA handle to the heap to be locked. This handle is returned by either the\nHeapCreate or\nGetProcessHeap function.", "possible_constants": []}]}, {"name": "HeapQueryInformation", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heapqueryinformation", "description": "Retrieves information about the specified heap.", "parameters": [{"name": "HeapHandle", "type": "", "description": "\nA handle to the heap whose information is to be retrieved. This handle is returned by either the\nHeapCreate or\nGetProcessHeap function.", "possible_constants": []}, {"name": "HeapInformationClass", "type": "", "description": "\nThe class of information to be retrieved. This parameter can be the following value from the HEAP_INFORMATION_CLASS enumeration type.", "possible_constants": [{"HeapCompatibilityInformation": -1}]}, {"name": "HeapInformation", "type": "", "description": "\nA pointer to a buffer that receives the heap information. The format of this data depends on the value of the HeapInformationClass parameter.", "possible_constants": []}, {"name": "HeapInformationLength", "type": "", "description": "\nThe size of the heap information being queried, in bytes.", "possible_constants": []}, {"name": "ReturnLength", "type": "", "description": "\nA pointer to a variable that receives the length of data written to the HeapInformation buffer. If the buffer is too small, the function fails and ReturnLength specifies the minimum size required for the buffer.\nIf you do not want to receive this information, specify NULL.", "possible_constants": []}]}, {"name": "HeapReAlloc", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heaprealloc", "description": "Reallocates a block of memory from a heap. This function enables you to resize a memory block and change other memory block properties. The allocated memory is not movable.", "parameters": [{"name": "hHeap", "type": "", "description": "\nA handle to the heap from which the memory is to be reallocated. This handle is a returned by either the\nHeapCreate or\nGetProcessHeap function.", "possible_constants": []}, {"name": "dwFlags", "type": "", "description": "\nThe heap reallocation options. Specifying a value overrides the corresponding value specified in the flOptions parameter when the heap was created by using the\nHeapCreate function. This parameter can be one or more of the following values.", "possible_constants": [{"HEAP_GENERATE_EXCEPTIONS": 4}, {"HEAP_NO_SERIALIZE": 1}, {"HEAP_REALLOC_IN_PLACE_ONLY": 16}, {"HEAP_ZERO_MEMORY": 8}]}, {"name": "lpMem", "type": "", "description": "\nA pointer to the block of memory that the function reallocates. This pointer is returned by an earlier call to the\nHeapAlloc or\nHeapReAlloc function.", "possible_constants": []}, {"name": "dwBytes", "type": "", "description": "\nThe new size of the memory block, in bytes. A memory block's size can be increased or decreased by using this function.\nIf the heap specified by the hHeap parameter is a \"non-growable\" heap, dwBytes must be less than 0x7FFF8. You create a non-growable heap by calling the\nHeapCreate function with a nonzero value.", "possible_constants": []}]}, {"name": "HeapSetInformation", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heapsetinformation", "description": "Enables features for a specified heap.", "parameters": [{"name": "HeapHandle", "type": "", "description": "\nA handle to the heap where information is to be set. This handle is returned by either the\nHeapCreate or\nGetProcessHeap function.", "possible_constants": []}, {"name": "HeapInformationClass", "type": "", "description": "\nThe class of information to be set. This parameter can be one of the following values from the\nHEAP_INFORMATION_CLASS enumeration type.", "possible_constants": [{"HeapCompatibilityInformation": -1}, {"HeapEnableTerminationOnCorruption": -1}, {"HeapOptimizeResources": -1}]}, {"name": "HeapInformation", "type": "", "description": "\nThe heap information buffer. The format of this data depends on the value of the\nHeapInformationClass parameter.\nIf the HeapInformationClass parameter is\nHeapCompatibilityInformation, the HeapInformation\nparameter is a pointer to a ULONG variable.\nIf the HeapInformationClass parameter is\nHeapEnableTerminationOnCorruption, the HeapInformation\nparameter should be NULL and HeapInformationLength should\nbe 0", "possible_constants": []}, {"name": "HeapInformationLength", "type": "", "description": "\nThe size of the HeapInformation buffer, in bytes.", "possible_constants": []}]}, {"name": "HeapSize", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heapsize", "description": "Retrieves the size of a memory block allocated from a heap by the\nHeapAlloc or\nHeapReAlloc function.", "parameters": [{"name": "hHeap", "type": "", "description": "\nA handle to the heap in which the memory block resides. This handle is returned by either the\nHeapCreate or\nGetProcessHeap function.", "possible_constants": []}, {"name": "dwFlags", "type": "", "description": "\nThe heap size options. Specifying the following value overrides the corresponding value specified in the\nflOptions parameter when the heap was created by using the\nHeapCreate function.", "possible_constants": [{"HEAP_NO_SERIALIZE": 1}]}, {"name": "lpMem", "type": "", "description": "\nA pointer to the memory block whose size the function will obtain. This is a pointer returned by the\nHeapAlloc or\nHeapReAlloc function. The memory block must\nbe from the heap specified by the hHeap parameter.", "possible_constants": []}]}, {"name": "HeapSummary", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heapsummary", "description": "Summarizes the specified heap.", "parameters": [{"name": "hHeap", "type": "", "description": "\nA handle to the heap to be summarized. This handle is returned by either the\nHeapCreate or\nGetProcessHeap function.", "possible_constants": []}, {"name": "dwFlags", "type": "", "description": "\nThe heap summary options.", "possible_constants": []}, {"name": "lpSummary", "type": "", "description": "\nReceives a pointer to a Heap_Summary structure representing the heap summary.", "possible_constants": []}]}, {"name": "HeapUnlock", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heapunlock", "description": "Releases ownership of the critical section object, or lock, that is associated with a specified heap. It reverses the action of the\nHeapLock function.", "parameters": [{"name": "hHeap", "type": "", "description": "\nA handle to the heap to be unlocked. This handle is returned by either the\nHeapCreate or\nGetProcessHeap function.", "possible_constants": []}]}, {"name": "HeapValidate", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heapvalidate", "description": "Validates the specified heap. The function scans all the memory blocks in the heap and verifies that the heap control structures maintained by the heap manager are in a consistent state. You can also use the\nHeapValidate function to validate a single memory block within a specified heap without checking the validity of the entire heap.", "parameters": [{"name": "hHeap", "type": "", "description": "\nA handle to the heap to be validated. This handle is returned by either the\nHeapCreate or\nGetProcessHeap function.", "possible_constants": []}, {"name": "dwFlags", "type": "", "description": "\nThe heap access options. This parameter can be the following value.", "possible_constants": [{"HEAP_NO_SERIALIZE": 1}]}, {"name": "lpMem", "type": "", "description": "\nA pointer to a memory block within the specified heap. This parameter may be NULL.\nIf this parameter is NULL, the function attempts to validate the entire heap specified by hHeap.\nIf this parameter is not NULL, the function attempts to validate the memory block pointed to by lpMem. It does not attempt to validate the rest of the heap.", "possible_constants": []}]}, {"name": "HeapWalk", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heapwalk", "description": "Enumerates the memory blocks in the specified heap.", "parameters": [{"name": "hHeap", "type": "", "description": "\nA handle to the heap. This handle is returned by either the\nHeapCreate or\nGetProcessHeap function.", "possible_constants": []}, {"name": "lpEntry", "type": "", "description": "\nA pointer to a PROCESS_HEAP_ENTRY structure\nthat maintains state information for a particular heap enumeration.\nIf the HeapWalk function succeeds, returning the value\nTRUE, this structure's members contain information about the next memory block in the\nheap.\nTo initiate a heap enumeration, set the lpData field of the\nPROCESS_HEAP_ENTRY structure to\nNULL. To continue a particular heap enumeration, call the\nHeapWalk function repeatedly, with no changes to\nhHeap, lpEntry, or any of the members of the\nPROCESS_HEAP_ENTRY structure.", "possible_constants": []}]}]}