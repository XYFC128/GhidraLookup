{"functions": [{"name": "AssocCreateForClasses", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-assoccreateforclasses", "description": "Retrieves an object that implements an IQueryAssociations interface.", "parameters": [{"name": "rgClasses", "type": "const ASSOCIATIONELEMENT*", "description": "A pointer to an array of ASSOCIATIONELEMENT structures.", "possible_constants": []}, {"name": "cClasses", "type": "ULONG", "description": "The number of elements in the array pointed to by rgClasses.", "possible_constants": []}, {"name": "riid", "type": "REFIID", "description": "Reference to the desired IID, normally IID_IQueryAssociations.", "possible_constants": []}, {"name": "ppv", "type": "void**", "description": "When this method returns, contains the interface pointer requested in riid. This is normally IQueryAssociations.", "possible_constants": []}]}, {"name": "CommandLineToArgvW", "return_type": "LPWSTR*", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-commandlinetoargvw", "description": "Parses a Unicode command line string and returns an array of pointers to the command line arguments, along with a count of such arguments, in a way that is similar to the standard C run-time argv and argc values.", "parameters": [{"name": "lpCmdLine", "type": "LPCWSTR", "description": "Pointer to a null-terminated Unicode string that contains the full command line. If this parameter is an empty string the function returns the path to the current executable file.", "possible_constants": []}, {"name": "pNumArgs", "type": "int*", "description": "Pointer to an int that receives the number of array elements returned, similar to argc.", "possible_constants": []}]}, {"name": "DoEnvironmentSubstA", "return_type": "DWORD", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-doenvironmentsubsta", "description": "[This function is retained only for backward compatibility. Use ExpandEnvironmentStrings instead.]\nParses an input string that contains references to one or more environment variables and replaces them with their fully expanded values.\nSyntax\nDWORD DoEnvironmentSubstA(\n  LPSTR pszSrc,\n  UINT  cchSrc\n);\n\nParameters\npszSrc\nType: LPTSTR\nA pointer to a null-terminated string that contains references to one or more environment variables, each in the following form. Case is ignored.\n%VariableName%\nAny character in the string that is not enclosed in '%' characters is ignored and returned unchanged. Therefore, if your string contains multiple environment variables, you can use any character other than '%' as a separator, including spaces or no separator.\nWhen this function returns successfully, each %VariableName% is replaced with its expanded value. The replacement rules are the same as those used by the command interpreter. If the variable name is not found on the system, the %variableName% is left as it was submitted on entry.\nIf this function fails due to the expanded string being too large for the buffer, the contents of this buffer are left unchanged.\ncchSrc\nType: UINT\nThe size, in characters, of the buffer pointed to by pszSrc. Note that the buffer must be large enough to hold the returned string.\nReturn value\nType: DWORD\nIf the expanded string fits in the buffer, TRUE is returned in the HIWORD and the length, in characters, of the new pszSrc is returned in the LOWORD.\nIf the expanded string is too large for the buffer, FALSE is returned in the HIWORD and cchSrc in the LOWORD.\nRemarks\nParameters must contain valid, non-NULL values. You must validate these values. Failure to do so can provide unexpected results.\nBecause the string that is returned in pszSrc will typically be longer than the input string, make sure that the buffer is large enough to hold the expanded version of the string. The allotted size of the cchSrc buffer for ANSI strings must be one larger than the buffer for a Unicode string. When dealing with ANSI strings, use the formula buffer size = string length + terminating null character + 1 to determine the minimum correct buffer size.\nBecause environment variables can be added by the user or applications, the complete list is system-dependent. The following environment variables are standard and are available to both interactive applications and services.\n\nALLUSERSPROFILE\nAPPDATA\nCOMPUTERNAME\nLOCALAPPDATA\nNUMBER_OF_PROCESSORS\nOS\nPROCESSOR_ARCHITECTURE\nPROCESSOR_IDENTIFIER\nPROCESSOR_LEVEL\nPROCESSOR_REVISION\nProgramData\nProgramFiles\nPUBLIC\nSystemDrive\nSystemRoot\nUSERPROFILE\nwindir\n\nThe following are only available to interactive applications.\n\nHOMEDRIVE\nHOMEPATH\nLOGONSERVER\nUSERDOMAIN\nUSERNAME\n\nThe environment variables that correspond to file system folders can be mapped to an equivalent CSIDL or KNOWNFOLDERIDvalue can be obtained through SHGetFolderLocation or SHGetKnownFolderPath. CSIDLs and KNOWNFOLDERIDs are more reliable than environment variable names and should be used whenever possible.\nExamples\nThe following console application demonstrates the use of DoEnvironmentSubstW.\n\n#include \"stdafx.h\"\n#include \"windows.h\"\n#include \"windef.h\"\n#include \"shellapi.h\"\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n\tWCHAR szSrc[MAX_PATH] = L\"%OS%;%HOMEPATH%\";\n\n\tDWORD result = DoEnvironmentSubstW(szSrc, MAX_PATH);\n\n\tWORD success = HIWORD(result);\n\tWORD string_length = LOWORD(result);\n\n\treturn 0;\n}\n\n\nNote\nThe shellapi.h header defines DoEnvironmentSubst as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see Conventions for Function Prototypes.\n\nRequirements\n\n\n\n\u00c2\u00a0\n\u00c2\u00a0\n\n\n\n\nMinimum supported client\nWindows\u00c2\u00a0XP [desktop apps only]\n\n\nMinimum supported server\nWindows\u00c2\u00a02000 Server [desktop apps only]\n\n\nTarget Platform\nWindows\n\n\nHeader\nshellapi.h\n\n\nLibrary\nShell32.lib\n\n\nDLL\nShell32.dll (version 4.0 or later)", "parameters": [{"name": "pszSrc", "type": "LPTSTR", "description": "A pointer to a null-terminated string that contains references to one or more environment variables, each in the following form. Case is ignored.", "possible_constants": []}, {"name": "%VariableName%", "type": "", "description": "Any character in the string that is not enclosed in '%' characters is ignored and returned unchanged. Therefore, if your string contains multiple environment variables, you can use any character other than '%' as a separator, including spaces or no separator.\nWhen this function returns successfully, each %VariableName% is replaced with its expanded value. The replacement rules are the same as those used by the command interpreter. If the variable name is not found on the system, the %variableName% is left as it was submitted on entry.\nIf this function fails due to the expanded string being too large for the buffer, the contents of this buffer are left unchanged.", "possible_constants": []}, {"name": "cchSrc", "type": "UINT", "description": "The size, in characters, of the buffer pointed to by pszSrc. Note that the buffer must be large enough to hold the returned string.", "possible_constants": []}]}, {"name": "DoEnvironmentSubstW", "return_type": "DWORD", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-doenvironmentsubstw", "description": "[This function is retained only for backward compatibility. Use ExpandEnvironmentStrings instead.]\nParses an input string that contains references to one or more environment variables and replaces them with their fully expanded values.\nSyntax\nDWORD DoEnvironmentSubstW(\n  LPWSTR pszSrc,\n  UINT   cchSrc\n);\n\nParameters\npszSrc\nType: LPTSTR\nA pointer to a null-terminated string that contains references to one or more environment variables, each in the following form. Case is ignored.\n%VariableName%\nAny character in the string that is not enclosed in '%' characters is ignored and returned unchanged. Therefore, if your string contains multiple environment variables, you can use any character other than '%' as a separator, including spaces or no separator.\nWhen this function returns successfully, each %VariableName% is replaced with its expanded value. The replacement rules are the same as those used by the command interpreter. If the variable name is not found on the system, the %variableName% is left as it was submitted on entry.\nIf this function fails due to the expanded string being too large for the buffer, the contents of this buffer are left unchanged.\ncchSrc\nType: UINT\nThe size, in characters, of the buffer pointed to by pszSrc. Note that the buffer must be large enough to hold the returned string.\nReturn value\nType: DWORD\nIf the expanded string fits in the buffer, TRUE is returned in the HIWORD and the length, in characters, of the new pszSrc is returned in the LOWORD.\nIf the expanded string is too large for the buffer, FALSE is returned in the HIWORD and cchSrc in the LOWORD.\nRemarks\nParameters must contain valid, non-NULL values. You must validate these values. Failure to do so can provide unexpected results.\nBecause the string that is returned in pszSrc will typically be longer than the input string, make sure that the buffer is large enough to hold the expanded version of the string. The allotted size of the cchSrc buffer for ANSI strings must be one larger than the buffer for a Unicode string. When dealing with ANSI strings, use the formula buffer size = string length + terminating null character + 1 to determine the minimum correct buffer size.\nBecause environment variables can be added by the user or applications, the complete list is system-dependent. The following environment variables are standard and are available to both interactive applications and services.\n\nALLUSERSPROFILE\nAPPDATA\nCOMPUTERNAME\nLOCALAPPDATA\nNUMBER_OF_PROCESSORS\nOS\nPROCESSOR_ARCHITECTURE\nPROCESSOR_IDENTIFIER\nPROCESSOR_LEVEL\nPROCESSOR_REVISION\nProgramData\nProgramFiles\nPUBLIC\nSystemDrive\nSystemRoot\nUSERPROFILE\nwindir\n\nThe following are only available to interactive applications.\n\nHOMEDRIVE\nHOMEPATH\nLOGONSERVER\nUSERDOMAIN\nUSERNAME\n\nThe environment variables that correspond to file system folders can be mapped to an equivalent CSIDL or KNOWNFOLDERIDvalue can be obtained through SHGetFolderLocation or SHGetKnownFolderPath. CSIDLs and KNOWNFOLDERIDs are more reliable than environment variable names and should be used whenever possible.\nExamples\nThe following console application demonstrates the use of DoEnvironmentSubstW.\n\n#include \"stdafx.h\"\n#include \"windows.h\"\n#include \"windef.h\"\n#include \"shellapi.h\"\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n\tWCHAR szSrc[MAX_PATH] = L\"%OS%;%HOMEPATH%\";\n\n\tDWORD result = DoEnvironmentSubstW(szSrc, MAX_PATH);\n\n\tWORD success = HIWORD(result);\n\tWORD string_length = LOWORD(result);\n\n\treturn 0;\n}\n\n\nNote\nThe shellapi.h header defines DoEnvironmentSubst as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see Conventions for Function Prototypes.\n\nRequirements\n\n\n\n\u00c2\u00a0\n\u00c2\u00a0\n\n\n\n\nMinimum supported client\nWindows\u00c2\u00a0XP [desktop apps only]\n\n\nMinimum supported server\nWindows\u00c2\u00a02000 Server [desktop apps only]\n\n\nTarget Platform\nWindows\n\n\nHeader\nshellapi.h\n\n\nLibrary\nShell32.lib\n\n\nDLL\nShell32.dll (version 4.0 or later)", "parameters": [{"name": "pszSrc", "type": "LPTSTR", "description": "A pointer to a null-terminated string that contains references to one or more environment variables, each in the following form. Case is ignored.", "possible_constants": []}, {"name": "%VariableName%", "type": "", "description": "Any character in the string that is not enclosed in '%' characters is ignored and returned unchanged. Therefore, if your string contains multiple environment variables, you can use any character other than '%' as a separator, including spaces or no separator.\nWhen this function returns successfully, each %VariableName% is replaced with its expanded value. The replacement rules are the same as those used by the command interpreter. If the variable name is not found on the system, the %variableName% is left as it was submitted on entry.\nIf this function fails due to the expanded string being too large for the buffer, the contents of this buffer are left unchanged.", "possible_constants": []}, {"name": "cchSrc", "type": "UINT", "description": "The size, in characters, of the buffer pointed to by pszSrc. Note that the buffer must be large enough to hold the returned string.", "possible_constants": []}]}, {"name": "DragAcceptFiles", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-dragacceptfiles", "description": "Registers whether a window accepts dropped files.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "The identifier of the window that is registering whether it will accept dropped files.", "possible_constants": []}, {"name": "fAccept", "type": "BOOL", "description": "A value that indicates if the window identified by the hWnd parameter accepts dropped files. This value is TRUE to accept dropped files or FALSE to discontinue accepting dropped files.", "possible_constants": []}]}, {"name": "DragFinish", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-dragfinish", "description": "Releases memory that the system allocated for use in transferring file names to the application.", "parameters": [{"name": "hDrop", "type": "HDROP", "description": "Identifier of the structure that describes dropped files. This handle is retrieved from the wParam parameter of the WM_DROPFILES message.", "possible_constants": []}]}, {"name": "DragQueryFileA", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-dragqueryfilea", "description": "Retrieves the names of dropped files that result from a successful drag-and-drop operation.", "parameters": [{"name": "hDrop", "type": "HDROP", "description": "Identifier of the structure that contains the file names of the dropped files.", "possible_constants": []}, {"name": "iFile", "type": "UINT", "description": "Index of the file to query. If the value of this parameter is 0xFFFFFFFF, DragQueryFile returns a count of the files dropped. If the value of this parameter is between zero and the total number of files dropped, DragQueryFile copies the file name with the corresponding value to the buffer pointed to by the lpszFile parameter.", "possible_constants": []}, {"name": "lpszFile", "type": "LPTSTR", "description": "The address of a buffer that receives the file name of a dropped file when the function returns. This file name is a null-terminated string. If this parameter is NULL, DragQueryFile returns the required size, in characters, of this buffer.", "possible_constants": []}, {"name": "cch", "type": "UINT", "description": "The size, in characters, of the lpszFile buffer.", "possible_constants": []}]}, {"name": "DragQueryFileW", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-dragqueryfilew", "description": "Retrieves the names of dropped files that result from a successful drag-and-drop operation.", "parameters": [{"name": "hDrop", "type": "HDROP", "description": "Identifier of the structure that contains the file names of the dropped files.", "possible_constants": []}, {"name": "iFile", "type": "UINT", "description": "Index of the file to query. If the value of this parameter is 0xFFFFFFFF, DragQueryFile returns a count of the files dropped. If the value of this parameter is between zero and the total number of files dropped, DragQueryFile copies the file name with the corresponding value to the buffer pointed to by the lpszFile parameter.", "possible_constants": []}, {"name": "lpszFile", "type": "LPTSTR", "description": "The address of a buffer that receives the file name of a dropped file when the function returns. This file name is a null-terminated string. If this parameter is NULL, DragQueryFile returns the required size, in characters, of this buffer.", "possible_constants": []}, {"name": "cch", "type": "UINT", "description": "The size, in characters, of the lpszFile buffer.", "possible_constants": []}]}, {"name": "DragQueryPoint", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-dragquerypoint", "description": "Retrieves the position of the mouse pointer at the time a file was dropped during a drag-and-drop operation.", "parameters": [{"name": "hDrop", "type": "HDROP", "description": "Handle of the drop structure that describes the dropped file.", "possible_constants": []}, {"name": "ppt", "type": "POINT*", "description": "Pointer to a POINT structure that, when this function returns successfully, receives the coordinates of the mouse pointer at the time the file was dropped.", "possible_constants": []}]}, {"name": "DuplicateIcon", "return_type": "HICON", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-duplicateicon", "description": "Creates a duplicate of a specified icon.", "parameters": [{"name": "hInst", "type": "HINSTANCE", "description": "", "possible_constants": []}, {"name": "hIcon", "type": "HICON", "description": "Handle to the icon to be duplicated.", "possible_constants": []}]}, {"name": "ExtractAssociatedIconA", "return_type": "HICON", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-extractassociatedicona", "description": "Gets a handle to an icon stored as a resource in a file or an icon stored in a file's associated executable file.", "parameters": [{"name": "hInst", "type": "HINSTANCE", "description": "A handle to the instance of the calling application.", "possible_constants": []}, {"name": "pszIconPath", "type": "LPTSTR", "description": "Pointer to a string that, on entry, specifies the full path and file name of the file that contains the icon. The function extracts the icon handle from that file, or from an executable file associated with that file.\nWhen this function returns, if the icon handle was obtained from an executable file (either an executable file pointed to by lpIconPath or an associated executable file) the function stores the full path and file name of that executable in the buffer pointed to by this parameter.", "possible_constants": []}, {"name": "piIcon", "type": "LPWORD", "description": "Pointer to a WORD value that, on entry, specifies the index of the icon whose handle is to be obtained.\nWhen the function returns, if the icon handle was obtained from an executable file (either an executable file pointed to by lpIconPath or an associated executable file), this value points to the icon's index in that file.", "possible_constants": []}]}, {"name": "ExtractAssociatedIconExA", "return_type": "HICON", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-extractassociatediconexa", "description": "[ExtractAssociatedIconEx is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]\nGets a handle to an icon stored as a resource in a file or an icon stored in a file's associated executable file. It extends the ExtractAssociatedIcon function by retrieving the icon's ID when that icon is extracted from an executable file.\nSyntax\nHICON ExtractAssociatedIconExA(\n  HINSTANCE hInst,\n  LPSTR     pszIconPath,\n  WORD      *piIconIndex,\n  WORD      *piIconId\n);\n\nParameters\nhInst\nType: HINSTANCE\nThe handle of the module from which to extract the icon.\npszIconPath\nType: LPTSTR\nPointer to a string that, on entry, specifies the full path and file name of the file that contains the icon. The function extracts the icon handle from that file, or from an executable file associated with that file.\nWhen this function returns, if the icon handle was obtained from an executable file (either an executable file directly pointed to by this parameter or an associated executable file) the function stores the full path and file name of that executable in the buffer pointed to by this parameter.\npiIconIndex\nType: LPWORD\nPointer to a WORD value that, on entry, specifies the index of the icon whose handle is to be obtained.\nWhen the function returns, if the icon handle was obtained from an executable file (either an executable file pointed to by lpIconPath or an associated executable file), this value points to the icon's index in that file.\npiIconId\nType: LPWORD\nPointer to a WORD value that, on entry, specifies the ID of the icon whose handle is to be obtained.\nWhen the function returns, if the icon handle was obtained from an executable file (either an executable file pointed to by lpIconPath or an associated executable file), this value points to the icon's ID within that file.\nReturn value\nType: HICON\nReturns the icon's handle if successful, otherwise NULL.\nRemarks\nThe icon handle returned by this function must be released by calling DestroyIcon when it is no longer needed.\n\nNote\nThe shellapi.h header defines ExtractAssociatedIconEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see Conventions for Function Prototypes.\n\nRequirements\n\n\n\n\u00c2\u00a0\n\u00c2\u00a0\n\n\n\n\nMinimum supported client\nWindows\u00c2\u00a0XP [desktop apps only]\n\n\nMinimum supported server\nWindows Server\u00c2\u00a02003 [desktop apps only]\n\n\nTarget Platform\nWindows\n\n\nHeader\nshellapi.h\n\n\nLibrary\nShell32.lib\n\n\nDLL\nShell32.dll (version 5.0 or later)\n\n\n\nSee also\nExtractAssociatedIcon\nExtractIcon\nExtractIconEx", "parameters": [{"name": "hInst", "type": "HINSTANCE", "description": "The handle of the module from which to extract the icon.", "possible_constants": []}, {"name": "pszIconPath", "type": "LPTSTR", "description": "Pointer to a string that, on entry, specifies the full path and file name of the file that contains the icon. The function extracts the icon handle from that file, or from an executable file associated with that file.\nWhen this function returns, if the icon handle was obtained from an executable file (either an executable file directly pointed to by this parameter or an associated executable file) the function stores the full path and file name of that executable in the buffer pointed to by this parameter.", "possible_constants": []}, {"name": "piIconIndex", "type": "LPWORD", "description": "Pointer to a WORD value that, on entry, specifies the index of the icon whose handle is to be obtained.\nWhen the function returns, if the icon handle was obtained from an executable file (either an executable file pointed to by lpIconPath or an associated executable file), this value points to the icon's index in that file.", "possible_constants": []}, {"name": "piIconId", "type": "LPWORD", "description": "Pointer to a WORD value that, on entry, specifies the ID of the icon whose handle is to be obtained.\nWhen the function returns, if the icon handle was obtained from an executable file (either an executable file pointed to by lpIconPath or an associated executable file), this value points to the icon's ID within that file.", "possible_constants": []}]}, {"name": "ExtractAssociatedIconExW", "return_type": "HICON", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-extractassociatediconexw", "description": "[ExtractAssociatedIconEx is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]\nGets a handle to an icon stored as a resource in a file or an icon stored in a file's associated executable file. It extends the ExtractAssociatedIcon function by retrieving the icon's ID when that icon is extracted from an executable file.\nSyntax\nHICON ExtractAssociatedIconExW(\n  HINSTANCE hInst,\n  LPWSTR    pszIconPath,\n  WORD      *piIconIndex,\n  WORD      *piIconId\n);\n\nParameters\nhInst\nType: HINSTANCE\nThe handle of the module from which to extract the icon.\npszIconPath\nType: LPTSTR\nPointer to a string that, on entry, specifies the full path and file name of the file that contains the icon. The function extracts the icon handle from that file, or from an executable file associated with that file.\nWhen this function returns, if the icon handle was obtained from an executable file (either an executable file directly pointed to by this parameter or an associated executable file) the function stores the full path and file name of that executable in the buffer pointed to by this parameter.\npiIconIndex\nType: LPWORD\nPointer to a WORD value that, on entry, specifies the index of the icon whose handle is to be obtained.\nWhen the function returns, if the icon handle was obtained from an executable file (either an executable file pointed to by lpIconPath or an associated executable file), this value points to the icon's index in that file.\npiIconId\nType: LPWORD\nPointer to a WORD value that, on entry, specifies the ID of the icon whose handle is to be obtained.\nWhen the function returns, if the icon handle was obtained from an executable file (either an executable file pointed to by lpIconPath or an associated executable file), this value points to the icon's ID within that file.\nReturn value\nType: HICON\nReturns the icon's handle if successful, otherwise NULL.\nRemarks\nThe icon handle returned by this function must be released by calling DestroyIcon when it is no longer needed.\n\nNote\nThe shellapi.h header defines ExtractAssociatedIconEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see Conventions for Function Prototypes.\n\nRequirements\n\n\n\n\u00c2\u00a0\n\u00c2\u00a0\n\n\n\n\nMinimum supported client\nWindows\u00c2\u00a0XP [desktop apps only]\n\n\nMinimum supported server\nWindows Server\u00c2\u00a02003 [desktop apps only]\n\n\nTarget Platform\nWindows\n\n\nHeader\nshellapi.h\n\n\nLibrary\nShell32.lib\n\n\nDLL\nShell32.dll (version 5.0 or later)\n\n\n\nSee also\nExtractAssociatedIcon\nExtractIcon\nExtractIconEx", "parameters": [{"name": "hInst", "type": "HINSTANCE", "description": "The handle of the module from which to extract the icon.", "possible_constants": []}, {"name": "pszIconPath", "type": "LPTSTR", "description": "Pointer to a string that, on entry, specifies the full path and file name of the file that contains the icon. The function extracts the icon handle from that file, or from an executable file associated with that file.\nWhen this function returns, if the icon handle was obtained from an executable file (either an executable file directly pointed to by this parameter or an associated executable file) the function stores the full path and file name of that executable in the buffer pointed to by this parameter.", "possible_constants": []}, {"name": "piIconIndex", "type": "LPWORD", "description": "Pointer to a WORD value that, on entry, specifies the index of the icon whose handle is to be obtained.\nWhen the function returns, if the icon handle was obtained from an executable file (either an executable file pointed to by lpIconPath or an associated executable file), this value points to the icon's index in that file.", "possible_constants": []}, {"name": "piIconId", "type": "LPWORD", "description": "Pointer to a WORD value that, on entry, specifies the ID of the icon whose handle is to be obtained.\nWhen the function returns, if the icon handle was obtained from an executable file (either an executable file pointed to by lpIconPath or an associated executable file), this value points to the icon's ID within that file.", "possible_constants": []}]}, {"name": "ExtractAssociatedIconW", "return_type": "HICON", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-extractassociatediconw", "description": "Gets a handle to an icon stored as a resource in a file or an icon stored in a file's associated executable file.", "parameters": [{"name": "hInst", "type": "HINSTANCE", "description": "A handle to the instance of the calling application.", "possible_constants": []}, {"name": "pszIconPath", "type": "LPTSTR", "description": "Pointer to a string that, on entry, specifies the full path and file name of the file that contains the icon. The function extracts the icon handle from that file, or from an executable file associated with that file.\nWhen this function returns, if the icon handle was obtained from an executable file (either an executable file pointed to by lpIconPath or an associated executable file) the function stores the full path and file name of that executable in the buffer pointed to by this parameter.", "possible_constants": []}, {"name": "piIcon", "type": "LPWORD", "description": "Pointer to a WORD value that, on entry, specifies the index of the icon whose handle is to be obtained.\nWhen the function returns, if the icon handle was obtained from an executable file (either an executable file pointed to by lpIconPath or an associated executable file), this value points to the icon's index in that file.", "possible_constants": []}]}, {"name": "ExtractIconA", "return_type": "HICON", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-extracticona", "description": "Gets a handle to an icon from the specified executable file, DLL, or icon file.", "parameters": [{"name": "hInst", "type": "HINSTANCE", "description": "Handle to the instance of the application that calls the function.", "possible_constants": []}, {"name": "pszExeFileName", "type": "LPCTSTR", "description": "Pointer to a null-terminated string that specifies the name of an executable file, DLL, or icon file.", "possible_constants": []}, {"name": "nIconIndex", "type": "UINT", "description": "Specifies the zero-based index of the icon to retrieve. For example, if this value is 0, the function returns a handle to the first icon in the specified file.\nIf this value is -1, the function returns the total number of icons in the specified file. If the file is an executable file or DLL, the return value is the number of RT_GROUP_ICON resources. If the file is an .ICO file, the return value is 1.\nIf this value is a negative number not equal to \u00e2\u0080\u00931, the function returns a handle to the icon in the specified file whose resource identifier is equal to the absolute value of nIconIndex. For example, you should use \u00e2\u0080\u00933 to extract the icon whose resource identifier is 3. To extract the icon whose resource identifier is 1, use the ExtractIconEx function.", "possible_constants": []}]}, {"name": "ExtractIconExA", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-extracticonexa", "description": "The ExtractIconEx function creates an array of handles to large or small icons extracted from the specified executable file, DLL, or icon file.", "parameters": [{"name": "lpszFile", "type": "LPCTSTR", "description": "Pointer to a null-terminated string that specifies the name of an executable file, DLL, or icon file from which icons will be extracted.", "possible_constants": []}, {"name": "nIconIndex", "type": "int", "description": "Specifies the zero-based index of the first icon to extract. For example, if this value is zero, the function extracts the first icon in the specified file.\nIf this value is \u00e2\u0080\u00931 and phiconLarge and phiconSmall are both NULL, the function returns the total number of icons in the specified file. If the file is an executable file or DLL, the return value is the number of RT_GROUP_ICON resources. If the file is an .ico file, the return value is 1.\nIf this value is a negative number and either phiconLarge or phiconSmall is not NULL, the function begins by extracting the icon whose resource identifier is equal to the absolute value of nIconIndex. For example, use -3 to extract the icon whose resource identifier is 3.", "possible_constants": []}, {"name": "phiconLarge", "type": "HICON*", "description": "Pointer to an array of icon handles that receives handles to the large icons extracted from the file. If this parameter is NULL, no large icons are extracted from the file.", "possible_constants": []}, {"name": "phiconSmall", "type": "HICON*", "description": "Pointer to an array of icon handles that receives handles to the small icons extracted from the file. If this parameter is NULL, no small icons are extracted from the file.", "possible_constants": []}, {"name": "nIcons", "type": "UINT", "description": "The number of icons to extract from the file.", "possible_constants": []}]}, {"name": "ExtractIconExW", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-extracticonexw", "description": "The ExtractIconEx function creates an array of handles to large or small icons extracted from the specified executable file, DLL, or icon file.", "parameters": [{"name": "lpszFile", "type": "LPCTSTR", "description": "Pointer to a null-terminated string that specifies the name of an executable file, DLL, or icon file from which icons will be extracted.", "possible_constants": []}, {"name": "nIconIndex", "type": "int", "description": "Specifies the zero-based index of the first icon to extract. For example, if this value is zero, the function extracts the first icon in the specified file.\nIf this value is \u00e2\u0080\u00931 and phiconLarge and phiconSmall are both NULL, the function returns the total number of icons in the specified file. If the file is an executable file or DLL, the return value is the number of RT_GROUP_ICON resources. If the file is an .ico file, the return value is 1.\nIf this value is a negative number and either phiconLarge or phiconSmall is not NULL, the function begins by extracting the icon whose resource identifier is equal to the absolute value of nIconIndex. For example, use -3 to extract the icon whose resource identifier is 3.", "possible_constants": []}, {"name": "phiconLarge", "type": "HICON*", "description": "Pointer to an array of icon handles that receives handles to the large icons extracted from the file. If this parameter is NULL, no large icons are extracted from the file.", "possible_constants": []}, {"name": "phiconSmall", "type": "HICON*", "description": "Pointer to an array of icon handles that receives handles to the small icons extracted from the file. If this parameter is NULL, no small icons are extracted from the file.", "possible_constants": []}, {"name": "nIcons", "type": "UINT", "description": "The number of icons to extract from the file.", "possible_constants": []}]}, {"name": "ExtractIconW", "return_type": "HICON", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-extracticonw", "description": "Gets a handle to an icon from the specified executable file, DLL, or icon file.", "parameters": [{"name": "hInst", "type": "HINSTANCE", "description": "Handle to the instance of the application that calls the function.", "possible_constants": []}, {"name": "pszExeFileName", "type": "LPCTSTR", "description": "Pointer to a null-terminated string that specifies the name of an executable file, DLL, or icon file.", "possible_constants": []}, {"name": "nIconIndex", "type": "UINT", "description": "Specifies the zero-based index of the icon to retrieve. For example, if this value is 0, the function returns a handle to the first icon in the specified file.\nIf this value is -1, the function returns the total number of icons in the specified file. If the file is an executable file or DLL, the return value is the number of RT_GROUP_ICON resources. If the file is an .ICO file, the return value is 1.\nIf this value is a negative number not equal to \u00e2\u0080\u00931, the function returns a handle to the icon in the specified file whose resource identifier is equal to the absolute value of nIconIndex. For example, you should use \u00e2\u0080\u00933 to extract the icon whose resource identifier is 3. To extract the icon whose resource identifier is 1, use the ExtractIconEx function.", "possible_constants": []}]}, {"name": "FindExecutableA", "return_type": "HINSTANCE", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-findexecutablea", "description": "Retrieves the name of and handle to the executable (.exe) file associated with a specific document file.", "parameters": [{"name": "lpFile", "type": "LPCTSTR", "description": "The address of a null-terminated string that specifies a file name. This file should be a document.", "possible_constants": []}, {"name": "lpDirectory", "type": "LPCTSTR", "description": "The address of a null-terminated string that specifies the default directory. This value can be NULL.", "possible_constants": []}, {"name": "lpResult", "type": "LPTSTR", "description": "The address of a buffer that receives the file name of the associated executable file. This file name is a null-terminated string that specifies the executable file started when an \"open\" by association is run on the file specified in the lpFile parameter. Put simply, this is the application that is launched when the document file is directly double-clicked or when Open is chosen from the file's shortcut menu. This parameter must contain a valid non-null value and is assumed to be of length MAX_PATH. Responsibility for validating the value is left to the programmer.", "possible_constants": []}]}, {"name": "FindExecutableW", "return_type": "HINSTANCE", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-findexecutablew", "description": "Retrieves the name of and handle to the executable (.exe) file associated with a specific document file.", "parameters": [{"name": "lpFile", "type": "LPCTSTR", "description": "The address of a null-terminated string that specifies a file name. This file should be a document.", "possible_constants": []}, {"name": "lpDirectory", "type": "LPCTSTR", "description": "The address of a null-terminated string that specifies the default directory. This value can be NULL.", "possible_constants": []}, {"name": "lpResult", "type": "LPTSTR", "description": "The address of a buffer that receives the file name of the associated executable file. This file name is a null-terminated string that specifies the executable file started when an \"open\" by association is run on the file specified in the lpFile parameter. Put simply, this is the application that is launched when the document file is directly double-clicked or when Open is chosen from the file's shortcut menu. This parameter must contain a valid non-null value and is assumed to be of length MAX_PATH. Responsibility for validating the value is left to the programmer.", "possible_constants": []}]}, {"name": "InitNetworkAddressControl", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-initnetworkaddresscontrol", "description": "Initializes the network address control window class.", "parameters": []}, {"name": "NetAddr_DisplayErrorTip", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-netaddr_displayerrortip", "description": "Displays an error message in the balloon tip associated with the network address control.", "parameters": [{"name": "hwnd", "type": "", "description": "A handle to the network address control.", "possible_constants": []}]}, {"name": "NetAddr_GetAddress", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-netaddr_getaddress", "description": "Indicates whether a network address conforms to a specified type and format.", "parameters": [{"name": "hwnd", "type": "", "description": "A handle to the network address control that contains the address to validate.", "possible_constants": []}, {"name": "pv", "type": "", "description": "A pointer to an NC_ADDRESS structure to receive network address information in parsed form, if the address format and type in the control specified by hwnd are validated. The calling application is responsible for allocating the memory for this structure.", "possible_constants": []}]}, {"name": "NetAddr_GetAllowType", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-netaddr_getallowtype", "description": "Retrieves the network address types that a specified network address control accepts.", "parameters": [{"name": "hwnd", "type": "", "description": "A handle to the network address control.", "possible_constants": []}]}, {"name": "NetAddr_SetAllowType", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-netaddr_setallowtype", "description": "Sets the network address types that a specified network address control accepts.", "parameters": [{"name": "hwnd", "type": "", "description": "A handle to the network address control.", "possible_constants": []}, {"name": "addrMask", "type": "", "description": "Specifies the network address types as one or more of the NET_STRING constants.", "possible_constants": []}]}, {"name": "SHAppBarMessage", "return_type": "UINT_PTR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shappbarmessage", "description": "Sends an appbar message to the system.", "parameters": [{"name": "dwMessage", "type": "DWORD", "description": "Appbar message value to send. This parameter can be one of the following values.", "possible_constants": []}]}, {"name": "SHCreateProcessAsUserW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shcreateprocessasuserw", "description": "[SHCreateProcessAsUserW is not implemented under Windows\u00c2\u00a0XP or later systems.]\nCreates a new user-mode process and its primary thread to run a specified executable file.\nSyntax\nBOOL SHCreateProcessAsUserW(\n  PSHCREATEPROCESSINFOW pscpi\n);\n\nParameters\npscpi\nType: PSHCREATEPROCESSINFOW\nA pointer to an SHCREATEPROCESSINFOW structure with information on how to create the process.\nReturn value\nType: BOOL\nReturns TRUE if successful, or FALSE if not. To retrieve extended error information, call GetLastError.\nRemarks\nThis function is similar to ShellExecuteEx with runas as the verb. However, SHCreateProcessAsUserW creates a process that runs in the security context of the user represented by the hUserToken member of the structure pointed to by pscpi. The lpProcessInformation member can be used to return a PROCESS_INFORMATION structure with information on the new process.\nThe runas verb must be supported by the executable file's file type. The .exe file type supports runas. Use the AssocQueryString function to check whether runas is supported by other file types. The following code fragment illustrates the syntax.\nAssocQueryString(0, ASSOCSTR_COMMAND, pszFile, TEXT(\"runas\"), NULL, &cchVerb)\n\nFor a discussion of how to use the Shell to launch applications, see Launching Applications.\nSHCreateProcessAsUserW is not supported under Windows\u00c2\u00a0XP. Users requiring similar functionality should examine CreateProcess, CreateProcessAsUser, CreateProcessWithLogonW and ShellExecuteEx, carefully evaluating each based on required functionality and security. IQueryAssociations can be used to extract information used with CreateProcess, if necessary.\nRequirements\n\n\n\n\u00c2\u00a0\n\u00c2\u00a0\n\n\n\n\nMinimum supported client\nWindows\u00c2\u00a02000 Professional, Windows\u00c2\u00a0XP [desktop apps only]\n\n\nMinimum supported server\nWindows Server\u00c2\u00a02003 [desktop apps only]\n\n\nTarget Platform\nWindows\n\n\nHeader\nshellapi.h\n\n\nLibrary\nShell32.lib\n\n\nDLL\nShell32.dll (version 5.0 or later)\n\n\n\nSee also\nCreateProcess\nCreateProcessAsUser\nCreateProcessWithLogonW\nShellExecuteEx", "parameters": [{"name": "pscpi", "type": "PSHCREATEPROCESSINFOW", "description": "A pointer to an SHCREATEPROCESSINFOW structure with information on how to create the process.", "possible_constants": []}]}, {"name": "Shell_NotifyIconA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shell_notifyicona", "description": "Sends a message to the taskbar's status area.", "parameters": [{"name": "dwMessage", "type": "DWORD", "description": "A value that specifies the action to be taken by this function. It can have one of the following values:", "possible_constants": []}]}, {"name": "Shell_NotifyIconGetRect", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shell_notifyicongetrect", "description": "Gets the screen coordinates of the bounding rectangle of a notification icon.", "parameters": [{"name": "identifier", "type": "const NOTIFYICONIDENTIFIER*", "description": "Pointer to a NOTIFYICONIDENTIFIER structure that identifies the icon.", "possible_constants": []}, {"name": "iconLocation", "type": "RECT*", "description": "Pointer to a RECT structure that, when this function returns successfully, receives the coordinates of the icon.", "possible_constants": []}]}, {"name": "Shell_NotifyIconW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shell_notifyiconw", "description": "Sends a message to the taskbar's status area.", "parameters": [{"name": "dwMessage", "type": "DWORD", "description": "A value that specifies the action to be taken by this function. It can have one of the following values:", "possible_constants": []}]}, {"name": "ShellAboutA", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shellabouta", "description": "Displays a ShellAbout dialog box.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A window handle to a parent window. This parameter can be NULL.", "possible_constants": []}, {"name": "szApp", "type": "LPCTSTR", "description": "A pointer to a null-terminated string that contains text to be displayed in the title bar of the ShellAbout dialog box and on the first line of the dialog box after the text \"Microsoft\". If the text contains a separator (#) that divides it into two parts, the function displays the first part in the title bar and the second part on the first line after the text \"Microsoft\".\nWindows\u00c2\u00a02000, Windows\u00c2\u00a0XP, Windows Server\u00c2\u00a02003: If the string pointed to by this parameter contains a separator (#), then the string must be writeable.\nWindows\u00c2\u00a0Vista, Windows Server\u00c2\u00a02008: This string cannot exceed 200 characters in length.", "possible_constants": []}, {"name": "szOtherStuff", "type": "LPCTSTR", "description": "A pointer to a null-terminated string that contains text to be displayed in the dialog box after the version and copyright information. This parameter can be NULL.", "possible_constants": []}, {"name": "hIcon", "type": "HICON", "description": "The handle of an icon that the function displays in the dialog box. This parameter can be NULL, in which case the function displays the Windows icon.", "possible_constants": []}]}, {"name": "ShellAboutW", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shellaboutw", "description": "Displays a ShellAbout dialog box.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A window handle to a parent window. This parameter can be NULL.", "possible_constants": []}, {"name": "szApp", "type": "LPCTSTR", "description": "A pointer to a null-terminated string that contains text to be displayed in the title bar of the ShellAbout dialog box and on the first line of the dialog box after the text \"Microsoft\". If the text contains a separator (#) that divides it into two parts, the function displays the first part in the title bar and the second part on the first line after the text \"Microsoft\".\nWindows\u00c2\u00a02000, Windows\u00c2\u00a0XP, Windows Server\u00c2\u00a02003: If the string pointed to by this parameter contains a separator (#), then the string must be writeable.\nWindows\u00c2\u00a0Vista, Windows Server\u00c2\u00a02008: This string cannot exceed 200 characters in length.", "possible_constants": []}, {"name": "szOtherStuff", "type": "LPCTSTR", "description": "A pointer to a null-terminated string that contains text to be displayed in the dialog box after the version and copyright information. This parameter can be NULL.", "possible_constants": []}, {"name": "hIcon", "type": "HICON", "description": "The handle of an icon that the function displays in the dialog box. This parameter can be NULL, in which case the function displays the Windows icon.", "possible_constants": []}]}, {"name": "ShellExecuteA", "return_type": "HINSTANCE", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shellexecutea", "description": "Performs an operation on a specified file.", "parameters": [{"name": "hwnd", "type": "HWND", "description": "A handle to the parent window used for displaying a UI or error messages. This value can be NULL if the operation is not associated with a window.", "possible_constants": []}, {"name": "lpOperation", "type": "LPCTSTR", "description": "A pointer to a null-terminated string, referred to in this case as a verb, that specifies the action to be performed. The set of available verbs depends on the particular file or folder. Generally, the actions available from an object's shortcut menu are available verbs. The following verbs are commonly used:", "possible_constants": []}]}, {"name": "ShellExecuteExA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shellexecuteexa", "description": "Performs an operation on a specified file.", "parameters": [{"name": "pExecInfo", "type": "SHELLEXECUTEINFO*", "description": "A pointer to a SHELLEXECUTEINFO structure that contains and receives information about the application being executed.", "possible_constants": []}]}, {"name": "ShellExecuteExW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shellexecuteexw", "description": "Performs an operation on a specified file.", "parameters": [{"name": "pExecInfo", "type": "SHELLEXECUTEINFO*", "description": "A pointer to a SHELLEXECUTEINFO structure that contains and receives information about the application being executed.", "possible_constants": []}]}, {"name": "ShellExecuteW", "return_type": "HINSTANCE", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shellexecutew", "description": "Performs an operation on a specified file.", "parameters": [{"name": "hwnd", "type": "HWND", "description": "A handle to the parent window used for displaying a UI or error messages. This value can be NULL if the operation is not associated with a window.", "possible_constants": []}, {"name": "lpOperation", "type": "LPCTSTR", "description": "A pointer to a null-terminated string, referred to in this case as a verb, that specifies the action to be performed. The set of available verbs depends on the particular file or folder. Generally, the actions available from an object's shortcut menu are available verbs. The following verbs are commonly used:", "possible_constants": []}]}, {"name": "ShellMessageBoxA", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shellmessageboxa", "description": "[ShellMessageBox is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]\nShellMessageBox is a special instance of MessageBox that provides the option of using the owner window's title as the title of the message box.\nSyntax\nint ShellMessageBoxA(\n  HINSTANCE hAppInst,\n  HWND      hWnd,\n  LPCSTR    lpcText,\n  LPCSTR    lpcTitle,\n  UINT      fuStyle,\n  ...       \n);\n\nParameters\nhAppInst\nType: HINSTANCE\nThe handle of the module from which to load a string resource named in pszTitle. If pszTitle does not name a string resource, this parameter is ignored. This value must be valid if pszMsg or pszTitle is a resource ID.\nhWnd\nType: HWND\nA handle to the owner window of the message box to be created. If this variable is not NULL, the title of the owner window is used as the title of the message box.\nlpcText\nType: LPCTSTR\nA pointer to a null-terminated string that contains either the message to be displayed or a resource ID specifying where the message is to be retrieved from.\nlpcTitle\nType: LPCTSTR\nA pointer to a null-terminated string that contains the dialog box title or a resource ID specifying where the title is to be retrieved. If both this parameter and hWnd are NULL, no title is displayed. If this parameter points to a loadable resource formed with the MAKEINTRESOURCE macro, it overrides hWnd as the title.\nfuStyle\nType: UINT\nSpecifies the contents and behavior of the dialog box. For possible values, see MessageBox.\n...\nA variable argument list that is combined with pszMsg to form the full text displayed in the message box.\nReturn value\nType: int\nAn integer value indicating a button that was pressed in the message box. For specific values, see MessageBox.\nIf the function fails, the return value is zero. To get extended error information, call GetLastError.\nRemarks\n\nNote\nThe shellapi.h header defines ShellMessageBox as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see Conventions for Function Prototypes.\n\nRequirements\n\n\n\n\u00c2\u00a0\n\u00c2\u00a0\n\n\n\n\nMinimum supported client\nWindows\u00c2\u00a0XP [desktop apps only]\n\n\nMinimum supported server\nWindows Server\u00c2\u00a02003 [desktop apps only]\n\n\nTarget Platform\nWindows\n\n\nHeader\nshellapi.h\n\n\nLibrary\nShlwapi.lib\n\n\nDLL\nShlwapi.dll\n\n\n\nSee also\nMAKEINTRESOURCE\nMessageBox", "parameters": [{"name": "hAppInst", "type": "HINSTANCE", "description": "The handle of the module from which to load a string resource named in pszTitle. If pszTitle does not name a string resource, this parameter is ignored. This value must be valid if pszMsg or pszTitle is a resource ID.", "possible_constants": []}, {"name": "hWnd", "type": "HWND", "description": "A handle to the owner window of the message box to be created. If this variable is not NULL, the title of the owner window is used as the title of the message box.", "possible_constants": []}, {"name": "lpcText", "type": "LPCTSTR", "description": "A pointer to a null-terminated string that contains either the message to be displayed or a resource ID specifying where the message is to be retrieved from.", "possible_constants": []}, {"name": "lpcTitle", "type": "LPCTSTR", "description": "A pointer to a null-terminated string that contains the dialog box title or a resource ID specifying where the title is to be retrieved. If both this parameter and hWnd are NULL, no title is displayed. If this parameter points to a loadable resource formed with the MAKEINTRESOURCE macro, it overrides hWnd as the title.", "possible_constants": []}, {"name": "fuStyle", "type": "UINT", "description": "Specifies the contents and behavior of the dialog box. For possible values, see MessageBox.", "possible_constants": []}, {"name": "...", "type": "", "description": "A variable argument list that is combined with pszMsg to form the full text displayed in the message box.", "possible_constants": []}]}, {"name": "ShellMessageBoxW", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shellmessageboxw", "description": "[ShellMessageBox is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]\nShellMessageBox is a special instance of MessageBox that provides the option of using the owner window's title as the title of the message box.\nSyntax\nint ShellMessageBoxW(\n  HINSTANCE hAppInst,\n  HWND      hWnd,\n  LPCWSTR   lpcText,\n  LPCWSTR   lpcTitle,\n  UINT      fuStyle,\n  ...       \n);\n\nParameters\nhAppInst\nType: HINSTANCE\nThe handle of the module from which to load a string resource named in pszTitle. If pszTitle does not name a string resource, this parameter is ignored. This value must be valid if pszMsg or pszTitle is a resource ID.\nhWnd\nType: HWND\nA handle to the owner window of the message box to be created. If this variable is not NULL, the title of the owner window is used as the title of the message box.\nlpcText\nType: LPCTSTR\nA pointer to a null-terminated string that contains either the message to be displayed or a resource ID specifying where the message is to be retrieved from.\nlpcTitle\nType: LPCTSTR\nA pointer to a null-terminated string that contains the dialog box title or a resource ID specifying where the title is to be retrieved. If both this parameter and hWnd are NULL, no title is displayed. If this parameter points to a loadable resource formed with the MAKEINTRESOURCE macro, it overrides hWnd as the title.\nfuStyle\nType: UINT\nSpecifies the contents and behavior of the dialog box. For possible values, see MessageBox.\n...\nA variable argument list that is combined with pszMsg to form the full text displayed in the message box.\nReturn value\nType: int\nAn integer value indicating a button that was pressed in the message box. For specific values, see MessageBox.\nIf the function fails, the return value is zero. To get extended error information, call GetLastError.\nRemarks\n\nNote\nThe shellapi.h header defines ShellMessageBox as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see Conventions for Function Prototypes.\n\nRequirements\n\n\n\n\u00c2\u00a0\n\u00c2\u00a0\n\n\n\n\nMinimum supported client\nWindows\u00c2\u00a0XP [desktop apps only]\n\n\nMinimum supported server\nWindows Server\u00c2\u00a02003 [desktop apps only]\n\n\nTarget Platform\nWindows\n\n\nHeader\nshellapi.h\n\n\nLibrary\nShlwapi.lib\n\n\nDLL\nShlwapi.dll\n\n\n\nSee also\nMAKEINTRESOURCE\nMessageBox", "parameters": [{"name": "hAppInst", "type": "HINSTANCE", "description": "The handle of the module from which to load a string resource named in pszTitle. If pszTitle does not name a string resource, this parameter is ignored. This value must be valid if pszMsg or pszTitle is a resource ID.", "possible_constants": []}, {"name": "hWnd", "type": "HWND", "description": "A handle to the owner window of the message box to be created. If this variable is not NULL, the title of the owner window is used as the title of the message box.", "possible_constants": []}, {"name": "lpcText", "type": "LPCTSTR", "description": "A pointer to a null-terminated string that contains either the message to be displayed or a resource ID specifying where the message is to be retrieved from.", "possible_constants": []}, {"name": "lpcTitle", "type": "LPCTSTR", "description": "A pointer to a null-terminated string that contains the dialog box title or a resource ID specifying where the title is to be retrieved. If both this parameter and hWnd are NULL, no title is displayed. If this parameter points to a loadable resource formed with the MAKEINTRESOURCE macro, it overrides hWnd as the title.", "possible_constants": []}, {"name": "fuStyle", "type": "UINT", "description": "Specifies the contents and behavior of the dialog box. For possible values, see MessageBox.", "possible_constants": []}, {"name": "...", "type": "", "description": "A variable argument list that is combined with pszMsg to form the full text displayed in the message box.", "possible_constants": []}]}, {"name": "SHEmptyRecycleBinA", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shemptyrecyclebina", "description": "Empties the Recycle Bin on the specified drive.", "parameters": [{"name": "hwnd", "type": "HWND", "description": "A handle to the parent window of any dialog boxes that might be displayed during the operation. This parameter can be NULL.", "possible_constants": []}, {"name": "pszRootPath", "type": "LPCTSTR", "description": "The address of a null-terminated string of maximum length MAX_PATH that contains the path of the root drive on which the Recycle Bin is located. This parameter can contain the address of a string formatted with the drive, folder, and subfolder names, for example c:\\windows\\system. It can also contain an empty string or NULL. If this value is an empty string or NULL, all Recycle Bins on all drives will be emptied.", "possible_constants": []}, {"name": "dwFlags", "type": "DWORD", "description": "One or more of the following values.", "possible_constants": []}]}, {"name": "SHEmptyRecycleBinW", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shemptyrecyclebinw", "description": "Empties the Recycle Bin on the specified drive.", "parameters": [{"name": "hwnd", "type": "HWND", "description": "A handle to the parent window of any dialog boxes that might be displayed during the operation. This parameter can be NULL.", "possible_constants": []}, {"name": "pszRootPath", "type": "LPCTSTR", "description": "The address of a null-terminated string of maximum length MAX_PATH that contains the path of the root drive on which the Recycle Bin is located. This parameter can contain the address of a string formatted with the drive, folder, and subfolder names, for example c:\\windows\\system. It can also contain an empty string or NULL. If this value is an empty string or NULL, all Recycle Bins on all drives will be emptied.", "possible_constants": []}, {"name": "dwFlags", "type": "DWORD", "description": "One or more of the following values.", "possible_constants": []}]}, {"name": "SHEnumerateUnreadMailAccountsA", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shenumerateunreadmailaccountsa", "description": "Enumerates the user accounts that have unread email.", "parameters": [{"name": "hKeyUser", "type": "HKEY", "description": "A valid HKEY for a given user.", "possible_constants": []}, {"name": "dwIndex", "type": "DWORD", "description": "The index of the user account.", "possible_constants": []}, {"name": "pszMailAddress", "type": "LPTSTR", "description": "A pointer to a Unicode string that specifies the email address of an account belonging to the specified user.", "possible_constants": []}, {"name": "cchMailAddress", "type": "int", "description": "The number of characters in the email address.", "possible_constants": []}]}, {"name": "SHEnumerateUnreadMailAccountsW", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shenumerateunreadmailaccountsw", "description": "Enumerates the user accounts that have unread email.", "parameters": [{"name": "hKeyUser", "type": "HKEY", "description": "A valid HKEY for a given user.", "possible_constants": []}, {"name": "dwIndex", "type": "DWORD", "description": "The index of the user account.", "possible_constants": []}, {"name": "pszMailAddress", "type": "LPTSTR", "description": "A pointer to a Unicode string that specifies the email address of an account belonging to the specified user.", "possible_constants": []}, {"name": "cchMailAddress", "type": "int", "description": "The number of characters in the email address.", "possible_constants": []}]}, {"name": "SHEvaluateSystemCommandTemplate", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shevaluatesystemcommandtemplate", "description": "Enforces strict validation of parameters used in a call to CreateProcess or ShellExecute.", "parameters": [{"name": "pszCmdTemplate", "type": "PCWSTR", "description": "A command line, which may or may not include parameters. If the parameters are substitution parameters, then SHEvaluateSystemCommandTemplate should be called before parameters have been replaced.", "possible_constants": []}, {"name": "ppszApplication", "type": "PWSTR*", "description": "A pointer to the verified path to the application. This value should be passed as the lpApplication parameter in a call to CreateProcess or as the lpFile parameter in a call to ShellExecute. This resource is allocated using CoTaskMemAlloc, and it is the responsibility of the caller to free the resource when it is no longer needed by calling CoTaskMemFree.", "possible_constants": []}, {"name": "ppszCommandLine", "type": "PWSTR*", "description": "A pointer to a command-line string template to be used in a call to CreateProcess. Command-line parameters should be specified based on this template, and then passed as the lpCommandLine parameter to CreateProcess. It is guaranteed to be of a form that PathGetArgs can always read correctly. This resource is allocated using CoTaskMemAlloc, and it is the responsibility of the caller to free the resource when it is no longer needed by calling CoTaskMemFree.\nThis parameter can be NULL if this function is not being used in association with a call to CreateProcess.", "possible_constants": []}, {"name": "ppszParameters", "type": "PWSTR*", "description": "A pointer to a command-line string template to be used in a call to ShellExecute. Command-line parameters should be specified based on this template, and then passed as the lpParameters parameter to ShellExecute. This parameter is identical to calling PathGetArgs. This resource is allocated using CoTaskMemAlloc, and it is the responsibility of the caller to free the resource when it is no longer needed by calling CoTaskMemFree.\nThis parameter can be NULL if this function is not being used in association with a call to CreateProcess.", "possible_constants": []}]}, {"name": "SHFileOperationA", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shfileoperationa", "description": "Copies, moves, renames, or deletes a file system object. This function has been replaced in Windows\u00c2\u00a0Vista by IFileOperation.", "parameters": [{"name": "lpFileOp", "type": "LPSHFILEOPSTRUCT", "description": "A pointer to an SHFILEOPSTRUCT structure that contains information this function needs to carry out the specified operation. This parameter must contain a valid value that is not NULL. You are responsible for validating the value. If you do not validate it, you will experience unexpected results.", "possible_constants": []}]}, {"name": "SHFileOperationW", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shfileoperationw", "description": "Copies, moves, renames, or deletes a file system object. This function has been replaced in Windows\u00c2\u00a0Vista by IFileOperation.", "parameters": [{"name": "lpFileOp", "type": "LPSHFILEOPSTRUCT", "description": "A pointer to an SHFILEOPSTRUCT structure that contains information this function needs to carry out the specified operation. This parameter must contain a valid value that is not NULL. You are responsible for validating the value. If you do not validate it, you will experience unexpected results.", "possible_constants": []}]}, {"name": "SHFreeNameMappings", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shfreenamemappings", "description": "Frees a file name mapping object that was retrieved by the SHFileOperation function.", "parameters": [{"name": "hNameMappings", "type": "HANDLE", "description": "A handle to the file name mapping object to be freed.", "possible_constants": []}]}, {"name": "SHGetDiskFreeSpaceExA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shgetdiskfreespaceexa", "description": "Retrieves disk space information for a disk volume.", "parameters": [{"name": "pszDirectoryName", "type": "LPCTSTR", "description": "A null-terminated string that specifies the volume for which size information is retrieved. This can be a drive letter, UNC name, or the path of a folder. You cannot use NULL to represent the current drive.", "possible_constants": []}, {"name": "pulFreeBytesAvailableToCaller", "type": "ULARGE_INTEGER*", "description": "Pointer to a value that receives the number of bytes on the volume available to the calling application. If the operating system implements per-user quotas, this value may be less than the total number of free bytes on the volume.", "possible_constants": []}, {"name": "pulTotalNumberOfBytes", "type": "ULARGE_INTEGER*", "description": "Pointer to a value that receives the total size of the volume, in bytes.", "possible_constants": []}, {"name": "pulTotalNumberOfFreeBytes", "type": "ULARGE_INTEGER*", "description": "Pointer to a value that receives the number of bytes of free space on the volume.", "possible_constants": []}]}, {"name": "SHGetDiskFreeSpaceExW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shgetdiskfreespaceexw", "description": "Retrieves disk space information for a disk volume.", "parameters": [{"name": "pszDirectoryName", "type": "LPCTSTR", "description": "A null-terminated string that specifies the volume for which size information is retrieved. This can be a drive letter, UNC name, or the path of a folder. You cannot use NULL to represent the current drive.", "possible_constants": []}, {"name": "pulFreeBytesAvailableToCaller", "type": "ULARGE_INTEGER*", "description": "Pointer to a value that receives the number of bytes on the volume available to the calling application. If the operating system implements per-user quotas, this value may be less than the total number of free bytes on the volume.", "possible_constants": []}, {"name": "pulTotalNumberOfBytes", "type": "ULARGE_INTEGER*", "description": "Pointer to a value that receives the total size of the volume, in bytes.", "possible_constants": []}, {"name": "pulTotalNumberOfFreeBytes", "type": "ULARGE_INTEGER*", "description": "Pointer to a value that receives the number of bytes of free space on the volume.", "possible_constants": []}]}, {"name": "SHGetDriveMedia", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shgetdrivemedia", "description": "Returns the type of media that is in the given drive.", "parameters": [{"name": "pszDrive", "type": "PCWSTR", "description": "The drive in which to check the media type.", "possible_constants": []}, {"name": "pdwMediaContent", "type": "DWORD*", "description": "A pointer to the type of media in the given drive. A combination of ARCONTENT flags.", "possible_constants": []}]}, {"name": "SHGetFileInfoA", "return_type": "DWORD_PTR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shgetfileinfoa", "description": "Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.", "parameters": [{"name": "pszPath", "type": "LPCTSTR", "description": "A pointer to a null-terminated string of maximum length MAX_PATH that contains the path and file name. Both absolute and relative paths are valid.\nIf the uFlags parameter includes the SHGFI_PIDL flag, this parameter must be the address of an ITEMIDLIST (PIDL) structure that contains the list of item identifiers that uniquely identifies the file within the Shell's namespace. The PIDL must be a fully qualified PIDL. Relative PIDLs are not allowed.\nIf the uFlags parameter includes the SHGFI_USEFILEATTRIBUTES flag, this parameter does not have to be a valid file name. The function will proceed as if the file exists with the specified name and with the file attributes passed in the dwFileAttributes parameter. This allows you to obtain information about a file type by passing just the extension for pszPath and passing FILE_ATTRIBUTE_NORMAL in dwFileAttributes.\nThis string can use either short (the 8.3 form) or long file names.", "possible_constants": []}, {"name": "dwFileAttributes", "type": "DWORD", "description": "A combination of one or more file attribute flags (FILE_ATTRIBUTE_ values as defined in Winnt.h). If uFlags does not include the SHGFI_USEFILEATTRIBUTES flag, this parameter is ignored.", "possible_constants": []}, {"name": "psfi", "type": "SHFILEINFO*", "description": "Pointer to a SHFILEINFO structure to receive the file information.", "possible_constants": []}, {"name": "cbFileInfo", "type": "UINT", "description": "The size, in bytes, of the SHFILEINFO structure pointed to by the psfi parameter.", "possible_constants": []}, {"name": "uFlags", "type": "UINT", "description": "The flags that specify the file information to retrieve. This parameter can be a combination of the following values.", "possible_constants": []}]}, {"name": "SHGetFileInfoW", "return_type": "DWORD_PTR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shgetfileinfow", "description": "Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.", "parameters": [{"name": "pszPath", "type": "LPCTSTR", "description": "A pointer to a null-terminated string of maximum length MAX_PATH that contains the path and file name. Both absolute and relative paths are valid.\nIf the uFlags parameter includes the SHGFI_PIDL flag, this parameter must be the address of an ITEMIDLIST (PIDL) structure that contains the list of item identifiers that uniquely identifies the file within the Shell's namespace. The PIDL must be a fully qualified PIDL. Relative PIDLs are not allowed.\nIf the uFlags parameter includes the SHGFI_USEFILEATTRIBUTES flag, this parameter does not have to be a valid file name. The function will proceed as if the file exists with the specified name and with the file attributes passed in the dwFileAttributes parameter. This allows you to obtain information about a file type by passing just the extension for pszPath and passing FILE_ATTRIBUTE_NORMAL in dwFileAttributes.\nThis string can use either short (the 8.3 form) or long file names.", "possible_constants": []}, {"name": "dwFileAttributes", "type": "DWORD", "description": "A combination of one or more file attribute flags (FILE_ATTRIBUTE_ values as defined in Winnt.h). If uFlags does not include the SHGFI_USEFILEATTRIBUTES flag, this parameter is ignored.", "possible_constants": []}, {"name": "psfi", "type": "SHFILEINFO*", "description": "Pointer to a SHFILEINFO structure to receive the file information.", "possible_constants": []}, {"name": "cbFileInfo", "type": "UINT", "description": "The size, in bytes, of the SHFILEINFO structure pointed to by the psfi parameter.", "possible_constants": []}, {"name": "uFlags", "type": "UINT", "description": "The flags that specify the file information to retrieve. This parameter can be a combination of the following values.", "possible_constants": []}]}, {"name": "SHGetImageList", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shgetimagelist", "description": "Retrieves an image list.", "parameters": [{"name": "iImageList", "type": "int", "description": "The image type contained in the list. One of the following values:", "possible_constants": []}]}, {"name": "SHGetLocalizedName", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shgetlocalizedname", "description": "Retrieves the localized name of a file in a Shell folder.", "parameters": [{"name": "pszPath", "type": "PCWSTR", "description": "A pointer to a string that specifies the fully qualified path of the file.", "possible_constants": []}, {"name": "pszResModule", "type": "PWSTR", "description": "When this function returns, contains a pointer to a string resource that specifies the localized version of the file name.", "possible_constants": []}, {"name": "cch", "type": "UINT", "description": "When this function returns, contains the size of the string, in WCHARs, at pszResModule.", "possible_constants": []}, {"name": "pidsRes", "type": "int*", "description": "When this function returns, contains a pointer to the ID of the localized file name in the resource file.", "possible_constants": []}]}, {"name": "SHGetNewLinkInfoA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shgetnewlinkinfoa", "description": "Creates a name for a new shortcut based on the shortcut's proposed target. This function does not create the shortcut, just the name.", "parameters": [{"name": "pszLinkTo", "type": "LPCTSTR", "description": "A pointer to the path and file name of the shortcut's target. If uFlags does not contain the SHGNLI_PIDL value, this parameter is the address of a null-terminated string that contains the target. If uFlags contains the SHGNLI_PIDL value, this parameter is a PIDL that represents the target.", "possible_constants": []}, {"name": "pszDir", "type": "LPCTSTR", "description": "A pointer to a null-terminated string that contains the path of the folder in which the shortcut would be created.", "possible_constants": []}, {"name": "pszName", "type": "LPTSTR", "description": "A pointer to a string that receives the null-terminated path and file name for the shortcut. This buffer is assumed to be at least MAX_PATH characters in size.", "possible_constants": []}, {"name": "pfMustCopy", "type": "BOOL*", "description": "The address of a BOOL value that receives a flag indicating whether the shortcut would be copied. When a shortcut to another shortcut is created, the Shell simply copies the target shortcut and modifies that copied shortcut appropriately. This parameter receives a nonzero value if the target specified in pszLinkTo specifies a shortcut that will cause the target shortcut to be copied. This parameter receives zero if the target does not specify a shortcut that would be copied.", "possible_constants": []}, {"name": "uFlags", "type": "UINT", "description": "The options for the function. This can be zero or a combination of the following values.", "possible_constants": []}]}, {"name": "SHGetNewLinkInfoW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shgetnewlinkinfow", "description": "Creates a name for a new shortcut based on the shortcut's proposed target. This function does not create the shortcut, just the name.", "parameters": [{"name": "pszLinkTo", "type": "LPCTSTR", "description": "A pointer to the path and file name of the shortcut's target. If uFlags does not contain the SHGNLI_PIDL value, this parameter is the address of a null-terminated string that contains the target. If uFlags contains the SHGNLI_PIDL value, this parameter is a PIDL that represents the target.", "possible_constants": []}, {"name": "pszDir", "type": "LPCTSTR", "description": "A pointer to a null-terminated string that contains the path of the folder in which the shortcut would be created.", "possible_constants": []}, {"name": "pszName", "type": "LPTSTR", "description": "A pointer to a string that receives the null-terminated path and file name for the shortcut. This buffer is assumed to be at least MAX_PATH characters in size.", "possible_constants": []}, {"name": "pfMustCopy", "type": "BOOL*", "description": "The address of a BOOL value that receives a flag indicating whether the shortcut would be copied. When a shortcut to another shortcut is created, the Shell simply copies the target shortcut and modifies that copied shortcut appropriately. This parameter receives a nonzero value if the target specified in pszLinkTo specifies a shortcut that will cause the target shortcut to be copied. This parameter receives zero if the target does not specify a shortcut that would be copied.", "possible_constants": []}, {"name": "uFlags", "type": "UINT", "description": "The options for the function. This can be zero or a combination of the following values.", "possible_constants": []}]}, {"name": "SHGetPropertyStoreForWindow", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shgetpropertystoreforwindow", "description": "Retrieves an object that represents a specific window's collection of properties, which allows those properties to be queried or set.", "parameters": [{"name": "hwnd", "type": "HWND", "description": "A handle to the window whose properties are being retrieved.", "possible_constants": []}, {"name": "riid", "type": "REFIID", "description": "A reference to the IID of the property store object to retrieve through ppv. This is typically IID_IPropertyStore.", "possible_constants": []}, {"name": "ppv", "type": "void**", "description": "When this function returns, contains the interface pointer requested in riid. This is typically IPropertyStore.", "possible_constants": []}]}, {"name": "SHGetStockIconInfo", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shgetstockiconinfo", "description": "Retrieves information about system-defined Shell icons.", "parameters": [{"name": "siid", "type": "SHSTOCKICONID", "description": "One of the values from the SHSTOCKICONID enumeration that specifies which icon should be retrieved.", "possible_constants": []}, {"name": "uFlags", "type": "UINT", "description": "A combination of zero or more of the following flags that specify which information is requested.", "possible_constants": []}]}, {"name": "SHGetUnreadMailCountA", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shgetunreadmailcounta", "description": "Retrieves a specified user's unread message count for any or all email accounts.", "parameters": [{"name": "hKeyUser", "type": "HKEY", "description": "A valid HKEY for a given user. This parameter should be NULL if the function is called in a user's environment, in which case HKEY_CURRENT_USER is used. This parameter should be NULL if the function is called from the SYSTEM context, in which case HKEY_USERS\\{SID} is used.", "possible_constants": []}, {"name": "pszMailAddress", "type": "LPCTSTR", "description": "A pointer to a string in Unicode that specifies the email address of an account belonging to the specified user. When this parameter is NULL, pdwCount returns the total count of unread messages for all accounts owned by the designated user.", "possible_constants": []}, {"name": "pdwCount", "type": "DWORD*", "description": "Pointer to a DWORD value which receives the unread message count.", "possible_constants": []}, {"name": "pFileTime", "type": "FILETIME*", "description": "A pointer to a FILETIME structure.  The use of this parameter is determined by whether pszMailAddress is NULL. If pszMailAddress is NULL, then this parameter is treated as an [in] parameter, which specifies a filter, so that only unread mail newer than the specified time appears. If pszMailAddress is not NULL, then this parameter is treated as an [out] parameter, which points to a FILETIME structure into which the function places the timestamp of the last SHSetUnreadMailCount call for the specified user and email account.", "possible_constants": []}, {"name": "pszShellExecuteCommand", "type": "LPCTSTR", "description": "A pointer to a string that returns the ShellExecute command statement passed into the last SHSetUnreadMailCount call for the specified user and email account. This command string starts the email application that owns the account referenced by pszMailAddress. If the ShellExecute command is not required, this parameter can be NULL. If pszMailAddress is NULL, this parameter is ignored and must be NULL.", "possible_constants": []}, {"name": "cchShellExecuteCommand", "type": "int", "description": "The maximum size, in characters, of the ShellExecute command buffer pointed to by pszShellExecuteCommand. This parameter must be zero for total counts when pszMailAddress is NULL. It can also be NULL whenever the ShellExecute command string is not required.", "possible_constants": []}]}, {"name": "SHGetUnreadMailCountW", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shgetunreadmailcountw", "description": "Retrieves a specified user's unread message count for any or all email accounts.", "parameters": [{"name": "hKeyUser", "type": "HKEY", "description": "A valid HKEY for a given user. This parameter should be NULL if the function is called in a user's environment, in which case HKEY_CURRENT_USER is used. This parameter should be NULL if the function is called from the SYSTEM context, in which case HKEY_USERS\\{SID} is used.", "possible_constants": []}, {"name": "pszMailAddress", "type": "LPCTSTR", "description": "A pointer to a string in Unicode that specifies the email address of an account belonging to the specified user. When this parameter is NULL, pdwCount returns the total count of unread messages for all accounts owned by the designated user.", "possible_constants": []}, {"name": "pdwCount", "type": "DWORD*", "description": "Pointer to a DWORD value which receives the unread message count.", "possible_constants": []}, {"name": "pFileTime", "type": "FILETIME*", "description": "A pointer to a FILETIME structure.  The use of this parameter is determined by whether pszMailAddress is NULL. If pszMailAddress is NULL, then this parameter is treated as an [in] parameter, which specifies a filter, so that only unread mail newer than the specified time appears. If pszMailAddress is not NULL, then this parameter is treated as an [out] parameter, which points to a FILETIME structure into which the function places the timestamp of the last SHSetUnreadMailCount call for the specified user and email account.", "possible_constants": []}, {"name": "pszShellExecuteCommand", "type": "LPCTSTR", "description": "A pointer to a string that returns the ShellExecute command statement passed into the last SHSetUnreadMailCount call for the specified user and email account. This command string starts the email application that owns the account referenced by pszMailAddress. If the ShellExecute command is not required, this parameter can be NULL. If pszMailAddress is NULL, this parameter is ignored and must be NULL.", "possible_constants": []}, {"name": "cchShellExecuteCommand", "type": "int", "description": "The maximum size, in characters, of the ShellExecute command buffer pointed to by pszShellExecuteCommand. This parameter must be zero for total counts when pszMailAddress is NULL. It can also be NULL whenever the ShellExecute command string is not required.", "possible_constants": []}]}, {"name": "SHInvokePrinterCommandA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shinvokeprintercommanda", "description": "Executes a command on a printer object.", "parameters": [{"name": "hwnd", "type": "HWND", "description": "The handle of the parent window of any windows or dialog boxes that are created during the operation.", "possible_constants": []}, {"name": "uAction", "type": "UINT", "description": "The type of printer operation to perform. One of the following values:", "possible_constants": []}]}, {"name": "SHInvokePrinterCommandW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shinvokeprintercommandw", "description": "Executes a command on a printer object.", "parameters": [{"name": "hwnd", "type": "HWND", "description": "The handle of the parent window of any windows or dialog boxes that are created during the operation.", "possible_constants": []}, {"name": "uAction", "type": "UINT", "description": "The type of printer operation to perform. One of the following values:", "possible_constants": []}]}, {"name": "SHIsFileAvailableOffline", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shisfileavailableoffline", "description": "Determines whether a file or folder is available for offline use. This function also determines whether the file would be opened from the network, from the local Offline Files cache, or from both locations.", "parameters": [{"name": "pwszPath", "type": "PCWSTR", "description": "A pointer to a string value that specifies the full path to a network file or directory. This path does not need to be in UNC form. If pszPath is not a network path, the function returns E_INVALIDARG.", "possible_constants": []}, {"name": "pdwStatus", "type": "LPDWORD", "description": "A pointer to a variable of type DWORD that receives one or more of the following flags if the function succeeds.", "possible_constants": []}]}, {"name": "SHLoadNonloadedIconOverlayIdentifiers", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shloadnonloadediconoverlayidentifiers", "description": "Signals the Shell that during the next operation requiring overlay information, it should load icon overlay identifiers that either failed creation or were not present for creation at startup. Identifiers that have already been loaded are not affected.", "parameters": []}, {"name": "SHQueryRecycleBinA", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shqueryrecyclebina", "description": "Retrieves the size of the Recycle Bin and the number of items in it, for a specified drive.", "parameters": [{"name": "pszRootPath", "type": "LPCTSTR", "description": "The address of a null-terminated string of maximum length MAX_PATH to contain the path of the root drive on which the Recycle Bin is located. This parameter can contain the address of a string formatted with the drive, folder, and subfolder names (C:\\Windows\\System...).", "possible_constants": []}, {"name": "pSHQueryRBInfo", "type": "LPSHQUERYRBINFO", "description": "The address of a SHQUERYRBINFO structure that receives the Recycle Bin information. The cbSize member of the structure must be set to the size of the structure before calling this API.", "possible_constants": []}]}, {"name": "SHQueryRecycleBinW", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shqueryrecyclebinw", "description": "Retrieves the size of the Recycle Bin and the number of items in it, for a specified drive.", "parameters": [{"name": "pszRootPath", "type": "LPCTSTR", "description": "The address of a null-terminated string of maximum length MAX_PATH to contain the path of the root drive on which the Recycle Bin is located. This parameter can contain the address of a string formatted with the drive, folder, and subfolder names (C:\\Windows\\System...).", "possible_constants": []}, {"name": "pSHQueryRBInfo", "type": "LPSHQUERYRBINFO", "description": "The address of a SHQUERYRBINFO structure that receives the Recycle Bin information. The cbSize member of the structure must be set to the size of the structure before calling this API.", "possible_constants": []}]}, {"name": "SHQueryUserNotificationState", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shqueryusernotificationstate", "description": "Checks the state of the computer for the current user to determine whether sending a notification is appropriate.", "parameters": [{"name": "pquns", "type": "QUERY_USER_NOTIFICATION_STATE*", "description": "When this function returns, contains a pointer to one of the values of the QUERY_USER_NOTIFICATION_STATE enumeration.", "possible_constants": []}]}, {"name": "SHRemoveLocalizedName", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shremovelocalizedname", "description": "Removes the localized name of a file in a Shell folder.", "parameters": [{"name": "pszPath", "type": "PCWSTR", "description": "A pointer to a null-terminated, Unicode string that specifies the fully qualified path of the target file.", "possible_constants": []}]}, {"name": "SHSetLocalizedName", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shsetlocalizedname", "description": "Sets the localized name of a file in a Shell folder.", "parameters": [{"name": "pszPath", "type": "PCWSTR", "description": "A pointer to a string that specifies the fully qualified path of the target file.", "possible_constants": []}, {"name": "pszResModule", "type": "PCWSTR", "description": "A pointer to a string resource that specifies the localized version of the file name.", "possible_constants": []}, {"name": "idsRes", "type": "int", "description": "An integer ID that specifies the localized file name in the string resource.", "possible_constants": []}]}, {"name": "SHSetUnreadMailCountA", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shsetunreadmailcounta", "description": "Stores the current user's unread message count for a specified email account in the registry.", "parameters": [{"name": "pszMailAddress", "type": "LPCTSTR", "description": "A pointer to a string in Unicode that contains the current user's full email address.", "possible_constants": []}, {"name": "dwCount", "type": "DWORD", "description": "The number of unread messages.", "possible_constants": []}, {"name": "pszShellExecuteCommand", "type": "LPCTSTR", "description": "A pointer to a string in Unicode that contains the full text of a command that can be passed to ShellExecute. This command should start the email application that owns the account referenced by pszMailAddress.", "possible_constants": []}]}, {"name": "SHSetUnreadMailCountW", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shsetunreadmailcountw", "description": "Stores the current user's unread message count for a specified email account in the registry.", "parameters": [{"name": "pszMailAddress", "type": "LPCTSTR", "description": "A pointer to a string in Unicode that contains the current user's full email address.", "possible_constants": []}, {"name": "dwCount", "type": "DWORD", "description": "The number of unread messages.", "possible_constants": []}, {"name": "pszShellExecuteCommand", "type": "LPCTSTR", "description": "A pointer to a string in Unicode that contains the full text of a command that can be passed to ShellExecute. This command should start the email application that owns the account referenced by pszMailAddress.", "possible_constants": []}]}, {"name": "SHTestTokenMembership", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shtesttokenmembership", "description": "Uses CheckTokenMembership to test whether the given token is a member of the local group with the specified RID.", "parameters": [{"name": "hToken", "type": "HANDLE", "description": "A handle to the token. This value can be NULL.", "possible_constants": []}, {"name": "ulRID", "type": "ULONG", "description": "The RID of the local group for which membership is tested.", "possible_constants": []}]}, {"name": "ActivateKeyboardLayout", "return_type": "HKL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-activatekeyboardlayout", "description": "Sets the input locale identifier (formerly called the keyboard layout handle) for the calling thread or the current process. The input locale identifier specifies a locale as well as the physical layout of the keyboard.", "parameters": [{"name": "hkl", "type": "HKL", "description": "Input locale identifier to be activated.\nThe input locale identifier must have been loaded by a previous call to the LoadKeyboardLayout function. This parameter must be either the handle to a keyboard layout or one of the following values.", "possible_constants": [["HKL_NEXT", -1], ["HKL_PREV", -1]]}, {"name": "Flags", "type": "UINT", "description": "Specifies how the input locale identifier is to be activated. This parameter can be one of the following values.", "possible_constants": [["KLF_REORDER", 8], ["KLF_RESET", 1073741824], ["KLF_SETFORPROCESS", 256], ["KLF_SHIFTLOCK", 65536], ["KLF_UNLOADPREVIOUS", -1]]}]}, {"name": "AddClipboardFormatListener", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-addclipboardformatlistener", "description": "Places the given window in the system-maintained clipboard format listener list.", "parameters": [{"name": "hwnd", "type": "HWND", "description": "A handle to the window to be placed in the clipboard format listener list.", "possible_constants": []}]}, {"name": "AdjustWindowRect", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-adjustwindowrect", "description": "Calculates the required size of the window rectangle, based on the desired client-rectangle size. The window rectangle can then be passed to the CreateWindow function to create a window whose client area is the desired size.", "parameters": [{"name": "lpRect", "type": "LPRECT", "description": "A pointer to a RECT structure that contains the coordinates of the top-left and bottom-right corners of the desired client area. When the function returns, the structure contains the coordinates of the top-left and bottom-right corners of the window to accommodate the desired client area.", "possible_constants": []}, {"name": "dwStyle", "type": "DWORD", "description": "The window style of the window whose required size is to be calculated. Note that you cannot specify the WS_OVERLAPPED style.", "possible_constants": []}, {"name": "bMenu", "type": "BOOL", "description": "Indicates whether the window has a menu.", "possible_constants": []}]}, {"name": "AdjustWindowRectEx", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-adjustwindowrectex", "description": "Calculates the required size of the window rectangle, based on the desired size of the client rectangle. The window rectangle can then be passed to the CreateWindowEx function to create a window whose client area is the desired size.", "parameters": [{"name": "lpRect", "type": "LPRECT", "description": "A pointer to a RECT structure that contains the coordinates of the top-left and bottom-right corners of the desired client area. When the function returns, the structure contains the coordinates of the top-left and bottom-right corners of the window to accommodate the desired client area.", "possible_constants": []}, {"name": "dwStyle", "type": "DWORD", "description": "The window style of the window whose required size is to be calculated. Note that you cannot specify the WS_OVERLAPPED style.", "possible_constants": []}, {"name": "bMenu", "type": "BOOL", "description": "Indicates whether the window has a menu.", "possible_constants": []}, {"name": "dwExStyle", "type": "DWORD", "description": "The extended window style of the window whose required size is to be calculated.", "possible_constants": []}]}, {"name": "AdjustWindowRectExForDpi", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-adjustwindowrectexfordpi", "description": "Calculates the required size of the window rectangle, based on the desired size of the client rectangle and the provided DPI. This window rectangle can then be passed to the CreateWindowEx function to create a window with a client area of the desired size.", "parameters": [{"name": "lpRect", "type": "", "description": "A pointer to a RECT structure that contains the coordinates of the top-left and bottom-right corners of the desired client area. When the function returns, the structure contains the coordinates of the top-left and bottom-right corners of the window to accommodate the desired client area.", "possible_constants": []}, {"name": "dwStyle", "type": "", "description": "The Window Style of the window whose required size is to be calculated. Note that you cannot specify the WS_OVERLAPPED style.", "possible_constants": []}, {"name": "bMenu", "type": "", "description": "Indicates whether the window has a menu.", "possible_constants": []}, {"name": "dwExStyle", "type": "", "description": "The Extended Window Style of the window whose required size is to be calculated.", "possible_constants": []}, {"name": "dpi", "type": "", "description": "The DPI to use for scaling.", "possible_constants": []}]}, {"name": "AllowSetForegroundWindow", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-allowsetforegroundwindow", "description": "Enables the specified process to set the foreground window using the SetForegroundWindow function. The calling process must already be able to set the foreground window. For more information, see Remarks later in this topic.", "parameters": [{"name": "dwProcessId", "type": "DWORD", "description": "The identifier of the process that will be enabled to set the foreground window. If this parameter is ASFW_ANY, all processes will be enabled to set the foreground window.", "possible_constants": []}]}, {"name": "AnimateWindow", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-animatewindow", "description": "Enables you to produce special effects when showing or hiding windows. There are four types of animation: roll, slide, collapse or expand, and alpha-blended fade.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window to animate. The calling thread must own this window.", "possible_constants": []}, {"name": "dwTime", "type": "DWORD", "description": "The time it takes to play the animation, in milliseconds. Typically, an animation takes 200 milliseconds to play.", "possible_constants": []}, {"name": "dwFlags", "type": "DWORD", "description": "The type of animation. This parameter can be one or more of the following values. Note that, by default, these flags take effect when showing a window. To take effect when hiding a window, use AW_HIDE and a logical OR operator with the appropriate flags.", "possible_constants": [["AW_ACTIVATE", 131072], ["AW_BLEND", 524288], ["AW_CENTER", 16], ["AW_HIDE", 65536], ["AW_HOR_POSITIVE", 1], ["AW_HOR_NEGATIVE", 2], ["AW_SLIDE", 262144], ["AW_VER_POSITIVE", 4], ["AW_VER_NEGATIVE", 8]]}]}, {"name": "AnyPopup", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-anypopup", "description": "Indicates whether an owned, visible, top-level pop-up, or overlapped window exists on the screen. The function searches the entire screen, not just the calling application's client area.", "parameters": []}, {"name": "AppendMenuA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-appendmenua", "description": "Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. You can use this function to specify the content, appearance, and behavior of the menu item.", "parameters": [{"name": "hMenu", "type": "HMENU", "description": "A handle to the menu bar, drop-down menu, submenu, or shortcut menu to be changed.", "possible_constants": []}, {"name": "uFlags", "type": "UINT", "description": "Controls the appearance and behavior of the new menu item. This parameter can be a combination of the following values.", "possible_constants": [["MF_BITMAP", 4], ["MF_CHECKED", 8], ["MF_DISABLED", 2], ["MF_ENABLED", 0], ["MF_GRAYED", 1], ["MF_MENUBARBREAK", 32], ["MF_MENUBREAK", 64], ["MF_OWNERDRAW", 256], ["MF_POPUP", 16], ["MF_SEPARATOR", 2048], ["MF_STRING", 0], ["MF_UNCHECKED", 0]]}, {"name": "uIDNewItem", "type": "UINT_PTR", "description": "The identifier of the new menu item or, if the uFlags parameter is set to MF_POPUP, a handle to the drop-down menu or submenu.", "possible_constants": []}, {"name": "lpNewItem", "type": "LPCTSTR", "description": "The content of the new menu item. The interpretation of lpNewItem depends on whether the uFlags parameter includes the following values.", "possible_constants": [["MF_BITMAP", 4], ["MF_OWNERDRAW", 256], ["MF_STRING", 0]]}]}, {"name": "AppendMenuW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-appendmenuw", "description": "Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. You can use this function to specify the content, appearance, and behavior of the menu item.", "parameters": [{"name": "hMenu", "type": "HMENU", "description": "A handle to the menu bar, drop-down menu, submenu, or shortcut menu to be changed.", "possible_constants": []}, {"name": "uFlags", "type": "UINT", "description": "Controls the appearance and behavior of the new menu item. This parameter can be a combination of the following values.", "possible_constants": [["MF_BITMAP", 4], ["MF_CHECKED", 8], ["MF_DISABLED", 2], ["MF_ENABLED", 0], ["MF_GRAYED", 1], ["MF_MENUBARBREAK", 32], ["MF_MENUBREAK", 64], ["MF_OWNERDRAW", 256], ["MF_POPUP", 16], ["MF_SEPARATOR", 2048], ["MF_STRING", 0], ["MF_UNCHECKED", 0]]}, {"name": "uIDNewItem", "type": "UINT_PTR", "description": "The identifier of the new menu item or, if the uFlags parameter is set to MF_POPUP, a handle to the drop-down menu or submenu.", "possible_constants": []}, {"name": "lpNewItem", "type": "LPCTSTR", "description": "The content of the new menu item. The interpretation of lpNewItem depends on whether the uFlags parameter includes the following values.", "possible_constants": [["MF_BITMAP", 4], ["MF_OWNERDRAW", 256], ["MF_STRING", 0]]}]}, {"name": "AreDpiAwarenessContextsEqual", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-aredpiawarenesscontextsequal", "description": "Determines whether two DPI_AWARENESS_CONTEXT values are identical.", "parameters": [{"name": "dpiContextA", "type": "", "description": "The first value to compare.", "possible_constants": []}, {"name": "dpiContextB", "type": "", "description": "The second value to compare.", "possible_constants": []}]}, {"name": "ArrangeIconicWindows", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-arrangeiconicwindows", "description": "Arranges all the minimized (iconic) child windows of the specified parent window.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the parent window.", "possible_constants": []}]}, {"name": "AttachThreadInput", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-attachthreadinput", "description": "Attaches or detaches the input processing mechanism of one thread to that of another thread.", "parameters": [{"name": "idAttach", "type": "", "description": "The identifier of the thread to be attached to another thread. The thread to be attached cannot be a system thread.", "possible_constants": []}, {"name": "idAttachTo", "type": "", "description": "The identifier of the thread to which idAttach will be attached. This thread cannot be a system thread.\nA thread cannot attach to itself. Therefore, idAttachTo cannot equal idAttach.", "possible_constants": []}, {"name": "fAttach", "type": "", "description": "If this parameter is TRUE, the two threads are attached. If the parameter is FALSE, the threads are detached.", "possible_constants": []}]}, {"name": "BeginDeferWindowPos", "return_type": "HDWP", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-begindeferwindowpos", "description": "Allocates memory for a multiple-window- position structure and returns the handle to the structure.", "parameters": [{"name": "nNumWindows", "type": "int", "description": "The initial number of windows for which to store position information. The DeferWindowPos function increases the size of the structure, if necessary.", "possible_constants": []}]}, {"name": "BeginPaint", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-beginpaint", "description": "The BeginPaint function prepares the specified window for painting and fills a PAINTSTRUCT structure with information about the painting.", "parameters": [{"name": "hWnd", "type": "", "description": "Handle to the window to be repainted.", "possible_constants": []}, {"name": "lpPaint", "type": "", "description": "Pointer to the PAINTSTRUCT structure that will receive painting information.", "possible_constants": []}]}, {"name": "BlockInput", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-blockinput", "description": "Blocks keyboard and mouse input events from reaching applications.", "parameters": [{"name": "fBlockIt", "type": "BOOL", "description": "The function's purpose. If this parameter is TRUE, keyboard and mouse input events are blocked. If this parameter is FALSE, keyboard and mouse events are unblocked. Note that only the thread that blocked input can successfully unblock input.", "possible_constants": []}]}, {"name": "BringWindowToTop", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-bringwindowtotop", "description": "Brings the specified window to the top of the Z order. If the window is a top-level window, it is activated. If the window is a child window, the top-level parent window associated with the child window is activated.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window to bring to the top of the Z order.", "possible_constants": []}]}, {"name": "BroadcastSystemMessage", "return_type": "long", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-broadcastsystemmessage", "description": "Sends a message to the specified recipients. The recipients can be applications, installable drivers, network drivers, system-level device drivers, or any combination of these system components.", "parameters": [{"name": "flags", "type": "DWORD", "description": "The broadcast option. This parameter can be one or more of the following values.", "possible_constants": [["BSF_ALLOWSFW", 128], ["BSF_FLUSHDISK", 4], ["BSF_FORCEIFHUNG", 32], ["BSF_IGNORECURRENTTASK", 2], ["BSF_NOHANG", 8], ["BSF_NOTIMEOUTIFNOTHUNG", 64], ["BSF_POSTMESSAGE", 16], ["BSF_QUERY", 1], ["BSF_SENDNOTIFYMESSAGE", 256]]}, {"name": "lpInfo", "type": "LPDWORD", "description": "A pointer to a variable that contains and receives information about the recipients of the message.\nWhen the function returns, this variable receives a combination of these values identifying which recipients actually received the message.\nIf this parameter is NULL, the function broadcasts to all components.\nThis parameter can be one or more of the following values.", "possible_constants": [["BSM_ALLCOMPONENTS", 0], ["BSM_ALLDESKTOPS", 16], ["BSM_APPLICATIONS", 8]]}, {"name": "Msg", "type": "UINT", "description": "The message to be sent.\nFor lists of the system-provided messages, see System-Defined Messages.", "possible_constants": []}, {"name": "wParam", "type": "WPARAM", "description": "Additional message-specific information.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "Additional message-specific information.", "possible_constants": []}]}, {"name": "BroadcastSystemMessageA", "return_type": "long", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-broadcastsystemmessagea", "description": "Sends a message to the specified recipients. The recipients can be applications, installable drivers, network drivers, system-level device drivers, or any combination of these system components.", "parameters": [{"name": "flags", "type": "DWORD", "description": "The broadcast option. This parameter can be one or more of the following values.", "possible_constants": [["BSF_ALLOWSFW", 128], ["BSF_FLUSHDISK", 4], ["BSF_FORCEIFHUNG", 32], ["BSF_IGNORECURRENTTASK", 2], ["BSF_NOHANG", 8], ["BSF_NOTIMEOUTIFNOTHUNG", 64], ["BSF_POSTMESSAGE", 16], ["BSF_QUERY", 1], ["BSF_SENDNOTIFYMESSAGE", 256]]}, {"name": "lpInfo", "type": "LPDWORD", "description": "A pointer to a variable that contains and receives information about the recipients of the message.\nWhen the function returns, this variable receives a combination of these values identifying which recipients actually received the message.\nIf this parameter is NULL, the function broadcasts to all components.\nThis parameter can be one or more of the following values.", "possible_constants": [["BSM_ALLCOMPONENTS", 0], ["BSM_ALLDESKTOPS", 16], ["BSM_APPLICATIONS", 8]]}, {"name": "Msg", "type": "UINT", "description": "The message to be sent.\nFor lists of the system-provided messages, see System-Defined Messages.", "possible_constants": []}, {"name": "wParam", "type": "WPARAM", "description": "Additional message-specific information.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "Additional message-specific information.", "possible_constants": []}]}, {"name": "BroadcastSystemMessageExA", "return_type": "long", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-broadcastsystemmessageexa", "description": "Sends a message to the specified recipients. The recipients can be applications, installable drivers, network drivers, system-level device drivers, or any combination of these system components.", "parameters": [{"name": "flags", "type": "DWORD", "description": "The broadcast option. This parameter can be one or more of the following values.", "possible_constants": [["BSF_ALLOWSFW", 128], ["BSF_FLUSHDISK", 4], ["BSF_FORCEIFHUNG", 32], ["BSF_IGNORECURRENTTASK", 2], ["BSF_LUID", 1024], ["BSF_NOHANG", 8], ["BSF_NOTIMEOUTIFNOTHUNG", 64], ["BSF_POSTMESSAGE", 16], ["BSF_RETURNHDESK", 512], ["BSF_QUERY", 1], ["BSF_SENDNOTIFYMESSAGE", 256]]}, {"name": "lpInfo", "type": "LPDWORD", "description": "A pointer to a variable that contains and receives information about the recipients of the message.\nWhen the function returns, this variable receives a combination of these values identifying which recipients actually received the message.\nIf this parameter is NULL, the function broadcasts to all components.\nThis parameter can be one or more of the following values.", "possible_constants": [["BSM_ALLCOMPONENTS", 0], ["BSM_ALLDESKTOPS", 16], ["BSM_APPLICATIONS", 8]]}, {"name": "Msg", "type": "UINT", "description": "The message to be sent.\nFor lists of the system-provided messages, see System-Defined Messages.", "possible_constants": []}, {"name": "wParam", "type": "WPARAM", "description": "Additional message-specific information.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "Additional message-specific information.", "possible_constants": []}, {"name": "pbsmInfo", "type": "PBSMINFO", "description": "A pointer to a BSMINFO structure that contains additional information if the request is denied and dwFlags is set to BSF_QUERY.", "possible_constants": []}]}, {"name": "BroadcastSystemMessageExW", "return_type": "long", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-broadcastsystemmessageexw", "description": "Sends a message to the specified recipients. The recipients can be applications, installable drivers, network drivers, system-level device drivers, or any combination of these system components.", "parameters": [{"name": "flags", "type": "DWORD", "description": "The broadcast option. This parameter can be one or more of the following values.", "possible_constants": [["BSF_ALLOWSFW", 128], ["BSF_FLUSHDISK", 4], ["BSF_FORCEIFHUNG", 32], ["BSF_IGNORECURRENTTASK", 2], ["BSF_LUID", 1024], ["BSF_NOHANG", 8], ["BSF_NOTIMEOUTIFNOTHUNG", 64], ["BSF_POSTMESSAGE", 16], ["BSF_RETURNHDESK", 512], ["BSF_QUERY", 1], ["BSF_SENDNOTIFYMESSAGE", 256]]}, {"name": "lpInfo", "type": "LPDWORD", "description": "A pointer to a variable that contains and receives information about the recipients of the message.\nWhen the function returns, this variable receives a combination of these values identifying which recipients actually received the message.\nIf this parameter is NULL, the function broadcasts to all components.\nThis parameter can be one or more of the following values.", "possible_constants": [["BSM_ALLCOMPONENTS", 0], ["BSM_ALLDESKTOPS", 16], ["BSM_APPLICATIONS", 8]]}, {"name": "Msg", "type": "UINT", "description": "The message to be sent.\nFor lists of the system-provided messages, see System-Defined Messages.", "possible_constants": []}, {"name": "wParam", "type": "WPARAM", "description": "Additional message-specific information.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "Additional message-specific information.", "possible_constants": []}, {"name": "pbsmInfo", "type": "PBSMINFO", "description": "A pointer to a BSMINFO structure that contains additional information if the request is denied and dwFlags is set to BSF_QUERY.", "possible_constants": []}]}, {"name": "BroadcastSystemMessageW", "return_type": "long", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-broadcastsystemmessagew", "description": "Sends a message to the specified recipients. The recipients can be applications, installable drivers, network drivers, system-level device drivers, or any combination of these system components.", "parameters": [{"name": "flags", "type": "DWORD", "description": "The broadcast option. This parameter can be one or more of the following values.", "possible_constants": [["BSF_ALLOWSFW", 128], ["BSF_FLUSHDISK", 4], ["BSF_FORCEIFHUNG", 32], ["BSF_IGNORECURRENTTASK", 2], ["BSF_NOHANG", 8], ["BSF_NOTIMEOUTIFNOTHUNG", 64], ["BSF_POSTMESSAGE", 16], ["BSF_QUERY", 1], ["BSF_SENDNOTIFYMESSAGE", 256]]}, {"name": "lpInfo", "type": "LPDWORD", "description": "A pointer to a variable that contains and receives information about the recipients of the message.\nWhen the function returns, this variable receives a combination of these values identifying which recipients actually received the message.\nIf this parameter is NULL, the function broadcasts to all components.\nThis parameter can be one or more of the following values.", "possible_constants": [["BSM_ALLCOMPONENTS", 0], ["BSM_ALLDESKTOPS", 16], ["BSM_APPLICATIONS", 8]]}, {"name": "Msg", "type": "UINT", "description": "The message to be sent.\nFor lists of the system-provided messages, see System-Defined Messages.", "possible_constants": []}, {"name": "wParam", "type": "WPARAM", "description": "Additional message-specific information.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "Additional message-specific information.", "possible_constants": []}]}, {"name": "CalculatePopupWindowPosition", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-calculatepopupwindowposition", "description": "Calculates an appropriate pop-up window position using the specified anchor point, pop-up window size, flags, and the optional exclude rectangle. When the specified pop-up window size is smaller than the desktop window size, use the CalculatePopupWindowPosition function to ensure that the pop-up window is fully visible on the desktop window, regardless of the specified anchor point.", "parameters": [{"name": "anchorPoint", "type": "const POINT*", "description": "The specified anchor point.", "possible_constants": []}, {"name": "windowSize", "type": "const SIZE*", "description": "The specified window size.", "possible_constants": []}, {"name": "flags", "type": "UINT", "description": "Use one of the following flags to specify how the function positions the pop-up window horizontally and vertically. The flags are the same as the vertical and horizontal positioning flags of the TrackPopupMenuEx function.\nUse one of the following flags to specify how the function positions the pop-up window horizontally.\nUses one of the following flags to specify how the function positions the pop-up window vertically.\nUse one of the following flags to specify whether to accommodate horizontal or vertical alignment.\nThe following flag\nis available starting with Windows 7.", "possible_constants": [["TPM_CENTERALIGN", 4], ["TPM_LEFTALIGN", 0], ["TPM_RIGHTALIGN", 8], ["TPM_BOTTOMALIGN", 32], ["TPM_TOPALIGN", 0], ["TPM_VCENTERALIGN", 16], ["TPM_HORIZONTAL", 0], ["TPM_VERTICAL", 64], ["TPM_WORKAREA", 65536]]}, {"name": "excludeRect", "type": "RECT*", "description": "A pointer to a structure that specifies the exclude rectangle.\nIt can be NULL.", "possible_constants": []}, {"name": "popupWindowPosition", "type": "RECT*", "description": "A pointer to a structure that specifies the pop-up window position.", "possible_constants": []}]}, {"name": "CallMsgFilterA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-callmsgfiltera", "description": "Passes the specified message and hook code to the hook procedures associated with the WH_SYSMSGFILTER and WH_MSGFILTER hooks. A WH_SYSMSGFILTER or WH_MSGFILTER hook procedure is an application-defined callback function that examines and, optionally, modifies messages for a dialog box, message box, menu, or scroll bar.", "parameters": [{"name": "lpMsg", "type": "LPMSG", "description": "A pointer to an MSG structure that contains the message to be passed to the hook procedures.", "possible_constants": []}, {"name": "nCode", "type": "int", "description": "An application-defined code used by the hook procedure to determine how to process the message. The code must not have the same value as system-defined hook codes (MSGF_ and HC_) associated with the WH_SYSMSGFILTER and WH_MSGFILTER hooks.", "possible_constants": []}]}, {"name": "CallMsgFilterW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-callmsgfilterw", "description": "Passes the specified message and hook code to the hook procedures associated with the WH_SYSMSGFILTER and WH_MSGFILTER hooks. A WH_SYSMSGFILTER or WH_MSGFILTER hook procedure is an application-defined callback function that examines and, optionally, modifies messages for a dialog box, message box, menu, or scroll bar.", "parameters": [{"name": "lpMsg", "type": "LPMSG", "description": "A pointer to an MSG structure that contains the message to be passed to the hook procedures.", "possible_constants": []}, {"name": "nCode", "type": "int", "description": "An application-defined code used by the hook procedure to determine how to process the message. The code must not have the same value as system-defined hook codes (MSGF_ and HC_) associated with the WH_SYSMSGFILTER and WH_MSGFILTER hooks.", "possible_constants": []}]}, {"name": "CallNextHookEx", "return_type": "LRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-callnexthookex", "description": "Passes the hook information to the next hook procedure in the current hook chain. A hook procedure can call this function either before or after processing the hook information.", "parameters": [{"name": "hhk", "type": "HHOOK", "description": "This parameter is ignored.", "possible_constants": []}, {"name": "nCode", "type": "int", "description": "The hook code passed to the current hook procedure. The next hook procedure uses this code to determine how to process the hook information.", "possible_constants": []}, {"name": "wParam", "type": "WPARAM", "description": "The wParam value passed to the current hook procedure. The meaning of this parameter depends on the type of hook associated with the current hook chain.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "The lParam value passed to the current hook procedure. The meaning of this parameter depends on the type of hook associated with the current hook chain.", "possible_constants": []}]}, {"name": "CallWindowProcA", "return_type": "LRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-callwindowproca", "description": "Passes message information to the specified window procedure.", "parameters": [{"name": "lpPrevWndFunc", "type": "WNDPROC", "description": "The previous window procedure. If this value is obtained by calling the GetWindowLong function with the nIndex parameter set to GWL_WNDPROC or DWL_DLGPROC, it is actually either the address of a window or dialog box procedure, or a special internal value meaningful only to CallWindowProc.", "possible_constants": []}, {"name": "hWnd", "type": "HWND", "description": "A handle to the window procedure to receive the message.", "possible_constants": []}, {"name": "Msg", "type": "UINT", "description": "The message.", "possible_constants": []}, {"name": "wParam", "type": "WPARAM", "description": "Additional message-specific information. The contents of this parameter depend on the value of the Msg parameter.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "Additional message-specific information. The contents of this parameter depend on the value of the Msg parameter.", "possible_constants": []}]}, {"name": "CallWindowProcW", "return_type": "LRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-callwindowprocw", "description": "Passes message information to the specified window procedure.", "parameters": [{"name": "lpPrevWndFunc", "type": "WNDPROC", "description": "The previous window procedure. If this value is obtained by calling the GetWindowLong function with the nIndex parameter set to GWL_WNDPROC or DWL_DLGPROC, it is actually either the address of a window or dialog box procedure, or a special internal value meaningful only to CallWindowProc.", "possible_constants": []}, {"name": "hWnd", "type": "HWND", "description": "A handle to the window procedure to receive the message.", "possible_constants": []}, {"name": "Msg", "type": "UINT", "description": "The message.", "possible_constants": []}, {"name": "wParam", "type": "WPARAM", "description": "Additional message-specific information. The contents of this parameter depend on the value of the Msg parameter.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "Additional message-specific information. The contents of this parameter depend on the value of the Msg parameter.", "possible_constants": []}]}, {"name": "CascadeWindows", "return_type": "WORD", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-cascadewindows", "description": "Cascades the specified child windows of the specified parent window.", "parameters": [{"name": "hwndParent", "type": "HWND", "description": "A handle to the parent window. If this parameter is NULL, the desktop window is assumed.", "possible_constants": []}, {"name": "wHow", "type": "UINT", "description": "A cascade flag. This parameter can be one or more of the following values.", "possible_constants": [["MDITILE_SKIPDISABLED", 2], ["MDITILE_ZORDER", 4]]}, {"name": "lpRect", "type": "const RECT*", "description": "A pointer to a structure that specifies the rectangular area, in client coordinates, within which the windows are arranged. This parameter can be NULL, in which case the client area of the parent window is used.", "possible_constants": []}, {"name": "cKids", "type": "UINT", "description": "The number of elements in the array specified by the\nlpKids parameter. This parameter is ignored if lpKids is NULL.", "possible_constants": []}, {"name": "lpKids", "type": "const HWND*", "description": "An array of handles to the child windows to arrange. If a specified child window is a top-level window with the style WS_EX_TOPMOST or WS_EX_TOOLWINDOW, the child window is not arranged. If this parameter is NULL, all child windows of the specified parent window (or of the desktop window) are arranged.", "possible_constants": []}]}, {"name": "ChangeClipboardChain", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-changeclipboardchain", "description": "Removes a specified window from the chain of clipboard viewers.", "parameters": [{"name": "hWndRemove", "type": "HWND", "description": "A handle to the window to be removed from the chain. The handle must have been passed to the SetClipboardViewer function.", "possible_constants": []}, {"name": "hWndNewNext", "type": "HWND", "description": "A handle to the window that follows the\nhWndRemove window in the clipboard viewer chain. (This is the handle returned by SetClipboardViewer, unless the sequence was changed in response to a WM_CHANGECBCHAIN message.)", "possible_constants": []}]}, {"name": "ChangeDisplaySettingsA", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-changedisplaysettingsa", "description": "The ChangeDisplaySettings function changes the settings of the default display device to the specified graphics mode.", "parameters": [{"name": "lpDevMode", "type": "", "description": "A pointer to a DEVMODE structure that describes the new graphics mode. If lpDevMode is NULL, all the values currently in the registry will be used for the display setting. Passing NULL for the lpDevMode parameter and 0 for the dwFlags parameter is the easiest way to return to the default mode after a dynamic mode change.\nThe dmSize member of DEVMODE must be initialized to the size, in bytes, of the DEVMODE structure. The dmDriverExtra member of DEVMODE must be initialized to indicate the number of bytes of private driver data following the DEVMODE structure. In addition, you can use any or all of the following members of the DEVMODE structure.\nIn addition to using one or more of the preceding DEVMODE members, you must also set one or more of the following values in the dmFields member to change the display setting.", "possible_constants": [["DM_BITSPERPEL", -1], ["DM_PELSWIDTH", -1], ["DM_PELSHEIGHT", -1], ["DM_DISPLAYFLAGS", -1], ["DM_DISPLAYFREQUENCY", -1], ["DM_POSITION", -1]]}, {"name": "dwFlags", "type": "", "description": "Indicates how the graphics mode should be changed. This parameter can be one of the following values.\nSpecifying CDS_TEST allows an application to determine which graphics modes are actually valid, without causing the system to change to that graphics mode.\nIf CDS_UPDATEREGISTRY is specified and it is possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_SUCCESSFUL is returned. If it is not possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_RESTART is returned.\nIf CDS_UPDATEREGISTRY is specified and the information could not be stored in the registry, the graphics mode is not changed and DISP_CHANGE_NOTUPDATED is returned.", "possible_constants": [["0", -1], ["CDS_FULLSCREEN", -1], ["CDS_GLOBAL", -1], ["CDS_NORESET", -1], ["CDS_RESET", -1], ["CDS_SET_PRIMARY", -1], ["CDS_TEST", -1], ["CDS_UPDATEREGISTRY", -1]]}]}, {"name": "ChangeDisplaySettingsExA", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-changedisplaysettingsexa", "description": "The ChangeDisplaySettingsEx function changes the settings of the specified display device to the specified graphics mode.", "parameters": [{"name": "lpszDeviceName", "type": "", "description": "A pointer to a null-terminated string that specifies the display device whose graphics mode will change. Only display device names as returned by EnumDisplayDevices are valid. See EnumDisplayDevices for further information on the names associated with these display devices.\nThe lpszDeviceName parameter can be NULL. A NULL value specifies the default display device. The default device can be determined by calling EnumDisplayDevices and checking for the DISPLAY_DEVICE_PRIMARY_DEVICE flag.", "possible_constants": []}, {"name": "lpDevMode", "type": "", "description": "A pointer to a DEVMODE structure that describes the new graphics mode. If lpDevMode is NULL, all the values currently in the registry will be used for the display setting. Passing NULL for the lpDevMode parameter and 0 for the dwFlags parameter is the easiest way to return to the default mode after a dynamic mode change.\nThe dmSize member must be initialized to the size, in bytes, of the DEVMODE structure. The dmDriverExtra member must be initialized to indicate the number of bytes of private driver data following the DEVMODE structure. In addition, you can use any of the following members of the DEVMODE structure.\nIn addition to using one or more of the preceding DEVMODE members, you must also set one or more of the following values in the dmFields member to change the display settings.", "possible_constants": [["DM_BITSPERPEL", -1], ["DM_PELSWIDTH", -1], ["DM_PELSHEIGHT", -1], ["DM_DISPLAYFLAGS", -1], ["DM_DISPLAYFREQUENCY", -1], ["DM_POSITION", -1]]}, {"name": "hwnd", "type": "", "description": "Reserved; must be NULL.", "possible_constants": []}, {"name": "dwflags", "type": "", "description": "Indicates how the graphics mode should be changed. This parameter can be one of the following values.\nSpecifying CDS_TEST allows an application to determine which graphics modes are actually valid, without causing the system to change to them.\nIf CDS_UPDATEREGISTRY is specified and it is possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_SUCCESSFUL is returned. If it is not possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_RESTART is returned.\nIf CDS_UPDATEREGISTRY is specified and the information could not be stored in the registry, the graphics mode is not changed and DISP_CHANGE_NOTUPDATED is returned.", "possible_constants": [["0", -1], ["CDS_FULLSCREEN", -1], ["CDS_GLOBAL", -1], ["CDS_NORESET", -1], ["CDS_RESET", -1], ["CDS_SET_PRIMARY", -1], ["CDS_TEST", -1], ["CDS_UPDATEREGISTRY", -1], ["CDS_VIDEOPARAMETERS", -1], ["CDS_ENABLE_UNSAFE_MODES", -1], ["CDS_DISABLE_UNSAFE_MODES", -1]]}, {"name": "lParam", "type": "", "description": "If dwFlags is CDS_VIDEOPARAMETERS, lParam is a pointer to a VIDEOPARAMETERS structure. Otherwise lParam must be NULL.", "possible_constants": []}]}, {"name": "ChangeDisplaySettingsExW", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-changedisplaysettingsexw", "description": "The ChangeDisplaySettingsEx function changes the settings of the specified display device to the specified graphics mode.", "parameters": [{"name": "lpszDeviceName", "type": "", "description": "A pointer to a null-terminated string that specifies the display device whose graphics mode will change. Only display device names as returned by EnumDisplayDevices are valid. See EnumDisplayDevices for further information on the names associated with these display devices.\nThe lpszDeviceName parameter can be NULL. A NULL value specifies the default display device. The default device can be determined by calling EnumDisplayDevices and checking for the DISPLAY_DEVICE_PRIMARY_DEVICE flag.", "possible_constants": []}, {"name": "lpDevMode", "type": "", "description": "A pointer to a DEVMODE structure that describes the new graphics mode. If lpDevMode is NULL, all the values currently in the registry will be used for the display setting. Passing NULL for the lpDevMode parameter and 0 for the dwFlags parameter is the easiest way to return to the default mode after a dynamic mode change.\nThe dmSize member must be initialized to the size, in bytes, of the DEVMODE structure. The dmDriverExtra member must be initialized to indicate the number of bytes of private driver data following the DEVMODE structure. In addition, you can use any of the following members of the DEVMODE structure.\nIn addition to using one or more of the preceding DEVMODE members, you must also set one or more of the following values in the dmFields member to change the display settings.", "possible_constants": [["DM_BITSPERPEL", -1], ["DM_PELSWIDTH", -1], ["DM_PELSHEIGHT", -1], ["DM_DISPLAYFLAGS", -1], ["DM_DISPLAYFREQUENCY", -1], ["DM_POSITION", -1]]}, {"name": "hwnd", "type": "", "description": "Reserved; must be NULL.", "possible_constants": []}, {"name": "dwflags", "type": "", "description": "Indicates how the graphics mode should be changed. This parameter can be one of the following values.\nSpecifying CDS_TEST allows an application to determine which graphics modes are actually valid, without causing the system to change to them.\nIf CDS_UPDATEREGISTRY is specified and it is possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_SUCCESSFUL is returned. If it is not possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_RESTART is returned.\nIf CDS_UPDATEREGISTRY is specified and the information could not be stored in the registry, the graphics mode is not changed and DISP_CHANGE_NOTUPDATED is returned.", "possible_constants": [["0", -1], ["CDS_FULLSCREEN", -1], ["CDS_GLOBAL", -1], ["CDS_NORESET", -1], ["CDS_RESET", -1], ["CDS_SET_PRIMARY", -1], ["CDS_TEST", -1], ["CDS_UPDATEREGISTRY", -1], ["CDS_VIDEOPARAMETERS", -1], ["CDS_ENABLE_UNSAFE_MODES", -1], ["CDS_DISABLE_UNSAFE_MODES", -1]]}, {"name": "lParam", "type": "", "description": "If dwFlags is CDS_VIDEOPARAMETERS, lParam is a pointer to a VIDEOPARAMETERS structure. Otherwise lParam must be NULL.", "possible_constants": []}]}, {"name": "ChangeDisplaySettingsW", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-changedisplaysettingsw", "description": "The ChangeDisplaySettings function changes the settings of the default display device to the specified graphics mode.", "parameters": [{"name": "lpDevMode", "type": "", "description": "A pointer to a DEVMODE structure that describes the new graphics mode. If lpDevMode is NULL, all the values currently in the registry will be used for the display setting. Passing NULL for the lpDevMode parameter and 0 for the dwFlags parameter is the easiest way to return to the default mode after a dynamic mode change.\nThe dmSize member of DEVMODE must be initialized to the size, in bytes, of the DEVMODE structure. The dmDriverExtra member of DEVMODE must be initialized to indicate the number of bytes of private driver data following the DEVMODE structure. In addition, you can use any or all of the following members of the DEVMODE structure.\nIn addition to using one or more of the preceding DEVMODE members, you must also set one or more of the following values in the dmFields member to change the display setting.", "possible_constants": [["DM_BITSPERPEL", -1], ["DM_PELSWIDTH", -1], ["DM_PELSHEIGHT", -1], ["DM_DISPLAYFLAGS", -1], ["DM_DISPLAYFREQUENCY", -1], ["DM_POSITION", -1]]}, {"name": "dwFlags", "type": "", "description": "Indicates how the graphics mode should be changed. This parameter can be one of the following values.\nSpecifying CDS_TEST allows an application to determine which graphics modes are actually valid, without causing the system to change to that graphics mode.\nIf CDS_UPDATEREGISTRY is specified and it is possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_SUCCESSFUL is returned. If it is not possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_RESTART is returned.\nIf CDS_UPDATEREGISTRY is specified and the information could not be stored in the registry, the graphics mode is not changed and DISP_CHANGE_NOTUPDATED is returned.", "possible_constants": [["0", -1], ["CDS_FULLSCREEN", -1], ["CDS_GLOBAL", -1], ["CDS_NORESET", -1], ["CDS_RESET", -1], ["CDS_SET_PRIMARY", -1], ["CDS_TEST", -1], ["CDS_UPDATEREGISTRY", -1]]}]}, {"name": "ChangeWindowMessageFilter", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-changewindowmessagefilter", "description": "[Using the \n\t\tChangeWindowMessageFilter function is not recommended, as it has process-wide scope. \n\t\tInstead, use the ChangeWindowMessageFilterEx function to \n\t\tcontrol access to specific windows as needed.\n\t\tChangeWindowMessageFilter may not be supported in future versions of Windows.]\nAdds or removes a message from the User Interface Privilege Isolation (UIPI) message filter.\nSyntax\nBOOL ChangeWindowMessageFilter(\n  UINT  message,\n  DWORD dwFlag\n);\n\nParameters\nmessage\nType: UINT\nThe message to add to or remove from the filter.\ndwFlag\nType: DWORD\nThe action to be performed. One of the following values.\n\n\nValue\nMeaning\n\n\n\nMSGFLT_ADD\n1\n\n\n\nAdds the message to the filter. This has the effect of allowing the message to be received.\n\n\n\n\nMSGFLT_REMOVE\n2\n\n\n\nRemoves the message from the filter. This has the effect of blocking the message.\n\n\n\nReturn value\nType: BOOL\nTRUE if successful; otherwise, FALSE. To get extended error information, call GetLastError.\nNote\u00c2\u00a0\u00c2\u00a0A message can be successfully removed from the filter, but that is not a guarantee that the message will be blocked. See the Remarks section for more details.\n\u00c2\u00a0\nRemarks\nUIPI is a security feature that prevents messages from being received from a lower integrity level sender. All such messages with a value above WM_USER are blocked by default. The filter, somewhat contrary to intuition, is a list of messages that are allowed through. Therefore, adding a message to the filter allows that message to be received from a lower integrity sender, while removing a message blocks that message from being received.\nCertain messages with a value less than WM_USER are required to pass through the filter regardless of the filter setting. You can call this function to remove one of those messages from the filter and it will return TRUE. However, the message will still be received by the calling process.\nProcesses at or below SECURITY_MANDATORY_LOW_RID are not allowed to change the filter. If those processes call this function, it will fail.\nFor more information on integrity levels, see Understanding and Working in Protected Mode Internet Explorer.\nRequirements\n\n\n\n\u00c2\u00a0\n\u00c2\u00a0\n\n\n\n\nMinimum supported client\nWindows\u00c2\u00a0Vista [desktop apps only]\n\n\nMinimum supported server\nWindows Server\u00c2\u00a02008 [desktop apps only]\n\n\nTarget Platform\nWindows\n\n\nHeader\nwinuser.h (include Windows.h)\n\n\nLibrary\nUser32.lib\n\n\nDLL\nUser32.dll", "parameters": [{"name": "message", "type": "UINT", "description": "The message to add to or remove from the filter.", "possible_constants": []}, {"name": "dwFlag", "type": "DWORD", "description": "The action to be performed. One of the following values.", "possible_constants": [["MSGFLT_ADD", -1], ["MSGFLT_REMOVE", -1]]}]}, {"name": "ChangeWindowMessageFilterEx", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-changewindowmessagefilterex", "description": "Modifies the User Interface Privilege Isolation (UIPI) message filter for a specified window.", "parameters": [{"name": "hwnd", "type": "HWND", "description": "A handle to the window whose UIPI message filter is to be modified.", "possible_constants": []}, {"name": "message", "type": "UINT", "description": "The message that the message filter allows through or blocks.", "possible_constants": []}, {"name": "action", "type": "DWORD", "description": "The action to be performed, and can take one of the following values:", "possible_constants": [["MSGFLT_ALLOW", -1], ["MSGFLT_DISALLOW", -1], ["MSGFLT_RESET", -1]]}, {"name": "pChangeFilterStruct", "type": "PCHANGEFILTERSTRUCT", "description": "Optional pointer to a CHANGEFILTERSTRUCT structure.", "possible_constants": []}]}, {"name": "CharLowerA", "return_type": "LPTSTR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-charlowera", "description": "Converts a character string or a single character to lowercase. If the operand is a character string, the function converts the characters in place.", "parameters": [{"name": "lpsz", "type": "LPTSTR", "description": "A null-terminated string, or specifies a single character. If the high-order word of this parameter is zero, the low-order word must contain a single character to be converted.", "possible_constants": []}]}, {"name": "CharLowerBuffA", "return_type": "DWORD", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-charlowerbuffa", "description": "Converts uppercase characters in a buffer to lowercase characters. The function converts the characters in place.", "parameters": [{"name": "lpsz", "type": "LPTSTR", "description": "A buffer containing one or more characters to be processed.", "possible_constants": []}, {"name": "cchLength", "type": "DWORD", "description": "The size, in\ncharacters, of the buffer pointed to by\nlpsz. The function examines each character, and converts uppercase characters to lowercase characters. The function examines the number of\ncharacters indicated by\ncchLength, even if one or more characters are null characters.", "possible_constants": []}]}, {"name": "CharLowerBuffW", "return_type": "DWORD", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-charlowerbuffw", "description": "Converts uppercase characters in a buffer to lowercase characters. The function converts the characters in place.", "parameters": [{"name": "lpsz", "type": "LPTSTR", "description": "A buffer containing one or more characters to be processed.", "possible_constants": []}, {"name": "cchLength", "type": "DWORD", "description": "The size, in\ncharacters, of the buffer pointed to by\nlpsz. The function examines each character, and converts uppercase characters to lowercase characters. The function examines the number of\ncharacters indicated by\ncchLength, even if one or more characters are null characters.", "possible_constants": []}]}, {"name": "CharLowerW", "return_type": "LPTSTR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-charlowerw", "description": "Converts a character string or a single character to lowercase. If the operand is a character string, the function converts the characters in place.", "parameters": [{"name": "lpsz", "type": "LPTSTR", "description": "A null-terminated string, or specifies a single character. If the high-order word of this parameter is zero, the low-order word must contain a single character to be converted.", "possible_constants": []}]}, {"name": "CharNextA", "return_type": "LPTSTR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-charnexta", "description": "Retrieves a pointer to the next character in a string. This function can handle strings consisting of either single- or multi-byte characters.", "parameters": [{"name": "lpsz", "type": "LPCTSTR", "description": "A character in a null-terminated string.", "possible_constants": []}]}, {"name": "CharNextExA", "return_type": "LPSTR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-charnextexa", "description": "Retrieves the pointer to the next character in a string. This function can handle strings consisting of either single- or multi-byte characters.", "parameters": [{"name": "CodePage", "type": "WORD", "description": "The identifier of the code page to use to check lead-byte ranges. Can be one of the code-page values provided in Code Page Identifiers, or one of the following predefined values.", "possible_constants": [["CP_ACP", -1], ["CP_MACCP", -1], ["CP_OEMCP", -1]]}, {"name": "lpCurrentChar", "type": "LPCSTR", "description": "A character in a null-terminated string.", "possible_constants": []}, {"name": "dwFlags", "type": "DWORD", "description": "This parameter is reserved and must be 0.", "possible_constants": []}]}, {"name": "CharNextW", "return_type": "LPTSTR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-charnextw", "description": "Retrieves a pointer to the next character in a string. This function can handle strings consisting of either single- or multi-byte characters.", "parameters": [{"name": "lpsz", "type": "LPCTSTR", "description": "A character in a null-terminated string.", "possible_constants": []}]}, {"name": "CharPrevA", "return_type": "LPTSTR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-charpreva", "description": "Retrieves a pointer to the preceding character in a string. This function can handle strings consisting of either single- or multi-byte characters.", "parameters": [{"name": "lpszStart", "type": "LPCTSTR", "description": "The beginning of the string.", "possible_constants": []}, {"name": "lpszCurrent", "type": "LPCTSTR", "description": "A character in a null-terminated string.", "possible_constants": []}]}, {"name": "CharPrevExA", "return_type": "LPSTR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-charprevexa", "description": "Retrieves the pointer to the preceding character in a string. This function can handle strings consisting of either single- or multi-byte characters.", "parameters": [{"name": "CodePage", "type": "WORD", "description": "The identifier of the code page to use to check lead-byte ranges. Can be one of the code-page values provided in Code Page Identifiers,  or one of the following predefined values.", "possible_constants": [["CP_ACP", -1], ["CP_MACCP", -1], ["CP_OEMCP", -1]]}, {"name": "lpStart", "type": "LPCSTR", "description": "The beginning of the string.", "possible_constants": []}, {"name": "lpCurrentChar", "type": "LPCSTR", "description": "A character in a null-terminated string.", "possible_constants": []}, {"name": "dwFlags", "type": "DWORD", "description": "This parameter is reserved and must be zero.", "possible_constants": []}]}, {"name": "CharPrevW", "return_type": "LPTSTR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-charprevw", "description": "Retrieves a pointer to the preceding character in a string. This function can handle strings consisting of either single- or multi-byte characters.", "parameters": [{"name": "lpszStart", "type": "LPCTSTR", "description": "The beginning of the string.", "possible_constants": []}, {"name": "lpszCurrent", "type": "LPCTSTR", "description": "A character in a null-terminated string.", "possible_constants": []}]}, {"name": "CharToOemA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-chartooema", "description": "Translates a string into the OEM-defined character set.", "parameters": [{"name": "pSrc", "type": "LPCTSTR", "description": "The null-terminated string to be translated.", "possible_constants": []}, {"name": "pDst", "type": "LPSTR", "description": "The destination buffer, which receives the translated string. If the CharToOem function is being used as an ANSI function, the string can be translated in place by setting the\nlpszDst parameter to the same address as the\nlpszSrc parameter. This cannot be done if CharToOem is being used as a wide-character function.", "possible_constants": []}]}, {"name": "CharToOemBuffA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-chartooembuffa", "description": "Translates a specified number of characters in a string into the OEM-defined character set.", "parameters": [{"name": "lpszSrc", "type": "LPCTSTR", "description": "The null-terminated string to be translated.", "possible_constants": []}, {"name": "lpszDst", "type": "LPSTR", "description": "The buffer for the translated string. If the CharToOemBuff function is being used as an ANSI function, the string can be translated in place by setting the lpszDst parameter to the same address as the lpszSrc parameter. This cannot be done if CharToOemBuff is being used as a wide-character function.", "possible_constants": []}, {"name": "cchDstLength", "type": "DWORD", "description": "The number of characters to translate in the string identified by the lpszSrc parameter.", "possible_constants": []}]}, {"name": "CharToOemBuffW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-chartooembuffw", "description": "Translates a specified number of characters in a string into the OEM-defined character set.", "parameters": [{"name": "lpszSrc", "type": "LPCTSTR", "description": "The null-terminated string to be translated.", "possible_constants": []}, {"name": "lpszDst", "type": "LPSTR", "description": "The buffer for the translated string. If the CharToOemBuff function is being used as an ANSI function, the string can be translated in place by setting the lpszDst parameter to the same address as the lpszSrc parameter. This cannot be done if CharToOemBuff is being used as a wide-character function.", "possible_constants": []}, {"name": "cchDstLength", "type": "DWORD", "description": "The number of characters to translate in the string identified by the lpszSrc parameter.", "possible_constants": []}]}, {"name": "CharToOemW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-chartooemw", "description": "Translates a string into the OEM-defined character set.", "parameters": [{"name": "pSrc", "type": "LPCTSTR", "description": "The null-terminated string to be translated.", "possible_constants": []}, {"name": "pDst", "type": "LPSTR", "description": "The destination buffer, which receives the translated string. If the CharToOem function is being used as an ANSI function, the string can be translated in place by setting the\nlpszDst parameter to the same address as the\nlpszSrc parameter. This cannot be done if CharToOem is being used as a wide-character function.", "possible_constants": []}]}, {"name": "CharUpperA", "return_type": "LPTSTR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-charuppera", "description": "Converts a character string or a single character to uppercase. If the operand is a character string, the function converts the characters in place.", "parameters": [{"name": "lpsz", "type": "LPTSTR", "description": "A null-terminated string, or a single character. If the high-order word of this parameter is zero, the low-order word must contain a single character to be converted.", "possible_constants": []}]}, {"name": "CharUpperBuffA", "return_type": "DWORD", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-charupperbuffa", "description": "Converts lowercase characters in a buffer to uppercase characters. The function converts the characters in place.", "parameters": [{"name": "lpsz", "type": "LPTSTR", "description": "A buffer containing one or more characters to be processed.", "possible_constants": []}, {"name": "cchLength", "type": "DWORD", "description": "The size, in characters, of the buffer pointed to by lpsz.\nThe function examines each character, and converts lowercase characters to uppercase characters. The function examines the number of characters indicated by\ncchLength, even if one or more characters are null characters.", "possible_constants": []}]}, {"name": "CharUpperBuffW", "return_type": "DWORD", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-charupperbuffw", "description": "Converts lowercase characters in a buffer to uppercase characters. The function converts the characters in place.", "parameters": [{"name": "lpsz", "type": "LPTSTR", "description": "A buffer containing one or more characters to be processed.", "possible_constants": []}, {"name": "cchLength", "type": "DWORD", "description": "The size, in characters, of the buffer pointed to by lpsz.\nThe function examines each character, and converts lowercase characters to uppercase characters. The function examines the number of characters indicated by\ncchLength, even if one or more characters are null characters.", "possible_constants": []}]}, {"name": "CharUpperW", "return_type": "LPTSTR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-charupperw", "description": "Converts a character string or a single character to uppercase. If the operand is a character string, the function converts the characters in place.", "parameters": [{"name": "lpsz", "type": "LPTSTR", "description": "A null-terminated string, or a single character. If the high-order word of this parameter is zero, the low-order word must contain a single character to be converted.", "possible_constants": []}]}, {"name": "CheckDlgButton", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-checkdlgbutton", "description": "Changes the check state of a button control.", "parameters": [{"name": "hDlg", "type": "HWND", "description": "A handle to the dialog box that contains the button.", "possible_constants": []}, {"name": "nIDButton", "type": "int", "description": "The identifier of the button to modify.", "possible_constants": []}, {"name": "uCheck", "type": "UINT", "description": "The check state of the button. This parameter can be one of the following values.", "possible_constants": [["BST_CHECKED", -1], ["BST_INDETERMINATE", -1], ["BST_UNCHECKED", -1]]}]}, {"name": "CheckMenuItem", "return_type": "DWORD", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-checkmenuitem", "description": "[CheckMenuItem is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions. Instead, use SetMenuItemInfo.\n]\nSets the state of the specified menu item's check-mark attribute to either selected or clear.\nSyntax\nDWORD CheckMenuItem(\n  HMENU hMenu,\n  UINT  uIDCheckItem,\n  UINT  uCheck\n);\n\nParameters\nhMenu\nType: HMENU\nA handle to the menu of interest.\nuIDCheckItem\nType: UINT\nThe menu item whose check-mark attribute is to be set, as determined by the uCheck parameter.\nuCheck\nType: UINT\nThe flags that control the interpretation of the uIDCheckItem parameter and the state of the menu item's check-mark attribute. This parameter can be a combination of either MF_BYCOMMAND, or MF_BYPOSITION and MF_CHECKED or MF_UNCHECKED.\n\n\nValue\nMeaning\n\n\n\nMF_BYCOMMAND\n0x00000000L\n\n\n\nIndicates that the uIDCheckItem parameter gives the identifier of the menu item. The MF_BYCOMMAND flag is the default, if neither the MF_BYCOMMAND nor MF_BYPOSITION flag is specified.\n\n\n\n\nMF_BYPOSITION\n0x00000400L\n\n\n\nIndicates that the uIDCheckItem parameter gives the zero-based relative position of the menu item.\n\n\n\n\nMF_CHECKED\n0x00000008L\n\n\n\nSets the check-mark attribute to the selected state.\n\n\n\n\nMF_UNCHECKED\n0x00000000L\n\n\n\nSets the check-mark attribute to the clear state.\n\n\n\nReturn value\nType: DWORD\nThe return value specifies the previous state of the menu item (either MF_CHECKED or MF_UNCHECKED). If the menu item does not exist, the return value is \u00e2\u0080\u00931.\nRemarks\nAn item in a menu bar cannot have a check mark.\nThe uIDCheckItem parameter identifies a item that opens a submenu or a command item. For a item that opens a submenu, the uIDCheckItem parameter must specify the position of the item. For a command item, the uIDCheckItem parameter can specify either the item's position or its identifier.\nExamples\nFor an example, see Simulating Check Boxes in a Menu.\n\nRequirements\n\n\n\n\u00c2\u00a0\n\u00c2\u00a0\n\n\n\n\nMinimum supported client\nWindows\u00c2\u00a02000 Professional [desktop apps only]\n\n\nMinimum supported server\nWindows\u00c2\u00a02000 Server [desktop apps only]\n\n\nTarget Platform\nWindows\n\n\nHeader\nwinuser.h (include Windows.h)\n\n\nLibrary\nUser32.lib\n\n\nDLL\nUser32.dll\n\n\nAPI set\next-ms-win-ntuser-menu-l1-1-0 (introduced in Windows 8)\n\n\n\nSee also\nConceptual\nEnableMenuItem\nGetMenuItemID\nMenus\nReference\nSetMenuItemBitmaps\nSetMenuItemInfo", "parameters": [{"name": "hMenu", "type": "HMENU", "description": "A handle to the menu of interest.", "possible_constants": []}, {"name": "uIDCheckItem", "type": "UINT", "description": "The menu item whose check-mark attribute is to be set, as determined by the uCheck parameter.", "possible_constants": []}, {"name": "uCheck", "type": "UINT", "description": "The flags that control the interpretation of the uIDCheckItem parameter and the state of the menu item's check-mark attribute. This parameter can be a combination of either MF_BYCOMMAND, or MF_BYPOSITION and MF_CHECKED or MF_UNCHECKED.", "possible_constants": [["MF_BYCOMMAND", 0], ["MF_BYPOSITION", 1024], ["MF_CHECKED", 8], ["MF_UNCHECKED", 0]]}]}, {"name": "CheckMenuRadioItem", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-checkmenuradioitem", "description": "Checks a specified menu item and makes it a radio item. At the same time, the function clears all other menu items in the associated group and clears the radio-item type flag for those items.", "parameters": [{"name": "hmenu", "type": "HMENU", "description": "A handle to the menu that contains the group of menu items.", "possible_constants": []}, {"name": "first", "type": "UINT", "description": "The identifier or position of the first menu item in the group.", "possible_constants": []}, {"name": "last", "type": "UINT", "description": "The identifier or position of the last menu item in the group.", "possible_constants": []}, {"name": "check", "type": "UINT", "description": "The identifier or position of the menu item to check.", "possible_constants": []}, {"name": "flags", "type": "UINT", "description": "Indicates the meaning of idFirst, idLast, and idCheck. If this parameter is MF_BYCOMMAND, the other parameters specify menu item identifiers. If it is MF_BYPOSITION, the other parameters specify the menu item positions.", "possible_constants": []}]}, {"name": "CheckRadioButton", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-checkradiobutton", "description": "Adds a check mark to (checks) a specified radio button in a group and removes a check mark from (clears) all other radio buttons in the group.", "parameters": [{"name": "hDlg", "type": "HWND", "description": "A handle to the dialog box that contains the radio button.", "possible_constants": []}, {"name": "nIDFirstButton", "type": "int", "description": "The identifier of the first radio button in the group.", "possible_constants": []}, {"name": "nIDLastButton", "type": "int", "description": "The identifier of the last radio button in the group.", "possible_constants": []}, {"name": "nIDCheckButton", "type": "int", "description": "The identifier of the radio button to select.", "possible_constants": []}]}, {"name": "ChildWindowFromPoint", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-childwindowfrompoint", "description": "Determines which, if any,\nof the child windows belonging to a parent window contains the specified point.\nThe search is restricted to immediate child windows. Grandchildren, and deeper\ndescendant windows are not searched.", "parameters": [{"name": "hWndParent", "type": "HWND", "description": "A handle to the parent window.", "possible_constants": []}, {"name": "Point", "type": "POINT", "description": "A structure that defines the client\ncoordinates, relative to hWndParent,\nof the point to be checked.", "possible_constants": []}]}, {"name": "ChildWindowFromPointEx", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-childwindowfrompointex", "description": "Determines which, if any,\nof the child windows belonging to the specified parent window contains the specified point.\nThe function can ignore invisible, disabled, and transparent child windows. The search is\nrestricted to immediate child windows. Grandchildren and deeper descendants are not searched.", "parameters": [{"name": "hwnd", "type": "HWND", "description": "A handle to the parent window.", "possible_constants": []}, {"name": "pt", "type": "POINT", "description": "A structure that defines the\nclient coordinates (relative to hwndParent)\nof the point to be checked.", "possible_constants": []}, {"name": "flags", "type": "UINT", "description": "The child windows to be skipped. This parameter can be one or more of the\nfollowing values.", "possible_constants": [["CWP_ALL", 0], ["CWP_SKIPDISABLED", 2], ["CWP_SKIPINVISIBLE", 1], ["CWP_SKIPTRANSPARENT", 4]]}]}, {"name": "ClientToScreen", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-clienttoscreen", "description": "The ClientToScreen function converts the client-area coordinates of a specified point to screen coordinates.", "parameters": [{"name": "hWnd", "type": "", "description": "A handle to the window whose client area is used for the conversion.", "possible_constants": []}, {"name": "lpPoint", "type": "", "description": "A pointer to a POINT structure that contains the client coordinates to be converted. The new screen coordinates are copied into this structure if the function succeeds.", "possible_constants": []}]}, {"name": "ClipCursor", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-clipcursor", "description": "Confines the cursor to a rectangular area on the screen. If a subsequent cursor position (set by the SetCursorPos function or the mouse) lies outside the rectangle, the system automatically adjusts the position to keep the cursor inside the rectangular area.", "parameters": [{"name": "lpRect", "type": "const RECT*", "description": "A pointer to the structure that contains the screen coordinates of the upper-left and lower-right corners of the confining rectangle. If this parameter is NULL, the cursor is free to move anywhere on the screen.", "possible_constants": []}]}, {"name": "CloseClipboard", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-closeclipboard", "description": "Closes the clipboard.", "parameters": []}, {"name": "CloseDesktop", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-closedesktop", "description": "Closes an open handle to a desktop object.", "parameters": [{"name": "hDesktop", "type": "", "description": "A handle to the desktop to be closed. This can be a handle returned by the\nCreateDesktop,\nOpenDesktop, or\nOpenInputDesktop functions. Do not specify the handle returned by the GetThreadDesktop function.", "possible_constants": []}]}, {"name": "CloseGestureInfoHandle", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-closegestureinfohandle", "description": "Closes resources associated with a gesture information handle.", "parameters": [{"name": "hGestureInfo", "type": "", "description": "The gesture information handle.", "possible_constants": []}]}, {"name": "CloseTouchInputHandle", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-closetouchinputhandle", "description": "Closes a touch input handle, frees process memory associated with it, and invalidates the handle.", "parameters": [{"name": "hTouchInput", "type": "", "description": "The touch input handle received in the LPARAM of a touch message. The function fails with ERROR_INVALID_HANDLE if this handle is not valid. Note that the handle is not valid after it has been used in a successful call to CloseTouchInputHandle or after it has been passed to DefWindowProc, PostMessage, SendMessage or one of their variants.", "possible_constants": []}]}, {"name": "CloseWindow", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-closewindow", "description": "Minimizes (but does not destroy) the specified window.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window to be minimized.", "possible_constants": []}]}, {"name": "CloseWindowStation", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-closewindowstation", "description": "Closes an open window station handle.", "parameters": [{"name": "hWinSta", "type": "", "description": "A handle to the window station to be closed. This handle is returned by the\nCreateWindowStation or\nOpenWindowStation function. Do not specify the handle returned by the GetProcessWindowStation function.", "possible_constants": []}]}, {"name": "CopyAcceleratorTableA", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-copyacceleratortablea", "description": "Copies the specified accelerator table. This function is used to obtain the accelerator-table data that corresponds to an accelerator-table handle, or to determine the size of the accelerator-table data.", "parameters": [{"name": "hAccelSrc", "type": "HACCEL", "description": "A handle to the accelerator table to copy.", "possible_constants": []}, {"name": "lpAccelDst", "type": "LPACCEL", "description": "An array of ACCEL structures that receives the accelerator-table information.", "possible_constants": []}, {"name": "cAccelEntries", "type": "int", "description": "The number of ACCEL structures to copy to the buffer pointed to by the\nlpAccelDst parameter.", "possible_constants": []}]}, {"name": "CopyAcceleratorTableW", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-copyacceleratortablew", "description": "Copies the specified accelerator table. This function is used to obtain the accelerator-table data that corresponds to an accelerator-table handle, or to determine the size of the accelerator-table data.", "parameters": [{"name": "hAccelSrc", "type": "HACCEL", "description": "A handle to the accelerator table to copy.", "possible_constants": []}, {"name": "lpAccelDst", "type": "LPACCEL", "description": "An array of ACCEL structures that receives the accelerator-table information.", "possible_constants": []}, {"name": "cAccelEntries", "type": "int", "description": "The number of ACCEL structures to copy to the buffer pointed to by the\nlpAccelDst parameter.", "possible_constants": []}]}, {"name": "CopyCursor", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-copycursor", "description": "Copies the specified cursor.", "parameters": [{"name": "pcur", "type": "HCURSOR", "description": "A handle to the cursor to be copied.", "possible_constants": []}]}, {"name": "CopyIcon", "return_type": "HICON", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-copyicon", "description": "Copies the specified icon from another module to the current module.", "parameters": [{"name": "hIcon", "type": "HICON", "description": "A handle to the icon to be copied.", "possible_constants": []}]}, {"name": "CopyImage", "return_type": "HANDLE", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-copyimage", "description": "Creates a new image (icon, cursor, or bitmap) and copies the attributes of the specified image to the new one. If necessary, the function stretches the bits to fit the desired size of the new image.", "parameters": [{"name": "h", "type": "HANDLE", "description": "A handle to the image to be copied.", "possible_constants": []}, {"name": "type", "type": "UINT", "description": "The type of image to be copied. This parameter can be one of the following values.", "possible_constants": [["IMAGE_BITMAP", -1], ["IMAGE_CURSOR", -1], ["IMAGE_ICON", -1]]}, {"name": "cx", "type": "int", "description": "The desired width, in pixels, of the image. If this is zero, then the returned image will have the same width as the original hImage.", "possible_constants": []}, {"name": "cy", "type": "int", "description": "The desired height, in pixels, of the image. If this is zero, then the returned image will have the same height as the original hImage.", "possible_constants": []}, {"name": "flags", "type": "UINT", "description": "This parameter can be one or more of the following values.", "possible_constants": [["LR_COPYDELETEORG", 8], ["LR_COPYFROMRESOURCE", 16384], ["LR_COPYRETURNORG", 4], ["LR_CREATEDIBSECTION", 8192], ["LR_DEFAULTSIZE", 64], ["LR_MONOCHROME", 1]]}]}, {"name": "CopyRect", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-copyrect", "description": "The CopyRect function copies the coordinates of one rectangle to another.", "parameters": [{"name": "lprcDst", "type": "", "description": "Pointer to the RECT structure that receives the logical coordinates of the source rectangle.", "possible_constants": []}, {"name": "lprcSrc", "type": "", "description": "Pointer to the RECT structure whose coordinates are to be copied in logical units.", "possible_constants": []}]}, {"name": "CountClipboardFormats", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-countclipboardformats", "description": "Retrieves the number of different data formats currently on the clipboard.", "parameters": []}, {"name": "CreateAcceleratorTableA", "return_type": "HACCEL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createacceleratortablea", "description": "Creates an accelerator table.", "parameters": [{"name": "paccel", "type": "LPACCEL", "description": "An array of ACCEL structures that describes the accelerator table.", "possible_constants": []}, {"name": "cAccel", "type": "int", "description": "The number of ACCEL structures in the array. This must be within the range 1 to 32767 or the function will fail.", "possible_constants": []}]}, {"name": "CreateAcceleratorTableW", "return_type": "HACCEL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createacceleratortablew", "description": "Creates an accelerator table.", "parameters": [{"name": "paccel", "type": "LPACCEL", "description": "An array of ACCEL structures that describes the accelerator table.", "possible_constants": []}, {"name": "cAccel", "type": "int", "description": "The number of ACCEL structures in the array. This must be within the range 1 to 32767 or the function will fail.", "possible_constants": []}]}, {"name": "CreateCaret", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createcaret", "description": "Creates a new shape for the system caret and assigns ownership of the caret to the specified window. The caret shape can be a line, a block, or a bitmap.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window that owns the caret.", "possible_constants": []}, {"name": "hBitmap", "type": "HBITMAP", "description": "", "possible_constants": []}, {"name": "A handle to the bitmap that defines the caret shape. If this parameter is NULL, the caret is solid. If this parameter is (HBITMAP) 1, the caret is gray. If this parameter is a bitmap handle, the caret is the specified bitmap. The bitmap handle must have been created by the CreateBitmap, CreateDIBitmap, or LoadBitmap function.", "type": "", "description": "If hBitmap is a bitmap handle, CreateCaret ignores the nWidth and nHeight parameters; the bitmap defines its own width and height.", "possible_constants": []}, {"name": "nWidth", "type": "int", "description": "The width of the caret, in logical units. If this parameter is zero, the width is set to the system-defined window border width. If hBitmap is a bitmap handle, CreateCaret ignores this parameter.", "possible_constants": []}, {"name": "nHeight", "type": "int", "description": "The height of the caret, in logical units. If this parameter is zero, the height is set to the system-defined window border height. If hBitmap is a bitmap handle, CreateCaret ignores this parameter.", "possible_constants": []}]}, {"name": "CreateCursor", "return_type": "HCURSOR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createcursor", "description": "Creates a cursor having the specified size, bit patterns, and hot spot.", "parameters": [{"name": "hInst", "type": "HINSTANCE", "description": "A handle to the current instance of the application creating the cursor.", "possible_constants": []}, {"name": "xHotSpot", "type": "int", "description": "The horizontal position of the cursor's hot spot.", "possible_constants": []}, {"name": "yHotSpot", "type": "int", "description": "The vertical position of the cursor's hot spot.", "possible_constants": []}, {"name": "nWidth", "type": "int", "description": "The width of the cursor, in pixels.", "possible_constants": []}, {"name": "nHeight", "type": "int", "description": "The height of the cursor, in pixels.", "possible_constants": []}, {"name": "pvANDPlane", "type": "const VOID*", "description": "An array of bytes that contains the bit values for the\nAND mask of the cursor, as in a device-dependent monochrome bitmap.", "possible_constants": []}, {"name": "pvXORPlane", "type": "const VOID*", "description": "An array of bytes that contains the bit values for the\nXOR mask of the cursor, as in a device-dependent monochrome bitmap.", "possible_constants": []}]}, {"name": "CreateDesktopA", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createdesktopa", "description": "Creates a new desktop, associates it with the current window station of the calling process, and assigns it to the calling thread. The calling process must have an associated window station, either assigned by the system at process creation time or set by\nthe SetProcessWindowStation function.", "parameters": [{"name": "lpszDesktop", "type": "", "description": "The name of the desktop to be created. Desktop names are case-insensitive and may not contain backslash characters (\\).", "possible_constants": []}, {"name": "lpszDevice", "type": "", "description": "Reserved; must be NULL.", "possible_constants": []}, {"name": "pDevmode", "type": "", "description": "Reserved; must be NULL.", "possible_constants": []}, {"name": "dwFlags", "type": "", "description": "This parameter can be zero or the following value.", "possible_constants": [["DF_ALLOWOTHERACCOUNTHOOK", 1]]}, {"name": "dwDesiredAccess", "type": "", "description": "The access to the desktop. For a list of values, see\nDesktop Security and Access Rights.\nThis parameter must include the DESKTOP_CREATEWINDOW access right, because internally\nCreateDesktop uses the handle to create a window.", "possible_constants": []}, {"name": "lpsa", "type": "", "description": "A pointer to a\nSECURITY_ATTRIBUTES structure that determines whether the returned handle can be inherited by child processes. If lpsa is NULL, the handle cannot be inherited.\nThe lpSecurityDescriptor member of the structure specifies a security descriptor for the new desktop. If this parameter is NULL, the desktop inherits its security descriptor from the parent window station.", "possible_constants": []}]}, {"name": "CreateDesktopExA", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createdesktopexa", "description": "Creates a new desktop with the specified heap, associates it with the current window station of the calling process, and assigns it to the calling thread. The calling process must have an associated window station, either assigned by the system at process creation time or set by\nthe SetProcessWindowStation function.", "parameters": [{"name": "lpszDesktop", "type": "", "description": "The name of the desktop to be created. Desktop names are case-insensitive and may not contain backslash characters (\\).", "possible_constants": []}, {"name": "lpszDevice", "type": "", "description": "This parameter is reserved and must be NULL.", "possible_constants": []}, {"name": "pDevmode", "type": "", "description": "This parameter is reserved and must be NULL.", "possible_constants": []}, {"name": "dwFlags", "type": "", "description": "This parameter can be zero or the following value.", "possible_constants": [["DF_ALLOWOTHERACCOUNTHOOK", 1]]}, {"name": "dwDesiredAccess", "type": "", "description": "The requested access to the desktop. For a list of values, see\nDesktop Security and Access Rights.\nThis parameter must include the DESKTOP_CREATEWINDOW access right, because internally\nCreateDesktop uses the handle to create a window.", "possible_constants": []}, {"name": "lpsa", "type": "", "description": "A pointer to a\nSECURITY_ATTRIBUTES structure that determines whether the returned handle can be inherited by child processes. If lpsa is NULL, the handle cannot be inherited.\nThe lpSecurityDescriptor member of the structure specifies a security descriptor for the new desktop. If this parameter is NULL, the desktop inherits its security descriptor from the parent window station.", "possible_constants": []}, {"name": "ulHeapSize", "type": "", "description": "The size of the desktop heap, in kilobytes.", "possible_constants": []}, {"name": "pvoid", "type": "", "description": "This parameter is reserved and must be NULL.", "possible_constants": []}]}, {"name": "CreateDesktopExW", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createdesktopexw", "description": "Creates a new desktop with the specified heap, associates it with the current window station of the calling process, and assigns it to the calling thread. The calling process must have an associated window station, either assigned by the system at process creation time or set by\nthe SetProcessWindowStation function.", "parameters": [{"name": "lpszDesktop", "type": "", "description": "The name of the desktop to be created. Desktop names are case-insensitive and may not contain backslash characters (\\).", "possible_constants": []}, {"name": "lpszDevice", "type": "", "description": "This parameter is reserved and must be NULL.", "possible_constants": []}, {"name": "pDevmode", "type": "", "description": "This parameter is reserved and must be NULL.", "possible_constants": []}, {"name": "dwFlags", "type": "", "description": "This parameter can be zero or the following value.", "possible_constants": [["DF_ALLOWOTHERACCOUNTHOOK", 1]]}, {"name": "dwDesiredAccess", "type": "", "description": "The requested access to the desktop. For a list of values, see\nDesktop Security and Access Rights.\nThis parameter must include the DESKTOP_CREATEWINDOW access right, because internally\nCreateDesktop uses the handle to create a window.", "possible_constants": []}, {"name": "lpsa", "type": "", "description": "A pointer to a\nSECURITY_ATTRIBUTES structure that determines whether the returned handle can be inherited by child processes. If lpsa is NULL, the handle cannot be inherited.\nThe lpSecurityDescriptor member of the structure specifies a security descriptor for the new desktop. If this parameter is NULL, the desktop inherits its security descriptor from the parent window station.", "possible_constants": []}, {"name": "ulHeapSize", "type": "", "description": "The size of the desktop heap, in kilobytes.", "possible_constants": []}, {"name": "pvoid", "type": "", "description": "This parameter is reserved and must be NULL.", "possible_constants": []}]}, {"name": "CreateDesktopW", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createdesktopw", "description": "Creates a new desktop, associates it with the current window station of the calling process, and assigns it to the calling thread. The calling process must have an associated window station, either assigned by the system at process creation time or set by\nthe SetProcessWindowStation function.", "parameters": [{"name": "lpszDesktop", "type": "", "description": "The name of the desktop to be created. Desktop names are case-insensitive and may not contain backslash characters (\\).", "possible_constants": []}, {"name": "lpszDevice", "type": "", "description": "Reserved; must be NULL.", "possible_constants": []}, {"name": "pDevmode", "type": "", "description": "Reserved; must be NULL.", "possible_constants": []}, {"name": "dwFlags", "type": "", "description": "This parameter can be zero or the following value.", "possible_constants": [["DF_ALLOWOTHERACCOUNTHOOK", 1]]}, {"name": "dwDesiredAccess", "type": "", "description": "The access to the desktop. For a list of values, see\nDesktop Security and Access Rights.\nThis parameter must include the DESKTOP_CREATEWINDOW access right, because internally\nCreateDesktop uses the handle to create a window.", "possible_constants": []}, {"name": "lpsa", "type": "", "description": "A pointer to a\nSECURITY_ATTRIBUTES structure that determines whether the returned handle can be inherited by child processes. If lpsa is NULL, the handle cannot be inherited.\nThe lpSecurityDescriptor member of the structure specifies a security descriptor for the new desktop. If this parameter is NULL, the desktop inherits its security descriptor from the parent window station.", "possible_constants": []}]}, {"name": "CreateDialogA", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createdialoga", "description": "Creates a modeless dialog box from a dialog box template resource. The CreateDialog macro uses the CreateDialogParam function.", "parameters": [{"name": "hInstance", "type": "HINSTANCE", "description": "A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.", "possible_constants": []}, {"name": "lpName", "type": "LPCTSTR", "description": "The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and its low-order word must contain the identifier. You can use the MAKEINTRESOURCE macro to create this value.", "possible_constants": []}, {"name": "hWndParent", "type": "HWND", "description": "A handle to the window that owns the dialog box.", "possible_constants": []}, {"name": "lpDialogFunc", "type": "DLGPROC", "description": "A pointer to the dialog box procedure. For more information about the dialog box procedure, see DialogProc.", "possible_constants": []}]}, {"name": "CreateDialogIndirectA", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createdialogindirecta", "description": "Creates a modeless dialog box from a dialog box template in memory. The CreateDialogIndirect macro uses the CreateDialogIndirectParam function.", "parameters": [{"name": "hInstance", "type": "HINSTANCE", "description": "A handle to the module that creates the dialog box.", "possible_constants": []}, {"name": "lpTemplate", "type": "LPCDLGTEMPLATE", "description": "A template that CreateDialogIndirect uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format.\nIn a standard template, the header is a DLGTEMPLATE structure followed by additional variable-length arrays. The data for each control consists of a DLGITEMTEMPLATE structure followed by additional variable-length arrays.\nIn an extended dialog box template, the header uses the DLGTEMPLATEEX format and the control definitions use the DLGITEMTEMPLATEEX format.\nAfter CreateDialogIndirect returns, you can free the template, which is only used to get the dialog box started.", "possible_constants": []}, {"name": "hWndParent", "type": "HWND", "description": "A handle to the window that owns the dialog box.", "possible_constants": []}, {"name": "lpDialogFunc", "type": "DLGPROC", "description": "A pointer to the dialog box procedure. For more information about the dialog box procedure, see DialogProc.", "possible_constants": []}]}, {"name": "CreateDialogIndirectParamA", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createdialogindirectparama", "description": "Creates a modeless dialog box from a dialog box template in memory. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the lParam parameter of the WM_INITDIALOG message. An application can use this value to initialize dialog box controls.", "parameters": [{"name": "hInstance", "type": "HINSTANCE", "description": "A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.", "possible_constants": []}, {"name": "lpTemplate", "type": "LPCDLGTEMPLATE", "description": "The template CreateDialogIndirectParam uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format.\nIn a standard template, the header is a DLGTEMPLATE structure followed by additional variable-length arrays. The data for each control consists of a DLGITEMTEMPLATE structure followed by additional variable-length arrays.\nIn an extended dialog box template, the header uses the DLGTEMPLATEEX format and the control definitions use the DLGITEMTEMPLATEEX format.\nAfter CreateDialogIndirectParam returns, you can free the template, which is only used to get the dialog box started.", "possible_constants": []}, {"name": "hWndParent", "type": "HWND", "description": "A handle to the window that owns the dialog box.", "possible_constants": []}, {"name": "lpDialogFunc", "type": "DLGPROC", "description": "A pointer to the dialog box procedure. For more information about the dialog box procedure, see DialogProc.", "possible_constants": []}, {"name": "dwInitParam", "type": "LPARAM", "description": "The value to pass to the dialog box in the lParam parameter of the WM_INITDIALOG message.", "possible_constants": []}]}, {"name": "CreateDialogIndirectParamW", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createdialogindirectparamw", "description": "Creates a modeless dialog box from a dialog box template in memory. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the lParam parameter of the WM_INITDIALOG message. An application can use this value to initialize dialog box controls.", "parameters": [{"name": "hInstance", "type": "HINSTANCE", "description": "A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.", "possible_constants": []}, {"name": "lpTemplate", "type": "LPCDLGTEMPLATE", "description": "The template CreateDialogIndirectParam uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format.\nIn a standard template, the header is a DLGTEMPLATE structure followed by additional variable-length arrays. The data for each control consists of a DLGITEMTEMPLATE structure followed by additional variable-length arrays.\nIn an extended dialog box template, the header uses the DLGTEMPLATEEX format and the control definitions use the DLGITEMTEMPLATEEX format.\nAfter CreateDialogIndirectParam returns, you can free the template, which is only used to get the dialog box started.", "possible_constants": []}, {"name": "hWndParent", "type": "HWND", "description": "A handle to the window that owns the dialog box.", "possible_constants": []}, {"name": "lpDialogFunc", "type": "DLGPROC", "description": "A pointer to the dialog box procedure. For more information about the dialog box procedure, see DialogProc.", "possible_constants": []}, {"name": "dwInitParam", "type": "LPARAM", "description": "The value to pass to the dialog box in the lParam parameter of the WM_INITDIALOG message.", "possible_constants": []}]}, {"name": "CreateDialogIndirectW", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createdialogindirectw", "description": "Creates a modeless dialog box from a dialog box template in memory. The CreateDialogIndirect macro uses the CreateDialogIndirectParam function.", "parameters": [{"name": "hInstance", "type": "HINSTANCE", "description": "A handle to the module that creates the dialog box.", "possible_constants": []}, {"name": "lpTemplate", "type": "LPCDLGTEMPLATE", "description": "A template that CreateDialogIndirect uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format.\nIn a standard template, the header is a DLGTEMPLATE structure followed by additional variable-length arrays. The data for each control consists of a DLGITEMTEMPLATE structure followed by additional variable-length arrays.\nIn an extended dialog box template, the header uses the DLGTEMPLATEEX format and the control definitions use the DLGITEMTEMPLATEEX format.\nAfter CreateDialogIndirect returns, you can free the template, which is only used to get the dialog box started.", "possible_constants": []}, {"name": "hWndParent", "type": "HWND", "description": "A handle to the window that owns the dialog box.", "possible_constants": []}, {"name": "lpDialogFunc", "type": "DLGPROC", "description": "A pointer to the dialog box procedure. For more information about the dialog box procedure, see DialogProc.", "possible_constants": []}]}, {"name": "CreateDialogParamA", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createdialogparama", "description": "Creates a modeless dialog box from a dialog box template resource. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the lParam parameter of the WM_INITDIALOG message. An application can use this value to initialize dialog box controls.", "parameters": [{"name": "hInstance", "type": "HINSTANCE", "description": "A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.", "possible_constants": []}, {"name": "lpTemplateName", "type": "LPCTSTR", "description": "The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and low-order word must contain the identifier. You can use the MAKEINTRESOURCE macro to create this value.", "possible_constants": []}, {"name": "hWndParent", "type": "HWND", "description": "A handle to the window that owns the dialog box.", "possible_constants": []}, {"name": "lpDialogFunc", "type": "DLGPROC", "description": "A pointer to the dialog box procedure. For more information about the dialog box procedure, see DialogProc.", "possible_constants": []}, {"name": "dwInitParam", "type": "LPARAM", "description": "The value to be passed to the dialog box procedure in the lParam parameter in the WM_INITDIALOG message.", "possible_constants": []}]}, {"name": "CreateDialogParamW", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createdialogparamw", "description": "Creates a modeless dialog box from a dialog box template resource. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the lParam parameter of the WM_INITDIALOG message. An application can use this value to initialize dialog box controls.", "parameters": [{"name": "hInstance", "type": "HINSTANCE", "description": "A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.", "possible_constants": []}, {"name": "lpTemplateName", "type": "LPCTSTR", "description": "The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and low-order word must contain the identifier. You can use the MAKEINTRESOURCE macro to create this value.", "possible_constants": []}, {"name": "hWndParent", "type": "HWND", "description": "A handle to the window that owns the dialog box.", "possible_constants": []}, {"name": "lpDialogFunc", "type": "DLGPROC", "description": "A pointer to the dialog box procedure. For more information about the dialog box procedure, see DialogProc.", "possible_constants": []}, {"name": "dwInitParam", "type": "LPARAM", "description": "The value to be passed to the dialog box procedure in the lParam parameter in the WM_INITDIALOG message.", "possible_constants": []}]}, {"name": "CreateDialogW", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createdialogw", "description": "Creates a modeless dialog box from a dialog box template resource. The CreateDialog macro uses the CreateDialogParam function.", "parameters": [{"name": "hInstance", "type": "HINSTANCE", "description": "A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.", "possible_constants": []}, {"name": "lpName", "type": "LPCTSTR", "description": "The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and its low-order word must contain the identifier. You can use the MAKEINTRESOURCE macro to create this value.", "possible_constants": []}, {"name": "hWndParent", "type": "HWND", "description": "A handle to the window that owns the dialog box.", "possible_constants": []}, {"name": "lpDialogFunc", "type": "DLGPROC", "description": "A pointer to the dialog box procedure. For more information about the dialog box procedure, see DialogProc.", "possible_constants": []}]}, {"name": "CreateIcon", "return_type": "HICON", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createicon", "description": "Creates an icon that has the specified size, colors, and bit patterns.", "parameters": [{"name": "hInstance", "type": "HINSTANCE", "description": "A handle to the instance of the module creating the icon.", "possible_constants": []}, {"name": "nWidth", "type": "int", "description": "The width, in pixels, of the icon.", "possible_constants": []}, {"name": "nHeight", "type": "int", "description": "The height, in pixels, of the icon.", "possible_constants": []}, {"name": "cPlanes", "type": "BYTE", "description": "The number of planes in the XOR bitmask of the icon.", "possible_constants": []}, {"name": "cBitsPixel", "type": "BYTE", "description": "The number of bits-per-pixel in the XOR bitmask of the icon.", "possible_constants": []}, {"name": "lpbANDbits", "type": "const BYTE*", "description": "An array of bytes that contains the bit values for the AND bitmask of the icon. This bitmask describes a monochrome bitmap.", "possible_constants": []}, {"name": "lpbXORbits", "type": "const BYTE*", "description": "An array of bytes that contains the bit values for the XOR bitmask of the icon. This bitmask describes a monochrome or device-dependent color bitmap.", "possible_constants": []}]}, {"name": "CreateIconFromResource", "return_type": "HICON", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createiconfromresource", "description": "Creates an icon or cursor from resource bits describing the icon.", "parameters": [{"name": "presbits", "type": "PBYTE", "description": "The buffer containing the icon or cursor resource bits. These bits are typically loaded by calls to the LookupIconIdFromDirectory, LookupIconIdFromDirectoryEx, and LoadResource functions.", "possible_constants": []}, {"name": "dwResSize", "type": "DWORD", "description": "The size, in bytes, of the set of bits pointed to by the presbits parameter.", "possible_constants": []}, {"name": "fIcon", "type": "BOOL", "description": "Indicates whether an icon or a cursor is to be created. If this parameter is TRUE, an icon is to be created. If it is FALSE, a cursor is to be created.", "possible_constants": []}, {"name": "dwVer", "type": "DWORD", "description": "The version number of the icon or cursor format for the resource bits pointed to by the presbits parameter. The value must be greater than or equal to 0x00020000 and less than or equal to 0x00030000. This parameter is generally set to 0x00030000.", "possible_constants": []}]}, {"name": "CreateIconFromResourceEx", "return_type": "HICON", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createiconfromresourceex", "description": "Creates an icon or cursor from resource bits describing the icon.", "parameters": [{"name": "presbits", "type": "PBYTE", "description": "The icon or cursor resource bits. These bits are typically loaded by calls to the LookupIconIdFromDirectoryEx and LoadResource functions.", "possible_constants": []}, {"name": "dwResSize", "type": "DWORD", "description": "The size, in bytes, of the set of bits pointed to by the pbIconBits parameter.", "possible_constants": []}, {"name": "fIcon", "type": "BOOL", "description": "Indicates whether an icon or a cursor is to be created. If this parameter is TRUE, an icon is to be created. If it is FALSE, a cursor is to be created.", "possible_constants": []}, {"name": "dwVer", "type": "DWORD", "description": "The version number of the icon or cursor format for the resource bits pointed to by the pbIconBits parameter. The value must be greater than or equal to 0x00020000 and less than or equal to 0x00030000. This parameter is generally set to 0x00030000.", "possible_constants": []}, {"name": "cxDesired", "type": "int", "description": "The desired width, in pixels, of the icon or cursor. If this parameter is zero, the function uses the SM_CXICON or SM_CXCURSOR system metric value to set the width.", "possible_constants": []}, {"name": "cyDesired", "type": "int", "description": "The desired height, in pixels, of the icon or cursor. If this parameter is zero, the function uses the SM_CYICON or SM_CYCURSOR system metric value to set the height.", "possible_constants": []}, {"name": "Flags", "type": "UINT", "description": "A combination of the following values.", "possible_constants": [["LR_DEFAULTCOLOR", 0], ["LR_DEFAULTSIZE", 64], ["LR_MONOCHROME", 1], ["LR_SHARED", 32768]]}]}, {"name": "CreateIconIndirect", "return_type": "HICON", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createiconindirect", "description": "Creates an icon or cursor from an ICONINFO structure.", "parameters": [{"name": "piconinfo", "type": "PICONINFO", "description": "A pointer to an ICONINFO structure the function uses to create the icon or cursor.", "possible_constants": []}]}, {"name": "CreateMDIWindowA", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createmdiwindowa", "description": "Creates a multiple-document interface (MDI) child window.", "parameters": [{"name": "lpClassName", "type": "LPCTSTR", "description": "The window class of the MDI child window. The class name must have been registered by a call to the RegisterClassEx function.", "possible_constants": []}, {"name": "lpWindowName", "type": "LPCTSTR", "description": "The window name. The system displays the name in the title bar of the child window.", "possible_constants": []}, {"name": "dwStyle", "type": "DWORD", "description": "The style of the MDI child window. If the MDI client window is created with the MDIS_ALLCHILDSTYLES window style, this parameter can be any combination of the window styles listed in the Window Styles page. Otherwise, this parameter is limited to one or more of the following values.", "possible_constants": [["WS_MINIMIZE", 536870912], ["WS_MAXIMIZE", 16777216], ["WS_HSCROLL", 1048576], ["WS_VSCROLL", 2097152]]}, {"name": "X", "type": "int", "description": "The initial horizontal position, in client coordinates, of the MDI child window. If this parameter is CW_USEDEFAULT ((int)0x80000000), the MDI child window is assigned the default horizontal position.", "possible_constants": []}, {"name": "Y", "type": "int", "description": "The initial vertical position, in client coordinates, of the MDI child window. If this parameter is CW_USEDEFAULT, the MDI child window is assigned the default vertical position.", "possible_constants": []}, {"name": "nWidth", "type": "int", "description": "The initial width, in device units, of the MDI child window. If this parameter is CW_USEDEFAULT, the MDI child window is assigned the default width.", "possible_constants": []}, {"name": "nHeight", "type": "int", "description": "The initial height, in device units, of the MDI child window. If this parameter is set to CW_USEDEFAULT, the MDI child window is assigned the default height.", "possible_constants": []}, {"name": "hWndParent", "type": "HWND", "description": "A handle to the MDI client window that will be the parent of the new MDI child window.", "possible_constants": []}, {"name": "hInstance", "type": "HINSTANCE", "description": "A handle to the instance of the application creating the MDI child window.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "An application-defined value.", "possible_constants": []}]}, {"name": "CreateMDIWindowW", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createmdiwindoww", "description": "Creates a multiple-document interface (MDI) child window.", "parameters": [{"name": "lpClassName", "type": "LPCTSTR", "description": "The window class of the MDI child window. The class name must have been registered by a call to the RegisterClassEx function.", "possible_constants": []}, {"name": "lpWindowName", "type": "LPCTSTR", "description": "The window name. The system displays the name in the title bar of the child window.", "possible_constants": []}, {"name": "dwStyle", "type": "DWORD", "description": "The style of the MDI child window. If the MDI client window is created with the MDIS_ALLCHILDSTYLES window style, this parameter can be any combination of the window styles listed in the Window Styles page. Otherwise, this parameter is limited to one or more of the following values.", "possible_constants": [["WS_MINIMIZE", 536870912], ["WS_MAXIMIZE", 16777216], ["WS_HSCROLL", 1048576], ["WS_VSCROLL", 2097152]]}, {"name": "X", "type": "int", "description": "The initial horizontal position, in client coordinates, of the MDI child window. If this parameter is CW_USEDEFAULT ((int)0x80000000), the MDI child window is assigned the default horizontal position.", "possible_constants": []}, {"name": "Y", "type": "int", "description": "The initial vertical position, in client coordinates, of the MDI child window. If this parameter is CW_USEDEFAULT, the MDI child window is assigned the default vertical position.", "possible_constants": []}, {"name": "nWidth", "type": "int", "description": "The initial width, in device units, of the MDI child window. If this parameter is CW_USEDEFAULT, the MDI child window is assigned the default width.", "possible_constants": []}, {"name": "nHeight", "type": "int", "description": "The initial height, in device units, of the MDI child window. If this parameter is set to CW_USEDEFAULT, the MDI child window is assigned the default height.", "possible_constants": []}, {"name": "hWndParent", "type": "HWND", "description": "A handle to the MDI client window that will be the parent of the new MDI child window.", "possible_constants": []}, {"name": "hInstance", "type": "HINSTANCE", "description": "A handle to the instance of the application creating the MDI child window.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "An application-defined value.", "possible_constants": []}]}, {"name": "CreateMenu", "return_type": "HMENU", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createmenu", "description": "Creates a menu. The menu is initially empty, but it can be filled with menu items by using the InsertMenuItem, AppendMenu, and InsertMenu functions.", "parameters": []}, {"name": "CreatePopupMenu", "return_type": "HMENU", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createpopupmenu", "description": "Creates a drop-down menu, submenu, or shortcut menu. The menu is initially empty. You can insert or append menu items by using the InsertMenuItem function. You can also use the InsertMenu function to insert menu items and the AppendMenu function to append menu items.", "parameters": []}, {"name": "CreateSyntheticPointerDevice", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createsyntheticpointerdevice", "description": "Configures the pointer injection device for the calling application, and initializes the maximum number of simultaneous pointers that the app can inject.", "parameters": [{"name": "pointerType", "type": "", "description": "The pointer injection device type. Must be either PT_TOUCH or PT_PEN.", "possible_constants": []}, {"name": "maxCount", "type": "", "description": "The maximum number of contacts.\nFor PT_TOUCH this value must be greater than 0 and less than or equal to MAX_TOUCH_COUNT.\nFor PT_PEN this value must be 1.", "possible_constants": []}, {"name": "mode", "type": "", "description": "The contact visualization mode.", "possible_constants": []}]}, {"name": "CreateWindowA", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createwindowa", "description": "Creates an overlapped, pop-up, or child window. It specifies the window class, window title, window style, and (optionally) the initial position and size of the window. The function also specifies the window's parent or owner, if any, and the window's menu.", "parameters": [{"name": "lpClassName", "type": "LPCTSTR", "description": "A null-terminated string or a class atom created by a previous call to the RegisterClass or RegisterClassEx function. The atom must be in the low-order word of lpClassName; the high-order word must be zero. If lpClassName is a string, it specifies the window class name. The class name can be any name registered with RegisterClass or RegisterClassEx, provided that the module that registers the class is also the module that creates the window. The class name can also be any of the predefined system class names. For a list of system class names, see the Remarks section.", "possible_constants": []}, {"name": "lpWindowName", "type": "LPCTSTR", "description": "The window name. If the window style specifies a title bar, the window title pointed to by lpWindowName is displayed in the title bar. When using CreateWindow to create controls, such as buttons, check boxes, and static controls, use lpWindowName to specify the text of the control. When creating a static control with the SS_ICON style, use lpWindowName to specify the icon name or identifier. To specify an identifier, use the syntax \"#num\".", "possible_constants": []}, {"name": "dwStyle", "type": "DWORD", "description": "The style of the window being created. This parameter can be a combination of the window style values, plus the control styles indicated in the Remarks section.", "possible_constants": []}, {"name": "x", "type": "int", "description": "The initial horizontal position of the window. For an overlapped or pop-up window, the x parameter is the initial x-coordinate of the window's upper-left corner, in screen coordinates. For a child window, x is the x-coordinate of the upper-left corner of the window relative to the upper-left corner of the parent window's client area. If this parameter is set to CW_USEDEFAULT, the system selects the default position for the window's upper-left corner and ignores the y parameter. CW_USEDEFAULT is valid only for overlapped windows; if it is specified for a pop-up or child window, the x and y parameters are set to zero.", "possible_constants": []}, {"name": "y", "type": "int", "description": "The initial vertical position of the window. For an overlapped or pop-up window, the y parameter is the initial y-coordinate of the window's upper-left corner, in screen coordinates. For a child window, y is the initial y-coordinate of the upper-left corner of the child window relative to the upper-left corner of the parent window's client area. For a list box, y is the initial y-coordinate of the upper-left corner of the list box's client area relative to the upper-left corner of the parent window's client area.\nIf an overlapped window is created with the WS_VISIBLE style bit set and the x parameter is set to CW_USEDEFAULT, then the y parameter determines how the window is shown. If the y parameter is CW_USEDEFAULT, then the window manager calls ShowWindow with the SW_SHOW flag after the window has been created. If the y parameter is some other value, then the window manager calls ShowWindow with that value as the nCmdShow parameter.", "possible_constants": []}, {"name": "nWidth", "type": "int", "description": "The width, in device units, of the window. For overlapped windows, nWidth is either the window's width, in screen coordinates, or CW_USEDEFAULT. If nWidth is CW_USEDEFAULT, the system selects a default width and height for the window; the default width extends from the initial x-coordinate to the right edge of the screen, and the default height extends from the initial y-coordinate to the top of the icon area. CW_USEDEFAULT is valid only for overlapped windows; if CW_USEDEFAULT is specified for a pop-up or child window, nWidth and nHeight are set to zero.", "possible_constants": []}, {"name": "nHeight", "type": "int", "description": "The height, in device units, of the window. For overlapped windows, nHeight is the window's height, in screen coordinates. If nWidth is set to CW_USEDEFAULT, the system ignores nHeight.", "possible_constants": []}, {"name": "hWndParent", "type": "HWND", "description": "A handle to the parent or owner window of the window being created. To create a child window or an owned window, supply a valid window handle. This parameter is optional for pop-up windows.\nTo create a message-only window, supply HWND_MESSAGE or a handle to an existing message-only window.", "possible_constants": []}, {"name": "hMenu", "type": "HMENU", "description": "A handle to a menu, or specifies a child-window identifier depending on the window style. For an overlapped or pop-up window, hMenu identifies the menu to be used with the window; it can be NULL if the class menu is to be used. For a child window, hMenu specifies the child-window identifier, an integer value used by a dialog box control to notify its parent about events. The application determines the child-window identifier; it must be unique for all child windows with the same parent window.", "possible_constants": []}, {"name": "hInstance", "type": "HINSTANCE", "description": "A handle to the instance of the module to be associated with the window.", "possible_constants": []}, {"name": "lpParam", "type": "LPVOID", "description": "A pointer to a value to be passed to the window through the CREATESTRUCT structure (lpCreateParams member) pointed to by the lParam param of the WM_CREATE message.  This message is sent to the created window by this function before it returns.\nIf an application calls CreateWindow to create a MDI client window, lpParam should point to a CLIENTCREATESTRUCT structure. If an MDI client window calls CreateWindow to create an MDI child window, lpParam should point to a MDICREATESTRUCT structure. lpParam may be NULL if no additional data is needed.", "possible_constants": []}]}, {"name": "CreateWindowExA", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createwindowexa", "description": "Creates an overlapped, pop-up, or child window with an extended window style; otherwise, this function is identical to the CreateWindow function. For more information about creating a window and for full descriptions of the other parameters of CreateWindowEx, see CreateWindow.", "parameters": [{"name": "dwExStyle", "type": "DWORD", "description": "The extended window style of the window being created. For a list of possible values, see  Extended Window Styles.", "possible_constants": []}, {"name": "lpClassName", "type": "LPCTSTR", "description": "A null-terminated string or a class atom created by a previous call to the RegisterClass or RegisterClassEx function. The atom must be in the low-order word of lpClassName; the high-order word must be zero. If lpClassName is a string, it specifies the window class name. The class name can be any name registered with RegisterClass or RegisterClassEx, provided that the module that registers the class is also the module that creates the window. The class name can also be any of the predefined system class names.", "possible_constants": []}, {"name": "lpWindowName", "type": "LPCTSTR", "description": "The window name. If the window style specifies a title bar, the window title pointed to by lpWindowName is displayed in the title bar. When using CreateWindow to create controls, such as buttons, check boxes, and static controls, use lpWindowName to specify the text of the control. When creating a static control with the SS_ICON style, use lpWindowName to specify the icon name or identifier. To specify an identifier, use the syntax \"#num\".", "possible_constants": []}, {"name": "dwStyle", "type": "DWORD", "description": "The style of the window being created. This parameter can be a combination of the window style values, plus the control styles indicated in the Remarks section.", "possible_constants": []}, {"name": "X", "type": "int", "description": "The initial horizontal position of the window. For an overlapped or pop-up window, the x parameter is the initial x-coordinate of the window's upper-left corner, in screen coordinates. For a child window, x is the x-coordinate of the upper-left corner of the window relative to the upper-left corner of the parent window's client area. If x is set to CW_USEDEFAULT, the system selects the default position for the window's upper-left corner and ignores the y parameter. CW_USEDEFAULT is valid only for overlapped windows; if it is specified for a pop-up or child window, the x and y parameters are set to zero.", "possible_constants": []}, {"name": "Y", "type": "int", "description": "The initial vertical position of the window. For an overlapped or pop-up window, the y parameter is the initial y-coordinate of the window's upper-left corner, in screen coordinates. For a child window, y is the initial y-coordinate of the upper-left corner of the child window relative to the upper-left corner of the parent window's client area. For a list box y is the initial y-coordinate of the upper-left corner of the list box's client area relative to the upper-left corner of the parent window's client area.\nIf an overlapped window is created with the WS_VISIBLE style bit set and the x parameter is set to CW_USEDEFAULT, then the y parameter determines how the window is shown. If the y parameter is CW_USEDEFAULT, then the window manager calls ShowWindow with the SW_SHOW flag after the window has been created. If the y parameter is some other value, then the window manager calls ShowWindow with that value as the nCmdShow parameter.", "possible_constants": []}, {"name": "nWidth", "type": "int", "description": "The width, in device units, of the window. For overlapped windows, nWidth is the window's width, in screen coordinates, or CW_USEDEFAULT. If nWidth is CW_USEDEFAULT, the system selects a default width and height for the window; the default width extends from the initial x-coordinates to the right edge of the screen; the default height extends from the initial y-coordinate to the top of the icon area. CW_USEDEFAULT is valid only for overlapped windows; if CW_USEDEFAULT is specified for a pop-up or child window, the nWidth and nHeight parameter are set to zero.", "possible_constants": []}, {"name": "nHeight", "type": "int", "description": "The height, in device units, of the window. For overlapped windows, nHeight is the window's height, in screen coordinates. If the nWidth parameter is set to CW_USEDEFAULT, the system ignores nHeight.", "possible_constants": []}, {"name": "hWndParent", "type": "HWND", "description": "A handle to the parent or owner window of the window being created. To create a child window or an owned window, supply a valid window handle. This parameter is optional for pop-up windows.\nTo create a message-only window, supply HWND_MESSAGE or a handle to an existing message-only window.", "possible_constants": []}, {"name": "hMenu", "type": "HMENU", "description": "A handle to a menu, or specifies a child-window identifier, depending on the window style. For an overlapped or pop-up window, hMenu identifies the menu to be used with the window; it can be NULL if the class menu is to be used. For a child window, hMenu specifies the child-window identifier, an integer value used by a dialog box control to notify its parent about events. The application determines the child-window identifier; it must be unique for all child windows with the same parent window.", "possible_constants": []}, {"name": "hInstance", "type": "HINSTANCE", "description": "A handle to the instance of the module to be associated with the window.", "possible_constants": []}, {"name": "lpParam", "type": "LPVOID", "description": "Pointer to a value to be passed to the window through the CREATESTRUCT structure (lpCreateParams member) pointed to by the lParam param of the WM_CREATE message.  This message is sent to the created window by this function before it returns.\nIf an application calls CreateWindow to create a MDI client window, lpParam should point to a CLIENTCREATESTRUCT structure. If an MDI client window calls CreateWindow to create an MDI child window, lpParam should point to a MDICREATESTRUCT structure. lpParam may be NULL if no additional data is needed.", "possible_constants": []}]}, {"name": "CreateWindowExW", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createwindowexw", "description": "Creates an overlapped, pop-up, or child window with an extended window style; otherwise, this function is identical to the CreateWindow function. For more information about creating a window and for full descriptions of the other parameters of CreateWindowEx, see CreateWindow.", "parameters": [{"name": "dwExStyle", "type": "DWORD", "description": "The extended window style of the window being created. For a list of possible values, see  Extended Window Styles.", "possible_constants": []}, {"name": "lpClassName", "type": "LPCTSTR", "description": "A null-terminated string or a class atom created by a previous call to the RegisterClass or RegisterClassEx function. The atom must be in the low-order word of lpClassName; the high-order word must be zero. If lpClassName is a string, it specifies the window class name. The class name can be any name registered with RegisterClass or RegisterClassEx, provided that the module that registers the class is also the module that creates the window. The class name can also be any of the predefined system class names.", "possible_constants": []}, {"name": "lpWindowName", "type": "LPCTSTR", "description": "The window name. If the window style specifies a title bar, the window title pointed to by lpWindowName is displayed in the title bar. When using CreateWindow to create controls, such as buttons, check boxes, and static controls, use lpWindowName to specify the text of the control. When creating a static control with the SS_ICON style, use lpWindowName to specify the icon name or identifier. To specify an identifier, use the syntax \"#num\".", "possible_constants": []}, {"name": "dwStyle", "type": "DWORD", "description": "The style of the window being created. This parameter can be a combination of the window style values, plus the control styles indicated in the Remarks section.", "possible_constants": []}, {"name": "X", "type": "int", "description": "The initial horizontal position of the window. For an overlapped or pop-up window, the x parameter is the initial x-coordinate of the window's upper-left corner, in screen coordinates. For a child window, x is the x-coordinate of the upper-left corner of the window relative to the upper-left corner of the parent window's client area. If x is set to CW_USEDEFAULT, the system selects the default position for the window's upper-left corner and ignores the y parameter. CW_USEDEFAULT is valid only for overlapped windows; if it is specified for a pop-up or child window, the x and y parameters are set to zero.", "possible_constants": []}, {"name": "Y", "type": "int", "description": "The initial vertical position of the window. For an overlapped or pop-up window, the y parameter is the initial y-coordinate of the window's upper-left corner, in screen coordinates. For a child window, y is the initial y-coordinate of the upper-left corner of the child window relative to the upper-left corner of the parent window's client area. For a list box y is the initial y-coordinate of the upper-left corner of the list box's client area relative to the upper-left corner of the parent window's client area.\nIf an overlapped window is created with the WS_VISIBLE style bit set and the x parameter is set to CW_USEDEFAULT, then the y parameter determines how the window is shown. If the y parameter is CW_USEDEFAULT, then the window manager calls ShowWindow with the SW_SHOW flag after the window has been created. If the y parameter is some other value, then the window manager calls ShowWindow with that value as the nCmdShow parameter.", "possible_constants": []}, {"name": "nWidth", "type": "int", "description": "The width, in device units, of the window. For overlapped windows, nWidth is the window's width, in screen coordinates, or CW_USEDEFAULT. If nWidth is CW_USEDEFAULT, the system selects a default width and height for the window; the default width extends from the initial x-coordinates to the right edge of the screen; the default height extends from the initial y-coordinate to the top of the icon area. CW_USEDEFAULT is valid only for overlapped windows; if CW_USEDEFAULT is specified for a pop-up or child window, the nWidth and nHeight parameter are set to zero.", "possible_constants": []}, {"name": "nHeight", "type": "int", "description": "The height, in device units, of the window. For overlapped windows, nHeight is the window's height, in screen coordinates. If the nWidth parameter is set to CW_USEDEFAULT, the system ignores nHeight.", "possible_constants": []}, {"name": "hWndParent", "type": "HWND", "description": "A handle to the parent or owner window of the window being created. To create a child window or an owned window, supply a valid window handle. This parameter is optional for pop-up windows.\nTo create a message-only window, supply HWND_MESSAGE or a handle to an existing message-only window.", "possible_constants": []}, {"name": "hMenu", "type": "HMENU", "description": "A handle to a menu, or specifies a child-window identifier, depending on the window style. For an overlapped or pop-up window, hMenu identifies the menu to be used with the window; it can be NULL if the class menu is to be used. For a child window, hMenu specifies the child-window identifier, an integer value used by a dialog box control to notify its parent about events. The application determines the child-window identifier; it must be unique for all child windows with the same parent window.", "possible_constants": []}, {"name": "hInstance", "type": "HINSTANCE", "description": "A handle to the instance of the module to be associated with the window.", "possible_constants": []}, {"name": "lpParam", "type": "LPVOID", "description": "Pointer to a value to be passed to the window through the CREATESTRUCT structure (lpCreateParams member) pointed to by the lParam param of the WM_CREATE message.  This message is sent to the created window by this function before it returns.\nIf an application calls CreateWindow to create a MDI client window, lpParam should point to a CLIENTCREATESTRUCT structure. If an MDI client window calls CreateWindow to create an MDI child window, lpParam should point to a MDICREATESTRUCT structure. lpParam may be NULL if no additional data is needed.", "possible_constants": []}]}, {"name": "CreateWindowStationA", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createwindowstationa", "description": "Creates a window station object, associates it with the calling process, and assigns it to the current session.", "parameters": [{"name": "lpwinsta", "type": "", "description": "The name of the window station to be created. Window station names are case-insensitive and cannot contain backslash characters (\\). Only members of the Administrators group are allowed to specify a name. If lpwinsta is NULL or an empty string, the system forms a window station name using the logon session identifier for the calling process. To get this name, call the\nGetUserObjectInformation function.", "possible_constants": []}, {"name": "dwFlags", "type": "", "description": "If this parameter is CWF_CREATE_ONLY and the window station already exists, the call fails. If this flag is not specified and the window station already exists, the function succeeds and returns a new handle to the existing window station.\nWindows\u00c2\u00a0XP/2000:\u00c2\u00a0\u00c2\u00a0This parameter is reserved and must be zero.", "possible_constants": []}, {"name": "dwDesiredAccess", "type": "", "description": "The type of access the returned handle has to the window station. In addition, you can specify any of the standard access rights, such as READ_CONTROL or WRITE_DAC, and a combination of the window station-specific access rights. For more information, see Window Station Security and Access Rights.", "possible_constants": []}, {"name": "lpsa", "type": "", "description": "A pointer to a\nSECURITY_ATTRIBUTES structure that determines whether the returned handle can be inherited by child processes. If lpsa is NULL, the handle cannot be inherited.\nThe lpSecurityDescriptor member of the structure specifies a security descriptor for the new window station. If lpsa is NULL, the window station (and any desktops created within the window) gets a security descriptor that grants GENERIC_ALL access to all users.", "possible_constants": []}]}, {"name": "CreateWindowStationW", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createwindowstationw", "description": "Creates a window station object, associates it with the calling process, and assigns it to the current session.", "parameters": [{"name": "lpwinsta", "type": "", "description": "The name of the window station to be created. Window station names are case-insensitive and cannot contain backslash characters (\\). Only members of the Administrators group are allowed to specify a name. If lpwinsta is NULL or an empty string, the system forms a window station name using the logon session identifier for the calling process. To get this name, call the\nGetUserObjectInformation function.", "possible_constants": []}, {"name": "dwFlags", "type": "", "description": "If this parameter is CWF_CREATE_ONLY and the window station already exists, the call fails. If this flag is not specified and the window station already exists, the function succeeds and returns a new handle to the existing window station.\nWindows\u00c2\u00a0XP/2000:\u00c2\u00a0\u00c2\u00a0This parameter is reserved and must be zero.", "possible_constants": []}, {"name": "dwDesiredAccess", "type": "", "description": "The type of access the returned handle has to the window station. In addition, you can specify any of the standard access rights, such as READ_CONTROL or WRITE_DAC, and a combination of the window station-specific access rights. For more information, see Window Station Security and Access Rights.", "possible_constants": []}, {"name": "lpsa", "type": "", "description": "A pointer to a\nSECURITY_ATTRIBUTES structure that determines whether the returned handle can be inherited by child processes. If lpsa is NULL, the handle cannot be inherited.\nThe lpSecurityDescriptor member of the structure specifies a security descriptor for the new window station. If lpsa is NULL, the window station (and any desktops created within the window) gets a security descriptor that grants GENERIC_ALL access to all users.", "possible_constants": []}]}, {"name": "CreateWindowW", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createwindoww", "description": "Creates an overlapped, pop-up, or child window. It specifies the window class, window title, window style, and (optionally) the initial position and size of the window. The function also specifies the window's parent or owner, if any, and the window's menu.", "parameters": [{"name": "lpClassName", "type": "LPCTSTR", "description": "A null-terminated string or a class atom created by a previous call to the RegisterClass or RegisterClassEx function. The atom must be in the low-order word of lpClassName; the high-order word must be zero. If lpClassName is a string, it specifies the window class name. The class name can be any name registered with RegisterClass or RegisterClassEx, provided that the module that registers the class is also the module that creates the window. The class name can also be any of the predefined system class names. For a list of system class names, see the Remarks section.", "possible_constants": []}, {"name": "lpWindowName", "type": "LPCTSTR", "description": "The window name. If the window style specifies a title bar, the window title pointed to by lpWindowName is displayed in the title bar. When using CreateWindow to create controls, such as buttons, check boxes, and static controls, use lpWindowName to specify the text of the control. When creating a static control with the SS_ICON style, use lpWindowName to specify the icon name or identifier. To specify an identifier, use the syntax \"#num\".", "possible_constants": []}, {"name": "dwStyle", "type": "DWORD", "description": "The style of the window being created. This parameter can be a combination of the window style values, plus the control styles indicated in the Remarks section.", "possible_constants": []}, {"name": "x", "type": "int", "description": "The initial horizontal position of the window. For an overlapped or pop-up window, the x parameter is the initial x-coordinate of the window's upper-left corner, in screen coordinates. For a child window, x is the x-coordinate of the upper-left corner of the window relative to the upper-left corner of the parent window's client area. If this parameter is set to CW_USEDEFAULT, the system selects the default position for the window's upper-left corner and ignores the y parameter. CW_USEDEFAULT is valid only for overlapped windows; if it is specified for a pop-up or child window, the x and y parameters are set to zero.", "possible_constants": []}, {"name": "y", "type": "int", "description": "The initial vertical position of the window. For an overlapped or pop-up window, the y parameter is the initial y-coordinate of the window's upper-left corner, in screen coordinates. For a child window, y is the initial y-coordinate of the upper-left corner of the child window relative to the upper-left corner of the parent window's client area. For a list box, y is the initial y-coordinate of the upper-left corner of the list box's client area relative to the upper-left corner of the parent window's client area.\nIf an overlapped window is created with the WS_VISIBLE style bit set and the x parameter is set to CW_USEDEFAULT, then the y parameter determines how the window is shown. If the y parameter is CW_USEDEFAULT, then the window manager calls ShowWindow with the SW_SHOW flag after the window has been created. If the y parameter is some other value, then the window manager calls ShowWindow with that value as the nCmdShow parameter.", "possible_constants": []}, {"name": "nWidth", "type": "int", "description": "The width, in device units, of the window. For overlapped windows, nWidth is either the window's width, in screen coordinates, or CW_USEDEFAULT. If nWidth is CW_USEDEFAULT, the system selects a default width and height for the window; the default width extends from the initial x-coordinate to the right edge of the screen, and the default height extends from the initial y-coordinate to the top of the icon area. CW_USEDEFAULT is valid only for overlapped windows; if CW_USEDEFAULT is specified for a pop-up or child window, nWidth and nHeight are set to zero.", "possible_constants": []}, {"name": "nHeight", "type": "int", "description": "The height, in device units, of the window. For overlapped windows, nHeight is the window's height, in screen coordinates. If nWidth is set to CW_USEDEFAULT, the system ignores nHeight.", "possible_constants": []}, {"name": "hWndParent", "type": "HWND", "description": "A handle to the parent or owner window of the window being created. To create a child window or an owned window, supply a valid window handle. This parameter is optional for pop-up windows.\nTo create a message-only window, supply HWND_MESSAGE or a handle to an existing message-only window.", "possible_constants": []}, {"name": "hMenu", "type": "HMENU", "description": "A handle to a menu, or specifies a child-window identifier depending on the window style. For an overlapped or pop-up window, hMenu identifies the menu to be used with the window; it can be NULL if the class menu is to be used. For a child window, hMenu specifies the child-window identifier, an integer value used by a dialog box control to notify its parent about events. The application determines the child-window identifier; it must be unique for all child windows with the same parent window.", "possible_constants": []}, {"name": "hInstance", "type": "HINSTANCE", "description": "A handle to the instance of the module to be associated with the window.", "possible_constants": []}, {"name": "lpParam", "type": "LPVOID", "description": "A pointer to a value to be passed to the window through the CREATESTRUCT structure (lpCreateParams member) pointed to by the lParam param of the WM_CREATE message.  This message is sent to the created window by this function before it returns.\nIf an application calls CreateWindow to create a MDI client window, lpParam should point to a CLIENTCREATESTRUCT structure. If an MDI client window calls CreateWindow to create an MDI child window, lpParam should point to a MDICREATESTRUCT structure. lpParam may be NULL if no additional data is needed.", "possible_constants": []}]}, {"name": "DefDlgProcA", "return_type": "LRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-defdlgproca", "description": "Calls the default dialog box window procedure to provide default processing for any window messages that a dialog box with a private window class does not process.", "parameters": [{"name": "hDlg", "type": "HWND", "description": "A handle to the dialog box.", "possible_constants": []}, {"name": "Msg", "type": "UINT", "description": "The message.", "possible_constants": []}, {"name": "wParam", "type": "WPARAM", "description": "Additional message-specific information.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "Additional message-specific information.", "possible_constants": []}]}, {"name": "DefDlgProcW", "return_type": "LRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-defdlgprocw", "description": "Calls the default dialog box window procedure to provide default processing for any window messages that a dialog box with a private window class does not process.", "parameters": [{"name": "hDlg", "type": "HWND", "description": "A handle to the dialog box.", "possible_constants": []}, {"name": "Msg", "type": "UINT", "description": "The message.", "possible_constants": []}, {"name": "wParam", "type": "WPARAM", "description": "Additional message-specific information.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "Additional message-specific information.", "possible_constants": []}]}, {"name": "DeferWindowPos", "return_type": "HDWP", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-deferwindowpos", "description": "Updates the specified multiple-window\n\u00e2\u0080\u0093 position structure for the specified window. The function then returns a handle to the updated structure. The EndDeferWindowPos function uses the information in this structure to change the position and size of a number of windows simultaneously. The BeginDeferWindowPos function creates the structure.", "parameters": [{"name": "hWinPosInfo", "type": "HDWP", "description": "A handle to a multiple-window\n\u00e2\u0080\u0093 position structure that contains size and position information for one or more windows. This structure is returned by BeginDeferWindowPos or by the most recent call to DeferWindowPos.", "possible_constants": []}, {"name": "hWnd", "type": "HWND", "description": "A handle to the window for which update information is stored in the structure. All windows in a multiple-window\n\u00e2\u0080\u0093 position structure must have the same parent.", "possible_constants": []}, {"name": "hWndInsertAfter", "type": "HWND", "description": "A handle to the window that precedes the positioned window in the Z order. This parameter must be a window handle or one of the following values. This parameter is ignored if the SWP_NOZORDER flag is set in the uFlags parameter.", "possible_constants": [["HWND_BOTTOM", -1], ["HWND_NOTOPMOST", -1], ["HWND_TOP", -1], ["HWND_TOPMOST", -1]]}, {"name": "x", "type": "int", "description": "The x-coordinate of the window's upper-left corner.", "possible_constants": []}, {"name": "y", "type": "int", "description": "The y-coordinate of the window's upper-left corner.", "possible_constants": []}, {"name": "cx", "type": "int", "description": "The window's new width, in pixels.", "possible_constants": []}, {"name": "cy", "type": "int", "description": "The window's new height, in pixels.", "possible_constants": []}, {"name": "uFlags", "type": "UINT", "description": "A combination of the following values that affect the size and position of the window.", "possible_constants": [["SWP_DRAWFRAME", 32], ["SWP_FRAMECHANGED", 32], ["SWP_HIDEWINDOW", 128], ["SWP_NOACTIVATE", 16], ["SWP_NOCOPYBITS", 256], ["SWP_NOMOVE", 2], ["SWP_NOOWNERZORDER", 512], ["SWP_NOREDRAW", 8], ["SWP_NOREPOSITION", 512], ["SWP_NOSENDCHANGING", 1024], ["SWP_NOSIZE", 1], ["SWP_NOZORDER", 4], ["SWP_SHOWWINDOW", 64]]}]}, {"name": "DefFrameProcA", "return_type": "LRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-defframeproca", "description": "Provides default processing for any window messages that the window procedure of a multiple-document interface (MDI) frame window does not process. All window messages that are not explicitly processed by the window procedure must be passed to the DefFrameProc function, not the DefWindowProc function.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the MDI frame window.", "possible_constants": []}, {"name": "hWndMDIClient", "type": "HWND", "description": "A handle to the MDI client window.", "possible_constants": []}, {"name": "uMsg", "type": "UINT", "description": "The message to be processed.", "possible_constants": []}, {"name": "wParam", "type": "WPARAM", "description": "Additional message-specific information.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "Additional message-specific information.", "possible_constants": []}]}, {"name": "DefFrameProcW", "return_type": "LRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-defframeprocw", "description": "Provides default processing for any window messages that the window procedure of a multiple-document interface (MDI) frame window does not process. All window messages that are not explicitly processed by the window procedure must be passed to the DefFrameProc function, not the DefWindowProc function.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the MDI frame window.", "possible_constants": []}, {"name": "hWndMDIClient", "type": "HWND", "description": "A handle to the MDI client window.", "possible_constants": []}, {"name": "uMsg", "type": "UINT", "description": "The message to be processed.", "possible_constants": []}, {"name": "wParam", "type": "WPARAM", "description": "Additional message-specific information.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "Additional message-specific information.", "possible_constants": []}]}, {"name": "DefMDIChildProcA", "return_type": "LRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-defmdichildproca", "description": "Provides default processing for any window message that the window procedure of a multiple-document interface (MDI) child window does not process. A window message not processed by the window procedure must be passed to the DefMDIChildProc function, not to the DefWindowProc function.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the MDI child window.", "possible_constants": []}, {"name": "uMsg", "type": "UINT", "description": "The message to be processed.", "possible_constants": []}, {"name": "wParam", "type": "WPARAM", "description": "Additional message-specific information.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "Additional message-specific information.", "possible_constants": []}]}, {"name": "DefMDIChildProcW", "return_type": "LRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-defmdichildprocw", "description": "Provides default processing for any window message that the window procedure of a multiple-document interface (MDI) child window does not process. A window message not processed by the window procedure must be passed to the DefMDIChildProc function, not to the DefWindowProc function.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the MDI child window.", "possible_constants": []}, {"name": "uMsg", "type": "UINT", "description": "The message to be processed.", "possible_constants": []}, {"name": "wParam", "type": "WPARAM", "description": "Additional message-specific information.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "Additional message-specific information.", "possible_constants": []}]}, {"name": "DefRawInputProc", "return_type": "LRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-defrawinputproc", "description": "Unlike DefWindowProcA and DefWindowProcW, this function doesn't do any processing.", "parameters": [{"name": "paRawInput", "type": "PRAWINPUT*", "description": "Ignored.", "possible_constants": []}, {"name": "nInput", "type": "INT", "description": "Ignored.", "possible_constants": []}, {"name": "cbSizeHeader", "type": "UINT", "description": "The size, in bytes, of the RAWINPUTHEADER structure.", "possible_constants": []}]}, {"name": "DefWindowProcA", "return_type": "LRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-defwindowproca", "description": "Calls the default window procedure to provide default processing for any window messages that an application does not process. This function ensures that every message is processed. DefWindowProc is called with the same parameters received by the window procedure.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window procedure that received the message.", "possible_constants": []}, {"name": "Msg", "type": "UINT", "description": "The message.", "possible_constants": []}, {"name": "wParam", "type": "WPARAM", "description": "Additional message information. The content of this parameter depends on the value of the Msg parameter.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "Additional message information. The content of this parameter depends on the value of the Msg parameter.", "possible_constants": []}]}, {"name": "DefWindowProcW", "return_type": "LRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-defwindowprocw", "description": "Calls the default window procedure to provide default processing for any window messages that an application does not process. This function ensures that every message is processed. DefWindowProc is called with the same parameters received by the window procedure.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window procedure that received the message.", "possible_constants": []}, {"name": "Msg", "type": "UINT", "description": "The message.", "possible_constants": []}, {"name": "wParam", "type": "WPARAM", "description": "Additional message information. The content of this parameter depends on the value of the Msg parameter.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "Additional message information. The content of this parameter depends on the value of the Msg parameter.", "possible_constants": []}]}, {"name": "DeleteMenu", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-deletemenu", "description": "Deletes an item from the specified menu. If the menu item opens a menu or submenu, this function destroys the handle to the menu or submenu and frees the memory used by the menu or submenu.", "parameters": [{"name": "hMenu", "type": "HMENU", "description": "A handle to the menu to be changed.", "possible_constants": []}, {"name": "uPosition", "type": "UINT", "description": "The menu item to be deleted, as determined by the uFlags parameter.", "possible_constants": []}, {"name": "uFlags", "type": "UINT", "description": "Indicates how the uPosition parameter is interpreted. This parameter must be one of the following values.", "possible_constants": [["MF_BYCOMMAND", 0], ["MF_BYPOSITION", 1024]]}]}, {"name": "DeregisterShellHookWindow", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-deregistershellhookwindow", "description": "[This function is not intended for general\n      use. It may\n      be altered or unavailable in subsequent versions of Windows.]\nUnregisters a specified Shell window that is registered to receive Shell\nhook messages.\nSyntax\nBOOL DeregisterShellHookWindow(\n  HWND hwnd\n);\n\nParameters\nhwnd\nType: HWND\nA handle to the window to be unregistered. The window was registered with a call to the\nRegisterShellHookWindow function.\nReturn value\nType: BOOL\nTRUE if the function succeeds; FALSE if the\nfunction fails.\nRemarks\nThis function was not included in the SDK headers and libraries until Windows\u00c2\u00a0XP with Service Pack\u00c2\u00a01 (SP1) and Windows Server\u00c2\u00a02003. If you do not have a header file and import library for this function, you can call the function using LoadLibrary and GetProcAddress.\nRequirements\n\n\n\n\u00c2\u00a0\n\u00c2\u00a0\n\n\n\n\nMinimum supported client\nWindows\u00c2\u00a02000 Professional [desktop apps only]\n\n\nMinimum supported server\nWindows\u00c2\u00a02000 Server [desktop apps only]\n\n\nTarget Platform\nWindows\n\n\nHeader\nwinuser.h (include Windows.h)\n\n\nLibrary\nUser32.lib\n\n\nDLL\nUser32.dll\n\n\n\nSee also\nConceptual\nReference\nRegisterShellHookWindow\nWindows", "parameters": [{"name": "hwnd", "type": "HWND", "description": "A handle to the window to be unregistered. The window was registered with a call to the\nRegisterShellHookWindow function.", "possible_constants": []}]}, {"name": "DestroyAcceleratorTable", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-destroyacceleratortable", "description": "Destroys an accelerator table.", "parameters": [{"name": "hAccel", "type": "HACCEL", "description": "A handle to the accelerator table to be destroyed. This handle must have been created by a call to the CreateAcceleratorTable or LoadAccelerators function.", "possible_constants": []}]}, {"name": "DestroyCaret", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-destroycaret", "description": "Destroys the caret's current shape, frees the caret from the window, and removes the caret from the screen.", "parameters": []}, {"name": "DestroyCursor", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-destroycursor", "description": "Destroys a cursor and frees any memory the cursor occupied. Do not use this function to destroy a shared cursor.", "parameters": [{"name": "hCursor", "type": "HCURSOR", "description": "A handle to the cursor to be destroyed. The cursor must not be in use.", "possible_constants": []}]}, {"name": "DestroyIcon", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-destroyicon", "description": "Destroys an icon and frees any memory the icon occupied.", "parameters": [{"name": "hIcon", "type": "HICON", "description": "A handle to the icon to be destroyed. The icon must not be in use.", "possible_constants": []}]}, {"name": "DestroyMenu", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-destroymenu", "description": "Destroys the specified menu and frees any memory that the menu occupies.", "parameters": [{"name": "hMenu", "type": "HMENU", "description": "A handle to the menu to be destroyed.", "possible_constants": []}]}, {"name": "DestroySyntheticPointerDevice", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-destroysyntheticpointerdevice", "description": "Destroys the specified pointer injection device.", "parameters": [{"name": "device", "type": "", "description": "A handle to the pointer injection device.", "possible_constants": []}]}, {"name": "DestroyWindow", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-destroywindow", "description": "Destroys the specified window. The function sends WM_DESTROY and WM_NCDESTROY messages to the window to deactivate it and remove the keyboard focus from it. The function also destroys the window's menu, flushes the thread message queue, destroys timers, removes clipboard ownership, and breaks the clipboard viewer chain (if the window is at the top of the viewer chain).", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window to be destroyed.", "possible_constants": []}]}, {"name": "DialogBoxA", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dialogboxa", "description": "Creates a modal dialog box from a dialog box template resource. DialogBox does not return control until the specified callback function terminates the modal dialog box by calling the EndDialog function.", "parameters": [{"name": "hInstance", "type": "HINSTANCE", "description": "A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.", "possible_constants": []}, {"name": "lpTemplate", "type": "LPCTSTR", "description": "The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and its low-order word must contain the identifier. You can use the MAKEINTRESOURCE macro to create this value.", "possible_constants": []}, {"name": "hWndParent", "type": "HWND", "description": "A handle to the window that owns the dialog box.", "possible_constants": []}, {"name": "lpDialogFunc", "type": "DLGPROC", "description": "A pointer to the dialog box procedure. For more information about the dialog box procedure, see DialogProc.", "possible_constants": []}]}, {"name": "DialogBoxIndirectA", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dialogboxindirecta", "description": "Creates a modal dialog box from a dialog box template in memory. DialogBoxIndirect does not return control until the specified callback function terminates the modal dialog box by calling the EndDialog function.", "parameters": [{"name": "hInstance", "type": "HINSTANCE", "description": "A handle to the module that creates the dialog box.", "possible_constants": []}, {"name": "lpTemplate", "type": "LPCDLGTEMPLATE", "description": "The template that DialogBoxIndirect uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format.\nIn a standard template for a dialog box, the header is a DLGTEMPLATE structure followed by additional variable-length arrays. The data for each control consists of a DLGITEMTEMPLATE structure followed by additional variable-length arrays.\nIn an extended template for a dialog box, the header uses the DLGTEMPLATEEX format and the control definitions use the DLGITEMTEMPLATEEX format.", "possible_constants": []}, {"name": "hWndParent", "type": "HWND", "description": "A handle to the window that owns the dialog box.", "possible_constants": []}, {"name": "lpDialogFunc", "type": "DLGPROC", "description": "A pointer to the dialog box procedure. For more information about the dialog box procedure, see DialogProc.", "possible_constants": []}]}, {"name": "DialogBoxIndirectParamA", "return_type": "INT_PTR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dialogboxindirectparama", "description": "Creates a modal dialog box from a dialog box template in memory. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the lParam parameter of the WM_INITDIALOG message. An application can use this value to initialize dialog box controls.", "parameters": [{"name": "hInstance", "type": "HINSTANCE", "description": "A handle to the module that creates the dialog box.", "possible_constants": []}, {"name": "hDialogTemplate", "type": "LPCDLGTEMPLATE", "description": "The template that DialogBoxIndirectParam uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format.\nIn a standard template for a dialog box, the header is a DLGTEMPLATE structure followed by additional variable-length arrays. The data for each control consists of a DLGITEMTEMPLATE structure followed by additional variable-length arrays.\nIn an extended template for a dialog box, the header uses the DLGTEMPLATEEX format and the control definitions use the DLGITEMTEMPLATEEX format.", "possible_constants": []}, {"name": "hWndParent", "type": "HWND", "description": "A handle to the window that owns the dialog box.", "possible_constants": []}, {"name": "lpDialogFunc", "type": "DLGPROC", "description": "A pointer to the dialog box procedure. For more information about the dialog box procedure, see DialogProc.", "possible_constants": []}, {"name": "dwInitParam", "type": "LPARAM", "description": "The value to pass to the dialog box in the lParam parameter of the WM_INITDIALOG message.", "possible_constants": []}]}, {"name": "DialogBoxIndirectParamW", "return_type": "INT_PTR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dialogboxindirectparamw", "description": "Creates a modal dialog box from a dialog box template in memory. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the lParam parameter of the WM_INITDIALOG message. An application can use this value to initialize dialog box controls.", "parameters": [{"name": "hInstance", "type": "HINSTANCE", "description": "A handle to the module that creates the dialog box.", "possible_constants": []}, {"name": "hDialogTemplate", "type": "LPCDLGTEMPLATE", "description": "The template that DialogBoxIndirectParam uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format.\nIn a standard template for a dialog box, the header is a DLGTEMPLATE structure followed by additional variable-length arrays. The data for each control consists of a DLGITEMTEMPLATE structure followed by additional variable-length arrays.\nIn an extended template for a dialog box, the header uses the DLGTEMPLATEEX format and the control definitions use the DLGITEMTEMPLATEEX format.", "possible_constants": []}, {"name": "hWndParent", "type": "HWND", "description": "A handle to the window that owns the dialog box.", "possible_constants": []}, {"name": "lpDialogFunc", "type": "DLGPROC", "description": "A pointer to the dialog box procedure. For more information about the dialog box procedure, see DialogProc.", "possible_constants": []}, {"name": "dwInitParam", "type": "LPARAM", "description": "The value to pass to the dialog box in the lParam parameter of the WM_INITDIALOG message.", "possible_constants": []}]}, {"name": "DialogBoxIndirectW", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dialogboxindirectw", "description": "Creates a modal dialog box from a dialog box template in memory. DialogBoxIndirect does not return control until the specified callback function terminates the modal dialog box by calling the EndDialog function.", "parameters": [{"name": "hInstance", "type": "HINSTANCE", "description": "A handle to the module that creates the dialog box.", "possible_constants": []}, {"name": "lpTemplate", "type": "LPCDLGTEMPLATE", "description": "The template that DialogBoxIndirect uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format.\nIn a standard template for a dialog box, the header is a DLGTEMPLATE structure followed by additional variable-length arrays. The data for each control consists of a DLGITEMTEMPLATE structure followed by additional variable-length arrays.\nIn an extended template for a dialog box, the header uses the DLGTEMPLATEEX format and the control definitions use the DLGITEMTEMPLATEEX format.", "possible_constants": []}, {"name": "hWndParent", "type": "HWND", "description": "A handle to the window that owns the dialog box.", "possible_constants": []}, {"name": "lpDialogFunc", "type": "DLGPROC", "description": "A pointer to the dialog box procedure. For more information about the dialog box procedure, see DialogProc.", "possible_constants": []}]}, {"name": "DialogBoxParamA", "return_type": "INT_PTR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dialogboxparama", "description": "Creates a modal dialog box from a dialog box template resource. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the lParam parameter of the WM_INITDIALOG message. An application can use this value to initialize dialog box controls.", "parameters": [{"name": "hInstance", "type": "HINSTANCE", "description": "A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.", "possible_constants": []}, {"name": "lpTemplateName", "type": "LPCTSTR", "description": "The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and its low-order word must contain the identifier. You can use the MAKEINTRESOURCE macro to create this value.", "possible_constants": []}, {"name": "hWndParent", "type": "HWND", "description": "A handle to the window that owns the dialog box.", "possible_constants": []}, {"name": "lpDialogFunc", "type": "DLGPROC", "description": "A pointer to the dialog box procedure. For more information about the dialog box procedure, see DialogProc.", "possible_constants": []}, {"name": "dwInitParam", "type": "LPARAM", "description": "The value to pass to the dialog box in the lParam parameter of the WM_INITDIALOG message.", "possible_constants": []}]}, {"name": "DialogBoxParamW", "return_type": "INT_PTR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dialogboxparamw", "description": "Creates a modal dialog box from a dialog box template resource. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the lParam parameter of the WM_INITDIALOG message. An application can use this value to initialize dialog box controls.", "parameters": [{"name": "hInstance", "type": "HINSTANCE", "description": "A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.", "possible_constants": []}, {"name": "lpTemplateName", "type": "LPCTSTR", "description": "The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and its low-order word must contain the identifier. You can use the MAKEINTRESOURCE macro to create this value.", "possible_constants": []}, {"name": "hWndParent", "type": "HWND", "description": "A handle to the window that owns the dialog box.", "possible_constants": []}, {"name": "lpDialogFunc", "type": "DLGPROC", "description": "A pointer to the dialog box procedure. For more information about the dialog box procedure, see DialogProc.", "possible_constants": []}, {"name": "dwInitParam", "type": "LPARAM", "description": "The value to pass to the dialog box in the lParam parameter of the WM_INITDIALOG message.", "possible_constants": []}]}, {"name": "DialogBoxW", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dialogboxw", "description": "Creates a modal dialog box from a dialog box template resource. DialogBox does not return control until the specified callback function terminates the modal dialog box by calling the EndDialog function.", "parameters": [{"name": "hInstance", "type": "HINSTANCE", "description": "A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.", "possible_constants": []}, {"name": "lpTemplate", "type": "LPCTSTR", "description": "The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and its low-order word must contain the identifier. You can use the MAKEINTRESOURCE macro to create this value.", "possible_constants": []}, {"name": "hWndParent", "type": "HWND", "description": "A handle to the window that owns the dialog box.", "possible_constants": []}, {"name": "lpDialogFunc", "type": "DLGPROC", "description": "A pointer to the dialog box procedure. For more information about the dialog box procedure, see DialogProc.", "possible_constants": []}]}, {"name": "DisableProcessWindowsGhosting", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-disableprocesswindowsghosting", "description": "Disables the window ghosting feature for the calling GUI process. Window ghosting is a Windows Manager feature that lets the user minimize, move, or close the main window of an application that is not responding.", "parameters": []}, {"name": "DispatchMessage", "return_type": "LRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dispatchmessage", "description": "Dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the GetMessage function.", "parameters": [{"name": "lpMsg", "type": "const MSG*", "description": "A pointer to a structure that contains the message.", "possible_constants": []}]}, {"name": "DispatchMessageA", "return_type": "LRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dispatchmessagea", "description": "Dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the GetMessage function.", "parameters": [{"name": "lpMsg", "type": "const MSG*", "description": "A pointer to a structure that contains the message.", "possible_constants": []}]}, {"name": "DispatchMessageW", "return_type": "LRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dispatchmessagew", "description": "Dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the GetMessage function.", "parameters": [{"name": "lpMsg", "type": "const MSG*", "description": "A pointer to a structure that contains the message.", "possible_constants": []}]}, {"name": "DisplayConfigGetDeviceInfo", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-displayconfiggetdeviceinfo", "description": "The DisplayConfigGetDeviceInfo function retrieves display configuration information about the device.", "parameters": [{"name": "requestPacket", "type": "", "description": "A pointer to a DISPLAYCONFIG_DEVICE_INFO_HEADER structure. This structure contains information about the request, which includes the packet type in the type member. The type and size of additional data that DisplayConfigGetDeviceInfo returns after the header structure depend on the packet type.", "possible_constants": []}]}, {"name": "DisplayConfigSetDeviceInfo", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-displayconfigsetdeviceinfo", "description": "The DisplayConfigSetDeviceInfo function sets the properties of a target.", "parameters": [{"name": "setPacket", "type": "", "description": "A pointer to a DISPLAYCONFIG_DEVICE_INFO_HEADER structure that contains information to set for the device. The type and size of additional data that DisplayConfigSetDeviceInfo uses for the configuration comes after the header structure. This additional data depends on the packet type, as specified by the type member of DISPLAYCONFIG_DEVICE_INFO_HEADER. For example, if the caller wants to change the boot persistence, that caller allocates and fills a DISPLAYCONFIG_SET_TARGET_PERSISTENCE structure and passes a pointer to this structure in setPacket. Note that the first member of the DISPLAYCONFIG_SET_TARGET_PERSISTENCE structure is the DISPLAYCONFIG_DEVICE_INFO_HEADER.", "possible_constants": []}]}, {"name": "DlgDirListA", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dlgdirlista", "description": "Replaces the contents of a list box with the names of the subdirectories and files in a specified directory. You can filter the list of names by specifying a set of file attributes. The list can optionally include mapped drives.", "parameters": [{"name": "hDlg", "type": "HWND", "description": "A handle to the dialog box that contains the list box.", "possible_constants": []}, {"name": "lpPathSpec", "type": "LPTSTR", "description": "A pointer to a buffer containing a null-terminated string that specifies an absolute path, relative path, or filename. An absolute path can begin with a drive letter (for example, d:) or a UNC name (for example, \\<i>machinename\\sharename).\nThe function splits the string into a directory and a filename. The function searches the directory for names that match the filename. If the string does not specify a directory, the function searches the current directory.\nIf the string includes a filename, the filename must contain at least one wildcard character (? or *). If the string does not include a filename, the function behaves as if you had specified the asterisk wildcard character (*) as the filename. All names in the specified directory that match the filename and have the attributes specified by the uFileType parameter are added to the list box.", "possible_constants": []}, {"name": "nIDListBox", "type": "int", "description": "The identifier of a list box in the hDlg dialog box. If this parameter is zero, DlgDirList does not try to fill a list box.", "possible_constants": []}, {"name": "nIDStaticPath", "type": "int", "description": "The identifier of a static control in the hDlg dialog box. DlgDirList sets the text of this control to display the current drive and directory. This parameter can be zero if you do not want to display the current drive and directory.", "possible_constants": []}, {"name": "uFileType", "type": "UINT", "description": "Specifies the attributes of the files or directories to be added to the list box. This parameter can be one or more of the following values.", "possible_constants": [["DDL_ARCHIVE", -1], ["DDL_DIRECTORY", -1], ["DDL_DRIVES", -1], ["DDL_EXCLUSIVE", -1], ["DDL_HIDDEN", -1], ["DDL_READONLY", -1], ["DDL_READWRITE", -1], ["DDL_SYSTEM", -1], ["DDL_POSTMSGS", -1]]}]}, {"name": "DlgDirListComboBoxA", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dlgdirlistcomboboxa", "description": "Replaces the contents of a combo box with the names of the subdirectories and files in a specified directory. You can filter the list of names by specifying a set of file attributes. The list of names can include mapped drive letters.", "parameters": [{"name": "hDlg", "type": "HWND", "description": "A handle to the dialog box that contains the combo box.", "possible_constants": []}, {"name": "lpPathSpec", "type": "LPTSTR", "description": "A pointer to a buffer containing a null-terminated string that specifies an absolute path, relative path, or file name. An absolute path can begin with a drive letter (for example, d:) or a UNC name (for example, \\\\machinename\\sharename).\nThe function splits the string into a directory and a file name. The function searches the directory for names that match the file name. If the string does not specify a directory, the function searches the current directory.\nIf the string includes a file name, the file name must contain at least one wildcard character (? or ). If the string does not include a file name, the function behaves as if you had specified the asterisk wildcard character () as the file name. All names in the specified directory that match the file name and have the attributes specified by the uFiletype parameter are added to the list displayed in the combo box.", "possible_constants": []}, {"name": "nIDComboBox", "type": "int", "description": "The identifier of a combo box in the hDlg dialog box. If this parameter is zero, DlgDirListComboBox does not try to fill a combo box.", "possible_constants": []}, {"name": "nIDStaticPath", "type": "int", "description": "The identifier of a static control in the hDlg dialog box. DlgDirListComboBox sets the text of this control to display the current drive and directory. This parameter can be zero if you do not want to display the current drive and directory.", "possible_constants": []}, {"name": "uFiletype", "type": "UINT", "description": "A set of bit flags that specifies the attributes of the files or directories to be added to the combo box. This parameter can be a combination of the following values.", "possible_constants": [["DDL_ARCHIVE", -1], ["DDL_DIRECTORY", -1], ["DDL_DRIVES", -1], ["DDL_EXCLUSIVE", -1], ["DDL_HIDDEN", -1], ["DDL_READONLY", -1], ["DDL_READWRITE", -1], ["DDL_SYSTEM", -1], ["DDL_POSTMSGS", -1]]}]}, {"name": "DlgDirListComboBoxW", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dlgdirlistcomboboxw", "description": "Replaces the contents of a combo box with the names of the subdirectories and files in a specified directory. You can filter the list of names by specifying a set of file attributes. The list of names can include mapped drive letters.", "parameters": [{"name": "hDlg", "type": "HWND", "description": "A handle to the dialog box that contains the combo box.", "possible_constants": []}, {"name": "lpPathSpec", "type": "LPTSTR", "description": "A pointer to a buffer containing a null-terminated string that specifies an absolute path, relative path, or file name. An absolute path can begin with a drive letter (for example, d:) or a UNC name (for example, \\\\machinename\\sharename).\nThe function splits the string into a directory and a file name. The function searches the directory for names that match the file name. If the string does not specify a directory, the function searches the current directory.\nIf the string includes a file name, the file name must contain at least one wildcard character (? or ). If the string does not include a file name, the function behaves as if you had specified the asterisk wildcard character () as the file name. All names in the specified directory that match the file name and have the attributes specified by the uFiletype parameter are added to the list displayed in the combo box.", "possible_constants": []}, {"name": "nIDComboBox", "type": "int", "description": "The identifier of a combo box in the hDlg dialog box. If this parameter is zero, DlgDirListComboBox does not try to fill a combo box.", "possible_constants": []}, {"name": "nIDStaticPath", "type": "int", "description": "The identifier of a static control in the hDlg dialog box. DlgDirListComboBox sets the text of this control to display the current drive and directory. This parameter can be zero if you do not want to display the current drive and directory.", "possible_constants": []}, {"name": "uFiletype", "type": "UINT", "description": "A set of bit flags that specifies the attributes of the files or directories to be added to the combo box. This parameter can be a combination of the following values.", "possible_constants": [["DDL_ARCHIVE", -1], ["DDL_DIRECTORY", -1], ["DDL_DRIVES", -1], ["DDL_EXCLUSIVE", -1], ["DDL_HIDDEN", -1], ["DDL_READONLY", -1], ["DDL_READWRITE", -1], ["DDL_SYSTEM", -1], ["DDL_POSTMSGS", -1]]}]}, {"name": "DlgDirListW", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dlgdirlistw", "description": "Replaces the contents of a list box with the names of the subdirectories and files in a specified directory. You can filter the list of names by specifying a set of file attributes. The list can optionally include mapped drives.", "parameters": [{"name": "hDlg", "type": "HWND", "description": "A handle to the dialog box that contains the list box.", "possible_constants": []}, {"name": "lpPathSpec", "type": "LPTSTR", "description": "A pointer to a buffer containing a null-terminated string that specifies an absolute path, relative path, or filename. An absolute path can begin with a drive letter (for example, d:) or a UNC name (for example, \\\nmachinename\nsharename).\nThe function splits the string into a directory and a filename. The function searches the directory for names that match the filename. If the string does not specify a directory, the function searches the current directory.\nIf the string includes a filename, the filename must contain at least one wildcard character (? or ). If the string does not include a filename, the function behaves as if you had specified the asterisk wildcard character () as the filename. All names in the specified directory that match the filename and have the attributes specified by the\nuFileType parameter are added to the list box.", "possible_constants": []}, {"name": "nIDListBox", "type": "int", "description": "The identifier of a list box in the\nhDlg dialog box. If this parameter is zero, DlgDirList does not try to fill a list box.", "possible_constants": []}, {"name": "nIDStaticPath", "type": "int", "description": "The identifier of a static control in the\nhDlg dialog box. DlgDirList sets the text of this control to display the current drive and directory. This parameter can be zero if you do not want to display the current drive and directory.", "possible_constants": []}, {"name": "uFileType", "type": "UINT", "description": "Specifies the attributes of the files or directories to be added to the list box. This parameter can be one or more of the following values.", "possible_constants": [["DDL_ARCHIVE", -1], ["DDL_DIRECTORY", -1], ["DDL_DRIVES", -1], ["DDL_EXCLUSIVE", -1], ["DDL_HIDDEN", -1], ["DDL_READONLY", -1], ["DDL_READWRITE", -1], ["DDL_SYSTEM", -1], ["DDL_POSTMSGS", -1]]}]}, {"name": "DlgDirSelectComboBoxExA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dlgdirselectcomboboxexa", "description": "Retrieves the current selection from a combo box filled by using the DlgDirListComboBox function. The selection is interpreted as a drive letter, a file, or a directory name.", "parameters": [{"name": "hwndDlg", "type": "HWND", "description": "A handle to the dialog box that contains the combo box.", "possible_constants": []}, {"name": "lpString", "type": "LPTSTR", "description": "A pointer to the buffer that receives the selected path.", "possible_constants": []}, {"name": "cchOut", "type": "int", "description": "The length, in characters, of the buffer pointed to by the lpString parameter.", "possible_constants": []}, {"name": "idComboBox", "type": "int", "description": "The integer identifier of the combo box control in the dialog box.", "possible_constants": []}]}, {"name": "DlgDirSelectComboBoxExW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dlgdirselectcomboboxexw", "description": "Retrieves the current selection from a combo box filled by using the DlgDirListComboBox function. The selection is interpreted as a drive letter, a file, or a directory name.", "parameters": [{"name": "hwndDlg", "type": "HWND", "description": "A handle to the dialog box that contains the combo box.", "possible_constants": []}, {"name": "lpString", "type": "LPTSTR", "description": "A pointer to the buffer that receives the selected path.", "possible_constants": []}, {"name": "cchOut", "type": "int", "description": "The length, in characters, of the buffer pointed to by the lpString parameter.", "possible_constants": []}, {"name": "idComboBox", "type": "int", "description": "The integer identifier of the combo box control in the dialog box.", "possible_constants": []}]}, {"name": "DlgDirSelectExA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dlgdirselectexa", "description": "Retrieves the current selection from a single-selection list box. It assumes that the list box has been filled by the DlgDirList function and that the selection is a drive letter, filename, or directory name.", "parameters": [{"name": "hwndDlg", "type": "HWND", "description": "A handle to the dialog box that contains the list box.", "possible_constants": []}, {"name": "lpString", "type": "LPTSTR", "description": "A pointer to a buffer that receives the selected path.", "possible_constants": []}, {"name": "chCount", "type": "int", "description": "The length, in\nTCHARs, of the buffer pointed to by\nlpString.", "possible_constants": []}, {"name": "idListBox", "type": "int", "description": "The identifier of a list box in the dialog box.", "possible_constants": []}]}, {"name": "DlgDirSelectExW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dlgdirselectexw", "description": "Retrieves the current selection from a single-selection list box. It assumes that the list box has been filled by the DlgDirList function and that the selection is a drive letter, filename, or directory name.", "parameters": [{"name": "hwndDlg", "type": "HWND", "description": "A handle to the dialog box that contains the list box.", "possible_constants": []}, {"name": "lpString", "type": "LPTSTR", "description": "A pointer to a buffer that receives the selected path.", "possible_constants": []}, {"name": "chCount", "type": "int", "description": "The length, in\nTCHARs, of the buffer pointed to by\nlpString.", "possible_constants": []}, {"name": "idListBox", "type": "int", "description": "The identifier of a list box in the dialog box.", "possible_constants": []}]}, {"name": "DragDetect", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dragdetect", "description": "Captures the mouse and tracks its movement until the user releases the left button, presses the ESC key, or moves the mouse outside the drag rectangle around the specified point. The width and height of the drag rectangle are specified by the SM_CXDRAG and SM_CYDRAG values returned by the GetSystemMetrics function.", "parameters": [{"name": "hwnd", "type": "HWND", "description": "A handle to the window receiving mouse input.", "possible_constants": []}, {"name": "pt", "type": "POINT", "description": "Initial position of the mouse, in screen coordinates. The function determines the coordinates of the drag rectangle by using this point.", "possible_constants": []}]}, {"name": "DrawAnimatedRects", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-drawanimatedrects", "description": "Animates the caption of a window to indicate the opening of an icon or the minimizing or maximizing of a window.", "parameters": [{"name": "hwnd", "type": "", "description": "A handle to the window whose caption should be animated on the screen. The animation will be clipped to the parent of this window.", "possible_constants": []}, {"name": "idAni", "type": "", "description": "The type of animation. This must be IDANI_CAPTION. With the IDANI_CAPTION animation type, the window caption will animate from the position specified by lprcFrom to the position specified by lprcTo. The effect is similar to minimizing or maximizing a window.", "possible_constants": []}, {"name": "lprcFrom", "type": "", "description": "A pointer to a RECT structure specifying the location and size of the icon or minimized window. Coordinates are relative to the clipping window hwnd.", "possible_constants": []}, {"name": "lprcTo", "type": "", "description": "A pointer to a RECT structure specifying the location and size of the restored window. Coordinates are relative to the clipping window hwnd.", "possible_constants": []}]}, {"name": "DrawCaption", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-drawcaption", "description": "The DrawCaption function draws a window caption.", "parameters": [{"name": "hwnd", "type": "", "description": "A handle to a window that supplies text and an icon for the window caption.", "possible_constants": []}, {"name": "hdc", "type": "", "description": "A handle to a device context. The function draws the window caption into this device context.", "possible_constants": []}, {"name": "lprect", "type": "", "description": "A pointer to a RECT structure that specifies the bounding rectangle for the window caption in logical coordinates.", "possible_constants": []}, {"name": "flags", "type": "", "description": "The drawing options. This parameter can be zero or more of the following values.\nIf DC_SMALLCAP is specified, the function draws a normal window caption.", "possible_constants": [["DC_ACTIVE", -1], ["DC_BUTTONS", -1], ["DC_GRADIENT", -1], ["DC_ICON", -1], ["DC_INBUTTON", -1], ["DC_SMALLCAP", -1], ["DC_TEXT", -1]]}]}, {"name": "DrawEdge", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-drawedge", "description": "The DrawEdge function draws one or more edges of rectangle.", "parameters": [{"name": "hdc", "type": "", "description": "A handle to the device context.", "possible_constants": []}, {"name": "qrc", "type": "", "description": "A pointer to a RECT structure that contains the logical coordinates of the rectangle.", "possible_constants": []}, {"name": "edge", "type": "", "description": "The type of inner and outer edges to draw. This parameter must be a combination of one inner-border flag and one outer-border flag. The inner-border flags are as follows.\nThe outer-border flags are as follows.\nAlternatively, the edge parameter can specify one of the following flags.", "possible_constants": [["BDR_RAISEDINNER", -1], ["BDR_SUNKENINNER", -1], ["BDR_RAISEDOUTER", -1], ["BDR_SUNKENOUTER", -1], ["EDGE_BUMP", -1], ["EDGE_ETCHED", -1], ["EDGE_RAISED", -1], ["EDGE_SUNKEN", -1]]}, {"name": "grfFlags", "type": "", "description": "The type of border. This parameter can be a combination of the following values.", "possible_constants": [["BF_ADJUST", -1], ["BF_BOTTOM", -1], ["BF_BOTTOMLEFT", -1], ["BF_BOTTOMRIGHT", -1], ["BF_DIAGONAL", -1], ["BF_DIAGONAL_ENDBOTTOMLEFT", -1], ["BF_DIAGONAL_ENDBOTTOMRIGHT", -1], ["BF_DIAGONAL_ENDTOPLEFT", -1], ["BF_DIAGONAL_ENDTOPRIGHT", -1], ["BF_FLAT", -1], ["BF_LEFT", -1], ["BF_MIDDLE", -1], ["BF_MONO", -1], ["BF_RECT", -1], ["BF_RIGHT", -1], ["BF_SOFT", -1], ["BF_TOP", -1], ["BF_TOPLEFT", -1], ["BF_TOPRIGHT", -1]]}]}, {"name": "DrawFocusRect", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-drawfocusrect", "description": "The DrawFocusRect function draws a rectangle in the style used to indicate that the rectangle has the focus.", "parameters": [{"name": "hDC", "type": "", "description": "A handle to the device context.", "possible_constants": []}, {"name": "lprc", "type": "", "description": "A pointer to a RECT structure that specifies the logical coordinates of the rectangle.", "possible_constants": []}]}, {"name": "DrawFrameControl", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-drawframecontrol", "description": "The DrawFrameControl function draws a frame control of the specified type and style.", "parameters": [{"name": "unnamedParam1", "type": "", "description": "A handle to the device context of the window in which to draw the control.", "possible_constants": []}, {"name": "unnamedParam2", "type": "", "description": "A pointer to a RECT structure that contains the logical coordinates of the bounding rectangle for frame control.", "possible_constants": []}, {"name": "unnamedParam3", "type": "", "description": "The type of frame control to draw. This parameter can be one of the following values.", "possible_constants": [["DFC_BUTTON", -1], ["DFC_CAPTION", -1], ["DFC_MENU", -1], ["DFC_POPUPMENU", -1], ["DFC_SCROLL", -1]]}, {"name": "unnamedParam4", "type": "", "description": "The initial state of the frame control. If uType is DFC_BUTTON, uState can be one of the following values.\nIf uType is DFC_CAPTION, uState can be one of the following values.\nIf uType is DFC_MENU, uState can be one of the following values.\nIf uType is DFC_SCROLL, uState can be one of the following values.\nThe following style can be used to adjust the bounding rectangle of the push button.\nOne or more of the following values can be used to set the state of the control to be drawn.", "possible_constants": [["DFCS_BUTTON3STATE", -1], ["DFCS_BUTTONCHECK", -1], ["DFCS_BUTTONPUSH", -1], ["DFCS_BUTTONRADIO", -1], ["DFCS_BUTTONRADIOIMAGE", -1], ["DFCS_BUTTONRADIOMASK", -1], ["DFCS_CAPTIONCLOSE", -1], ["DFCS_CAPTIONHELP", -1], ["DFCS_CAPTIONMAX", -1], ["DFCS_CAPTIONMIN", -1], ["DFCS_CAPTIONRESTORE", -1], ["DFCS_MENUARROW", -1], ["DFCS_MENUARROWRIGHT", -1], ["DFCS_MENUBULLET", -1], ["DFCS_MENUCHECK", -1], ["DFCS_SCROLLCOMBOBOX", -1], ["DFCS_SCROLLDOWN", -1], ["DFCS_SCROLLLEFT", -1], ["DFCS_SCROLLRIGHT", -1], ["DFCS_SCROLLSIZEGRIP", -1], ["DFCS_SCROLLSIZEGRIPRIGHT", -1], ["DFCS_SCROLLUP", -1], ["DFCS_ADJUSTRECT", -1], ["DFCS_CHECKED", -1], ["DFCS_FLAT", -1], ["DFCS_HOT", -1], ["DFCS_INACTIVE", -1], ["DFCS_MONO", -1], ["DFCS_PUSHED", -1], ["DFCS_TRANSPARENT", -1]]}]}, {"name": "DrawIcon", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-drawicon", "description": "Draws an icon or cursor into the specified device context.", "parameters": [{"name": "hDC", "type": "HDC", "description": "A handle to the device context into which the icon or cursor will be drawn.", "possible_constants": []}, {"name": "X", "type": "int", "description": "The logical x-coordinate of the upper-left corner of the icon.", "possible_constants": []}, {"name": "Y", "type": "int", "description": "The logical y-coordinate of the upper-left corner of the icon.", "possible_constants": []}, {"name": "hIcon", "type": "HICON", "description": "A handle to the icon to be drawn.", "possible_constants": []}]}, {"name": "DrawIconEx", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-drawiconex", "description": "Draws an icon or cursor into the specified device context, performing the specified raster operations, and stretching or compressing the icon or cursor as specified.", "parameters": [{"name": "hdc", "type": "HDC", "description": "A handle to the device context into which the icon or cursor will be drawn.", "possible_constants": []}, {"name": "xLeft", "type": "int", "description": "The logical x-coordinate of the upper-left corner of the icon or cursor.", "possible_constants": []}, {"name": "yTop", "type": "int", "description": "The logical y-coordinate of the upper-left corner of the icon or cursor.", "possible_constants": []}, {"name": "hIcon", "type": "HICON", "description": "A handle to the icon or cursor to be drawn. This parameter can identify an animated cursor.", "possible_constants": []}, {"name": "cxWidth", "type": "int", "description": "The logical width of the icon or cursor. If this parameter is zero and the diFlags parameter is DI_DEFAULTSIZE, the function uses the SM_CXICON system metric value to set the width. If this parameter is zero and DI_DEFAULTSIZE is not used, the function uses the actual resource width.", "possible_constants": []}, {"name": "cyWidth", "type": "int", "description": "The logical height of the icon or cursor. If this parameter is zero and the diFlags parameter is DI_DEFAULTSIZE, the function uses the SM_CYICON system metric value to set the width. If this parameter is zero and DI_DEFAULTSIZE is not used, the function uses the actual resource height.", "possible_constants": []}, {"name": "istepIfAniCur", "type": "UINT", "description": "The index of the frame to draw, if hIcon identifies an animated cursor. This parameter is ignored if hIcon does not identify an animated cursor.", "possible_constants": []}, {"name": "hbrFlickerFreeDraw", "type": "HBRUSH", "description": "A handle to a brush that the system uses for flicker-free drawing. If hbrFlickerFreeDraw is a valid brush handle, the system creates an offscreen bitmap using the specified brush for the background color, draws the icon or cursor into the bitmap, and then copies the bitmap into the device context identified by hdc. If hbrFlickerFreeDraw is NULL, the system draws the icon or cursor directly into the device context.", "possible_constants": []}, {"name": "diFlags", "type": "UINT", "description": "The drawing flags. This parameter can be one of the following values.", "possible_constants": [["DI_COMPAT", 4], ["DI_DEFAULTSIZE", 8], ["DI_IMAGE", 2], ["DI_MASK", 1], ["DI_NOMIRROR", 16], ["DI_NORMAL", 3]]}]}, {"name": "DrawMenuBar", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-drawmenubar", "description": "Redraws the menu bar of the specified window. If the menu bar changes after the system has created the window, this function must be called to draw the changed menu bar.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window whose menu bar is to be redrawn.", "possible_constants": []}]}, {"name": "DrawStateA", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-drawstatea", "description": "The DrawState function displays an image and applies a visual effect to indicate a state, such as a disabled or default state.", "parameters": [{"name": "hdc", "type": "", "description": "A handle to the device context to draw in.", "possible_constants": []}, {"name": "hbrFore", "type": "", "description": "A handle to the brush used to draw the image, if the state specified by the fuFlags parameter is DSS_MONO. This parameter is ignored for other states.", "possible_constants": []}, {"name": "qfnCallBack", "type": "", "description": "A pointer to an application-defined callback function used to render the image. This parameter is required if the image type in fuFlags is DST_COMPLEX. It is optional and can be NULL if the image type is DST_TEXT. For all other image types, this parameter is ignored. For more information about the callback function, see the DrawStateProc function.", "possible_constants": []}, {"name": "lData", "type": "", "description": "Information about the image. The meaning of this parameter depends on the image type.", "possible_constants": []}, {"name": "wData", "type": "", "description": "Information about the image. The meaning of this parameter depends on the image type. It is, however, zero extended for use with the DrawStateProc function.", "possible_constants": []}, {"name": "x", "type": "", "description": "The horizontal location, in device units, at which to draw the image.", "possible_constants": []}, {"name": "y", "type": "", "description": "The vertical location, in device units, at which to draw the image.", "possible_constants": []}, {"name": "cx", "type": "", "description": "The width of the image, in device units. This parameter is required if the image type is DST_COMPLEX. Otherwise, it can be zero to calculate the width of the image.", "possible_constants": []}, {"name": "cy", "type": "", "description": "The height of the image, in device units. This parameter is required if the image type is DST_COMPLEX. Otherwise, it can be zero to calculate the height of the image.", "possible_constants": []}, {"name": "uFlags", "type": "", "description": "The image type and state. This parameter can be one of the following type values.\nThis parameter can also be one of the following state values.\nFor all states except DSS_NORMAL, the image is converted to monochrome before the visual effect is applied.", "possible_constants": [["DST_BITMAP", -1], ["DST_COMPLEX", -1], ["DST_ICON", -1], ["DST_PREFIXTEXT", -1], ["DST_TEXT", -1], ["DSS_DISABLED", -1], ["DSS_HIDEPREFIX", -1], ["DSS_MONO", -1], ["DSS_NORMAL", -1], ["DSS_PREFIXONLY", -1], ["DSS_RIGHT", -1], ["DSS_UNION", -1]]}]}, {"name": "DrawStateW", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-drawstatew", "description": "The DrawState function displays an image and applies a visual effect to indicate a state, such as a disabled or default state.", "parameters": [{"name": "hdc", "type": "", "description": "A handle to the device context to draw in.", "possible_constants": []}, {"name": "hbrFore", "type": "", "description": "A handle to the brush used to draw the image, if the state specified by the fuFlags parameter is DSS_MONO. This parameter is ignored for other states.", "possible_constants": []}, {"name": "qfnCallBack", "type": "", "description": "A pointer to an application-defined callback function used to render the image. This parameter is required if the image type in fuFlags is DST_COMPLEX. It is optional and can be NULL if the image type is DST_TEXT. For all other image types, this parameter is ignored. For more information about the callback function, see the DrawStateProc function.", "possible_constants": []}, {"name": "lData", "type": "", "description": "Information about the image. The meaning of this parameter depends on the image type.", "possible_constants": []}, {"name": "wData", "type": "", "description": "Information about the image. The meaning of this parameter depends on the image type. It is, however, zero extended for use with the DrawStateProc function.", "possible_constants": []}, {"name": "x", "type": "", "description": "The horizontal location, in device units, at which to draw the image.", "possible_constants": []}, {"name": "y", "type": "", "description": "The vertical location, in device units, at which to draw the image.", "possible_constants": []}, {"name": "cx", "type": "", "description": "The width of the image, in device units. This parameter is required if the image type is DST_COMPLEX. Otherwise, it can be zero to calculate the width of the image.", "possible_constants": []}, {"name": "cy", "type": "", "description": "The height of the image, in device units. This parameter is required if the image type is DST_COMPLEX. Otherwise, it can be zero to calculate the height of the image.", "possible_constants": []}, {"name": "uFlags", "type": "", "description": "The image type and state. This parameter can be one of the following type values.\nThis parameter can also be one of the following state values.\nFor all states except DSS_NORMAL, the image is converted to monochrome before the visual effect is applied.", "possible_constants": [["DST_BITMAP", -1], ["DST_COMPLEX", -1], ["DST_ICON", -1], ["DST_PREFIXTEXT", -1], ["DST_TEXT", -1], ["DSS_DISABLED", -1], ["DSS_HIDEPREFIX", -1], ["DSS_MONO", -1], ["DSS_NORMAL", -1], ["DSS_PREFIXONLY", -1], ["DSS_RIGHT", -1], ["DSS_UNION", -1]]}]}, {"name": "DrawText", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-drawtext", "description": "The DrawText function draws formatted text in the specified rectangle. It formats the text according to the specified method (expanding tabs, justifying characters, breaking lines, and so forth).", "parameters": [{"name": "hdc", "type": "", "description": "A handle to the device context.", "possible_constants": []}, {"name": "lpchText", "type": "", "description": "A pointer to the string that specifies the text to be drawn. If the nCount parameter is -1, the string must be null-terminated.\nIf uFormat includes DT_MODIFYSTRING, the function could add up to four additional characters to this string. The buffer containing the string should be large enough to accommodate these extra characters.", "possible_constants": []}, {"name": "cchText", "type": "", "description": "The length, in characters, of the string. If nCount is -1, then the lpchText parameter is assumed to be a pointer to a null-terminated string and DrawText computes the character count automatically.", "possible_constants": []}, {"name": "lprc", "type": "", "description": "A pointer to a RECT structure that contains the rectangle (in logical coordinates) in which the text is to be formatted.", "possible_constants": []}, {"name": "format", "type": "", "description": "The method of formatting the text. This parameter can be one or more of the following values.", "possible_constants": [["DT_BOTTOM", -1], ["DT_CALCRECT", -1], ["DT_CENTER", -1], ["DT_EDITCONTROL", -1], ["DT_END_ELLIPSIS", -1], ["DT_EXPANDTABS", -1], ["DT_EXTERNALLEADING", -1], ["DT_HIDEPREFIX", -1], ["DT_INTERNAL", -1], ["DT_LEFT", -1], ["DT_MODIFYSTRING", -1], ["DT_NOCLIP", -1], ["DT_NOFULLWIDTHCHARBREAK", -1], ["DT_NOPREFIX", -1], ["DT_PATH_ELLIPSIS", -1], ["DT_PREFIXONLY", -1], ["DT_RIGHT", -1], ["DT_RTLREADING", -1], ["DT_SINGLELINE", -1], ["DT_TABSTOP", -1], ["DT_TOP", -1], ["DT_VCENTER", -1], ["DT_WORDBREAK", -1], ["DT_WORD_ELLIPSIS", -1]]}]}, {"name": "DrawTextA", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-drawtexta", "description": "The DrawText function draws formatted text in the specified rectangle. It formats the text according to the specified method (expanding tabs, justifying characters, breaking lines, and so forth).", "parameters": [{"name": "hdc", "type": "", "description": "A handle to the device context.", "possible_constants": []}, {"name": "lpchText", "type": "", "description": "A pointer to the string that specifies the text to be drawn. If the nCount parameter is -1, the string must be null-terminated.\nIf uFormat includes DT_MODIFYSTRING, the function could add up to four additional characters to this string. The buffer containing the string should be large enough to accommodate these extra characters.", "possible_constants": []}, {"name": "cchText", "type": "", "description": "The length, in characters, of the string. If nCount is -1, then the lpchText parameter is assumed to be a pointer to a null-terminated string and DrawText computes the character count automatically.", "possible_constants": []}, {"name": "lprc", "type": "", "description": "A pointer to a RECT structure that contains the rectangle (in logical coordinates) in which the text is to be formatted.", "possible_constants": []}, {"name": "format", "type": "", "description": "The method of formatting the text. This parameter can be one or more of the following values.", "possible_constants": [["DT_BOTTOM", -1], ["DT_CALCRECT", -1], ["DT_CENTER", -1], ["DT_EDITCONTROL", -1], ["DT_END_ELLIPSIS", -1], ["DT_EXPANDTABS", -1], ["DT_EXTERNALLEADING", -1], ["DT_HIDEPREFIX", -1], ["DT_INTERNAL", -1], ["DT_LEFT", -1], ["DT_MODIFYSTRING", -1], ["DT_NOCLIP", -1], ["DT_NOFULLWIDTHCHARBREAK", -1], ["DT_NOPREFIX", -1], ["DT_PATH_ELLIPSIS", -1], ["DT_PREFIXONLY", -1], ["DT_RIGHT", -1], ["DT_RTLREADING", -1], ["DT_SINGLELINE", -1], ["DT_TABSTOP", -1], ["DT_TOP", -1], ["DT_VCENTER", -1], ["DT_WORDBREAK", -1], ["DT_WORD_ELLIPSIS", -1]]}]}, {"name": "DrawTextExA", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-drawtextexa", "description": "The DrawTextEx function draws formatted text in the specified rectangle.", "parameters": [{"name": "hdc", "type": "", "description": "A handle to the device context in which to draw.", "possible_constants": []}, {"name": "lpchText", "type": "", "description": "A pointer to the string that contains the text to draw. If the cchText parameter is -1, the string must be null-terminated.\nIf dwDTFormat includes DT_MODIFYSTRING, the function could add up to four additional characters to this string. The buffer containing the string should be large enough to accommodate these extra characters.", "possible_constants": []}, {"name": "cchText", "type": "", "description": "The length of the string pointed to by lpchText. If cchText is -1, then the lpchText parameter is assumed to be a pointer to a null-terminated string and DrawTextEx computes the character count automatically.", "possible_constants": []}, {"name": "lprc", "type": "", "description": "A pointer to a RECT structure that contains the rectangle, in logical coordinates, in which the text is to be formatted.", "possible_constants": []}, {"name": "format", "type": "", "description": "The formatting options. This parameter can be one or more of the following values.", "possible_constants": [["DT_BOTTOM", -1], ["DT_CALCRECT", -1], ["DT_CENTER", -1], ["DT_EDITCONTROL", -1], ["DT_END_ELLIPSIS", -1], ["DT_EXPANDTABS", -1], ["DT_EXTERNALLEADING", -1], ["DT_HIDEPREFIX", -1], ["DT_INTERNAL", -1], ["DT_LEFT", -1], ["DT_MODIFYSTRING", -1], ["DT_NOCLIP", -1], ["DT_NOFULLWIDTHCHARBREAK", -1], ["DT_NOPREFIX", -1], ["DT_PATH_ELLIPSIS", -1], ["DT_PREFIXONLY", -1], ["DT_RIGHT", -1], ["DT_RTLREADING", -1], ["DT_SINGLELINE", -1], ["DT_TABSTOP", -1], ["DT_TOP", -1], ["DT_VCENTER", -1], ["DT_WORDBREAK", -1], ["DT_WORD_ELLIPSIS", -1]]}, {"name": "lpdtp", "type": "", "description": "A pointer to a DRAWTEXTPARAMS structure that specifies additional formatting options. This parameter can be NULL.", "possible_constants": []}]}, {"name": "DrawTextExW", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-drawtextexw", "description": "The DrawTextEx function draws formatted text in the specified rectangle.", "parameters": [{"name": "hdc", "type": "", "description": "A handle to the device context in which to draw.", "possible_constants": []}, {"name": "lpchText", "type": "", "description": "A pointer to the string that contains the text to draw. If the cchText parameter is -1, the string must be null-terminated.\nIf dwDTFormat includes DT_MODIFYSTRING, the function could add up to four additional characters to this string. The buffer containing the string should be large enough to accommodate these extra characters.", "possible_constants": []}, {"name": "cchText", "type": "", "description": "The length of the string pointed to by lpchText. If cchText is -1, then the lpchText parameter is assumed to be a pointer to a null-terminated string and DrawTextEx computes the character count automatically.", "possible_constants": []}, {"name": "lprc", "type": "", "description": "A pointer to a RECT structure that contains the rectangle, in logical coordinates, in which the text is to be formatted.", "possible_constants": []}, {"name": "format", "type": "", "description": "The formatting options. This parameter can be one or more of the following values.", "possible_constants": [["DT_BOTTOM", -1], ["DT_CALCRECT", -1], ["DT_CENTER", -1], ["DT_EDITCONTROL", -1], ["DT_END_ELLIPSIS", -1], ["DT_EXPANDTABS", -1], ["DT_EXTERNALLEADING", -1], ["DT_HIDEPREFIX", -1], ["DT_INTERNAL", -1], ["DT_LEFT", -1], ["DT_MODIFYSTRING", -1], ["DT_NOCLIP", -1], ["DT_NOFULLWIDTHCHARBREAK", -1], ["DT_NOPREFIX", -1], ["DT_PATH_ELLIPSIS", -1], ["DT_PREFIXONLY", -1], ["DT_RIGHT", -1], ["DT_RTLREADING", -1], ["DT_SINGLELINE", -1], ["DT_TABSTOP", -1], ["DT_TOP", -1], ["DT_VCENTER", -1], ["DT_WORDBREAK", -1], ["DT_WORD_ELLIPSIS", -1]]}, {"name": "lpdtp", "type": "", "description": "A pointer to a DRAWTEXTPARAMS structure that specifies additional formatting options. This parameter can be NULL.", "possible_constants": []}]}, {"name": "DrawTextW", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-drawtextw", "description": "The DrawText function draws formatted text in the specified rectangle. It formats the text according to the specified method (expanding tabs, justifying characters, breaking lines, and so forth).", "parameters": [{"name": "hdc", "type": "", "description": "A handle to the device context.", "possible_constants": []}, {"name": "lpchText", "type": "", "description": "A pointer to the string that specifies the text to be drawn. If the nCount parameter is -1, the string must be null-terminated.\nIf uFormat includes DT_MODIFYSTRING, the function could add up to four additional characters to this string. The buffer containing the string should be large enough to accommodate these extra characters.", "possible_constants": []}, {"name": "cchText", "type": "", "description": "The length, in characters, of the string. If nCount is -1, then the lpchText parameter is assumed to be a pointer to a null-terminated string and DrawText computes the character count automatically.", "possible_constants": []}, {"name": "lprc", "type": "", "description": "A pointer to a RECT structure that contains the rectangle (in logical coordinates) in which the text is to be formatted.", "possible_constants": []}, {"name": "format", "type": "", "description": "The method of formatting the text. This parameter can be one or more of the following values.", "possible_constants": [["DT_BOTTOM", -1], ["DT_CALCRECT", -1], ["DT_CENTER", -1], ["DT_EDITCONTROL", -1], ["DT_END_ELLIPSIS", -1], ["DT_EXPANDTABS", -1], ["DT_EXTERNALLEADING", -1], ["DT_HIDEPREFIX", -1], ["DT_INTERNAL", -1], ["DT_LEFT", -1], ["DT_MODIFYSTRING", -1], ["DT_NOCLIP", -1], ["DT_NOFULLWIDTHCHARBREAK", -1], ["DT_NOPREFIX", -1], ["DT_PATH_ELLIPSIS", -1], ["DT_PREFIXONLY", -1], ["DT_RIGHT", -1], ["DT_RTLREADING", -1], ["DT_SINGLELINE", -1], ["DT_TABSTOP", -1], ["DT_TOP", -1], ["DT_VCENTER", -1], ["DT_WORDBREAK", -1], ["DT_WORD_ELLIPSIS", -1]]}]}, {"name": "EmptyClipboard", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-emptyclipboard", "description": "Empties the clipboard and frees handles to data in the clipboard. The function then assigns ownership of the clipboard to the window that currently has the clipboard open.", "parameters": []}, {"name": "EnableMenuItem", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enablemenuitem", "description": "Enables, disables, or grays the specified menu item.", "parameters": [{"name": "hMenu", "type": "HMENU", "description": "A handle to the menu.", "possible_constants": []}, {"name": "uIDEnableItem", "type": "UINT", "description": "The menu item to be enabled, disabled, or grayed, as determined by the uEnable parameter. This parameter specifies an item in a menu bar, menu, or submenu.", "possible_constants": []}, {"name": "uEnable", "type": "UINT", "description": "Controls the interpretation of the uIDEnableItem parameter and indicate whether the menu item is enabled, disabled, or grayed. This parameter must be a combination of the following values.", "possible_constants": [["MF_BYCOMMAND", 0], ["MF_BYPOSITION", 1024], ["MF_DISABLED", 2], ["MF_ENABLED", 0], ["MF_GRAYED", 1]]}]}, {"name": "EnableMouseInPointer", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enablemouseinpointer", "description": "Enables the mouse to act as a pointer input device and send WM_POINTER messages.", "parameters": [{"name": "fEnable", "type": "", "description": "TRUE to turn on mouse input support in WM_POINTER.", "possible_constants": []}]}, {"name": "EnableNonClientDpiScaling", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enablenonclientdpiscaling", "description": "In high-DPI displays, enables automatic display scaling of the non-client area portions of the specified top-level window. Must be called during the initialization of that window.Note\u00c2\u00a0\u00c2\u00a0Applications running at a DPI_AWARENESS_CONTEXT of DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2 automatically scale their non-client areas by default. They do not need to call this function.", "parameters": [{"name": "hwnd", "type": "", "description": "The window that should have automatic scaling enabled.", "possible_constants": []}]}, {"name": "EnableScrollBar", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enablescrollbar", "description": "The EnableScrollBar function enables or disables one or both scroll bar arrows.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "Handle to a window or a scroll bar control, depending on the value of the\nwSBflags parameter.", "possible_constants": []}, {"name": "wSBflags", "type": "UINT", "description": "Specifies the scroll bar type. This parameter can be one of the following values.", "possible_constants": [["SB_BOTH", -1], ["SB_CTL", -1], ["SB_HORZ", -1], ["SB_VERT", -1]]}, {"name": "wArrows", "type": "UINT", "description": "Specifies whether the scroll bar arrows are enabled or disabled and indicates which arrows are enabled or disabled. This parameter can be one of the following values.", "possible_constants": [["ESB_DISABLE_BOTH", -1], ["ESB_DISABLE_DOWN", -1], ["ESB_DISABLE_LEFT", -1], ["ESB_DISABLE_LTUP", -1], ["ESB_DISABLE_RIGHT", -1], ["ESB_DISABLE_RTDN", -1], ["ESB_DISABLE_UP", -1], ["ESB_ENABLE_BOTH", -1]]}]}, {"name": "EnableWindow", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enablewindow", "description": "Enables or disables mouse and keyboard input to the specified window or control. When input is disabled, the window does not receive input such as mouse clicks and key presses. When input is enabled, the window receives all input.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window to be enabled or disabled.", "possible_constants": []}, {"name": "bEnable", "type": "BOOL", "description": "Indicates whether to enable or disable the window. If this parameter is TRUE, the window is enabled. If the parameter is FALSE, the window is disabled.", "possible_constants": []}]}, {"name": "EndDeferWindowPos", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enddeferwindowpos", "description": "Simultaneously updates the position and size of one or more windows in a single screen-refreshing cycle.", "parameters": [{"name": "hWinPosInfo", "type": "HDWP", "description": "A handle to a multiple-window\n\u00e2\u0080\u0093 position structure that contains size and position information for one or more windows. This internal structure is returned by the BeginDeferWindowPos function or by the most recent call to the DeferWindowPos function.", "possible_constants": []}]}, {"name": "EndDialog", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enddialog", "description": "Destroys a modal dialog box, causing the system to end any processing for the dialog box.", "parameters": [{"name": "hDlg", "type": "HWND", "description": "A handle to the dialog box to be destroyed.", "possible_constants": []}, {"name": "nResult", "type": "INT_PTR", "description": "The value to be returned to the application from the function that created the dialog box.", "possible_constants": []}]}, {"name": "EndMenu", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-endmenu", "description": "Ends the calling thread's active menu.", "parameters": []}, {"name": "EndPaint", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-endpaint", "description": "The EndPaint function marks the end of painting in the specified window. This function is required for each call to the BeginPaint function, but only after painting is complete.", "parameters": [{"name": "hWnd", "type": "", "description": "Handle to the window that has been repainted.", "possible_constants": []}, {"name": "lpPaint", "type": "", "description": "Pointer to a PAINTSTRUCT structure that contains the painting information retrieved by BeginPaint.", "possible_constants": []}]}, {"name": "EndTask", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-endtask", "description": "[This function is not intended for general\n      use. It may\n      be altered or unavailable in subsequent versions of Windows.]\nForcibly closes the\nspecified window.\nSyntax\nBOOL EndTask(\n  HWND hWnd,\n  BOOL fShutDown,\n  BOOL fForce\n);\n\nParameters\nhWnd\nType: HWND\nA handle to the window to be closed.\nfShutDown\nType: BOOL\nIgnored. Must be FALSE.\nfForce\nType: BOOL\nA TRUE for this parameter will force the destruction of the\nwindow if an initial attempt fails to gently close the window using WM_CLOSE.\nWith a FALSE for this parameter, only the close with WM_CLOSEis attempted.\nReturn value\nType: BOOL\nIf the function succeeds, the return value is nonzero.\nIf the function fails, the return value is FALSE.\nTo get extended error information, call GetLastError.\nRemarks\nThis function was not included in the SDK headers and libraries until Windows\u00c2\u00a0XP with Service Pack\u00c2\u00a01 (SP1) and Windows Server\u00c2\u00a02003. If you do not have a header file and import library for this function, you can call the function using LoadLibrary and GetProcAddress.\nRequirements\n\n\n\n\u00c2\u00a0\n\u00c2\u00a0\n\n\n\n\nMinimum supported client\nWindows\u00c2\u00a02000 Professional [desktop apps only]\n\n\nMinimum supported server\nWindows\u00c2\u00a02000 Server [desktop apps only]\n\n\nTarget Platform\nWindows\n\n\nHeader\nwinuser.h (include Windows.h)\n\n\nLibrary\nUser32.lib\n\n\nDLL\nUser32.dll\n\n\n\nSee also\nCloseWindow\nConceptual\nDestroyWindow\nReference\nWM_CLOSE\nWindows", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window to be closed.", "possible_constants": []}, {"name": "fShutDown", "type": "BOOL", "description": "Ignored. Must be FALSE.", "possible_constants": []}, {"name": "fForce", "type": "BOOL", "description": "A TRUE for this parameter will force the destruction of the\nwindow if an initial attempt fails to gently close the window using WM_CLOSE.\nWith a FALSE for this parameter, only the close with WM_CLOSEis attempted.", "possible_constants": []}]}, {"name": "EnumChildWindows", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumchildwindows", "description": "Enumerates the child windows that belong to the specified parent window by passing the handle to each child window, in turn, to an application-defined callback function. EnumChildWindows continues until the last child window is enumerated or the callback function returns FALSE.", "parameters": [{"name": "hWndParent", "type": "HWND", "description": "A handle to the parent window whose child windows are to be enumerated. If this parameter is NULL, this function is equivalent to EnumWindows.", "possible_constants": []}, {"name": "lpEnumFunc", "type": "WNDENUMPROC", "description": "A pointer to an application-defined callback function. For more information, see EnumChildProc.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "An application-defined value to be passed to the callback function.", "possible_constants": []}]}, {"name": "EnumClipboardFormats", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumclipboardformats", "description": "Enumerates the data formats currently available on the clipboard.", "parameters": [{"name": "format", "type": "UINT", "description": "A clipboard format that is known to be available.\nTo start an enumeration of clipboard formats, set\nformat to zero. When\nformat is zero, the function retrieves the first available clipboard format. For subsequent calls during an enumeration, set\nformat to the result of the previous\nEnumClipboardFormats call.", "possible_constants": []}]}, {"name": "EnumDesktopsA", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumdesktopsa", "description": "Enumerates all desktops associated with the specified window station of the calling process. The function passes the name of each desktop, in turn, to an application-defined callback function.", "parameters": [{"name": "hwinsta", "type": "", "description": "A handle to the window station whose desktops are to be enumerated. This handle is returned by the\nCreateWindowStation,\nGetProcessWindowStation, or\nOpenWindowStation function, and must have the WINSTA_ENUMDESKTOPS access right. For more information, see\nWindow Station Security and Access Rights.\nIf this parameter is NULL, the current window station is used.", "possible_constants": []}, {"name": "lpEnumFunc", "type": "", "description": "A pointer to an application-defined\nEnumDesktopProc callback function.", "possible_constants": []}, {"name": "lParam", "type": "", "description": "An application-defined value to be passed to the callback function.", "possible_constants": []}]}, {"name": "EnumDesktopsW", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumdesktopsw", "description": "Enumerates all desktops associated with the specified window station of the calling process. The function passes the name of each desktop, in turn, to an application-defined callback function.", "parameters": [{"name": "hwinsta", "type": "", "description": "A handle to the window station whose desktops are to be enumerated. This handle is returned by the\nCreateWindowStation,\nGetProcessWindowStation, or\nOpenWindowStation function, and must have the WINSTA_ENUMDESKTOPS access right. For more information, see\nWindow Station Security and Access Rights.\nIf this parameter is NULL, the current window station is used.", "possible_constants": []}, {"name": "lpEnumFunc", "type": "", "description": "A pointer to an application-defined\nEnumDesktopProc callback function.", "possible_constants": []}, {"name": "lParam", "type": "", "description": "An application-defined value to be passed to the callback function.", "possible_constants": []}]}, {"name": "EnumDesktopWindows", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumdesktopwindows", "description": "Enumerates all top-level windows associated with the specified desktop. It passes the handle to each window, in turn, to an application-defined callback function.", "parameters": [{"name": "hDesktop", "type": "", "description": "A handle to the desktop whose top-level windows are to be enumerated. This handle is returned by the\nCreateDesktop,\nGetThreadDesktop, OpenDesktop, or\nOpenInputDesktop function, and must have the DESKTOP_READOBJECTS access right. For more information, see\nDesktop Security and Access Rights.\nIf this parameter is NULL, the current desktop is used.", "possible_constants": []}, {"name": "lpfn", "type": "", "description": "A pointer to an application-defined\nEnumWindowsProc callback function.", "possible_constants": []}, {"name": "lParam", "type": "", "description": "An application-defined value to be passed to the callback function.", "possible_constants": []}]}, {"name": "EnumDisplayDevicesA", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumdisplaydevicesa", "description": "The EnumDisplayDevices function lets you obtain information about the display devices in the current session.", "parameters": [{"name": "lpDevice", "type": "", "description": "A pointer to the device name. If NULL, function returns information for the display adapter(s) on the machine, based on iDevNum.\nFor more information, see Remarks.", "possible_constants": []}, {"name": "iDevNum", "type": "", "description": "An index value that specifies the display device of interest.\nThe operating system identifies each display device in the current session with an index value. The index values are consecutive integers, starting at 0. If the current session has three display devices, for example, they are specified by the index values 0, 1, and 2.", "possible_constants": []}, {"name": "lpDisplayDevice", "type": "", "description": "A pointer to a DISPLAY_DEVICE structure that receives information about the display device specified by iDevNum.\nBefore calling EnumDisplayDevices, you must initialize the cb member of DISPLAY_DEVICE to the size, in bytes, of DISPLAY_DEVICE.", "possible_constants": []}, {"name": "dwFlags", "type": "", "description": "Set this flag to EDD_GET_DEVICE_INTERFACE_NAME (0x00000001) to retrieve the device interface name for GUID_DEVINTERFACE_MONITOR, which is registered by the operating system on a per monitor basis. The value is placed in the DeviceID member of the DISPLAY_DEVICE structure returned in lpDisplayDevice. The resulting device interface name can be used with SetupAPI functions and serves as a link between GDI monitor devices and SetupAPI monitor devices.", "possible_constants": []}]}, {"name": "EnumDisplayDevicesW", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumdisplaydevicesw", "description": "The EnumDisplayDevices function lets you obtain information about the display devices in the current session.", "parameters": [{"name": "lpDevice", "type": "", "description": "A pointer to the device name. If NULL, function returns information for the display adapter(s) on the machine, based on iDevNum.\nFor more information, see Remarks.", "possible_constants": []}, {"name": "iDevNum", "type": "", "description": "An index value that specifies the display device of interest.\nThe operating system identifies each display device in the current session with an index value. The index values are consecutive integers, starting at 0. If the current session has three display devices, for example, they are specified by the index values 0, 1, and 2.", "possible_constants": []}, {"name": "lpDisplayDevice", "type": "", "description": "A pointer to a DISPLAY_DEVICE structure that receives information about the display device specified by iDevNum.\nBefore calling EnumDisplayDevices, you must initialize the cb member of DISPLAY_DEVICE to the size, in bytes, of DISPLAY_DEVICE.", "possible_constants": []}, {"name": "dwFlags", "type": "", "description": "Set this flag to EDD_GET_DEVICE_INTERFACE_NAME (0x00000001) to retrieve the device interface name for GUID_DEVINTERFACE_MONITOR, which is registered by the operating system on a per monitor basis. The value is placed in the DeviceID member of the DISPLAY_DEVICE structure returned in lpDisplayDevice. The resulting device interface name can be used with SetupAPI functions and serves as a link between GDI monitor devices and SetupAPI monitor devices.", "possible_constants": []}]}, {"name": "EnumDisplayMonitors", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumdisplaymonitors", "description": "The EnumDisplayMonitors function enumerates display monitors (including invisible pseudo-monitors associated with the mirroring drivers) that intersect a region formed by the intersection of a specified clipping rectangle and the visible region of a device context. EnumDisplayMonitors calls an application-defined MonitorEnumProc callback function once for each monitor that is enumerated. Note that GetSystemMetrics (SM_CMONITORS) counts only the display monitors.", "parameters": [{"name": "hdc", "type": "", "description": "A handle to a display device context that defines the visible region of interest.\nIf this parameter is NULL, the hdcMonitor parameter passed to the callback function will be NULL, and the visible region of interest is the virtual screen that encompasses all the displays on the desktop.", "possible_constants": []}, {"name": "lprcClip", "type": "", "description": "A pointer to a RECT structure that specifies a clipping rectangle. The region of interest is the intersection of the clipping rectangle with the visible region specified by hdc.\nIf hdc is non-NULL, the coordinates of the clipping rectangle are relative to the origin of the hdc. If hdc is NULL, the coordinates are virtual-screen coordinates.\nThis parameter can be NULL if you don't want to clip the region specified by hdc.", "possible_constants": []}, {"name": "lpfnEnum", "type": "", "description": "A pointer to a MonitorEnumProc application-defined callback function.", "possible_constants": []}, {"name": "dwData", "type": "", "description": "Application-defined data that EnumDisplayMonitors passes directly to the MonitorEnumProc function.", "possible_constants": []}]}, {"name": "EnumDisplaySettingsA", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumdisplaysettingsa", "description": "The EnumDisplaySettings function retrieves information about one of the graphics modes for a display device. To retrieve information for all the graphics modes of a display device, make a series of calls to this function.", "parameters": [{"name": "lpszDeviceName", "type": "", "description": "A pointer to a null-terminated string that specifies the display device about whose graphics mode the function will obtain information.\nThis parameter is either NULL or a DISPLAY_DEVICE.DeviceName returned from EnumDisplayDevices. A NULL value specifies the current display device on the computer on which the calling thread is running.", "possible_constants": []}, {"name": "iModeNum", "type": "", "description": "The type of information to be retrieved. This value can be a graphics mode index or one of the following values.\nGraphics mode indexes start at zero. To obtain information for all of a display device's graphics modes, make a series of calls to EnumDisplaySettings, as follows: Set iModeNum to zero for the first call, and increment iModeNum by one for each subsequent call. Continue calling the function until the return value is zero.\nWhen you call EnumDisplaySettings with iModeNum set to zero, the operating system initializes and caches information about the display device. When you call EnumDisplaySettings with iModeNum set to a nonzero value, the function returns the information that was cached the last time the function was called with iModeNum set to zero.", "possible_constants": [["ENUM_CURRENT_SETTINGS", -1], ["ENUM_REGISTRY_SETTINGS", -1]]}, {"name": "lpDevMode", "type": "", "description": "", "possible_constants": []}, {"name": "A pointer to a DEVMODE structure into which the function stores information about the specified graphics mode. Before calling EnumDisplaySettings, set the dmSize member to sizeof(DEVMODE), and set the dmDriverExtra member to indicate the size, in bytes, of the additional space available to receive private driver data.", "type": "", "description": "The EnumDisplaySettings function sets values for the following five DEVMODE members:", "possible_constants": []}]}, {"name": "EnumDisplaySettingsExA", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumdisplaysettingsexa", "description": "The EnumDisplaySettingsEx function retrieves information about one of the graphics modes for a display device. To retrieve information for all the graphics modes for a display device, make a series of calls to this function.", "parameters": [{"name": "lpszDeviceName", "type": "", "description": "A pointer to a null-terminated string that specifies the display device about which graphics mode the function will obtain information.\nThis parameter is either NULL or a DISPLAY_DEVICE.DeviceName returned from EnumDisplayDevices. A NULL value specifies the current display device on the computer that the calling thread is running on.", "possible_constants": []}, {"name": "iModeNum", "type": "", "description": "Indicates the type of information to be retrieved. This value can be a graphics mode index or one of the following values.\nGraphics mode indexes start at zero. To obtain information for all of a display device's graphics modes, make a series of calls to EnumDisplaySettingsEx, as follows: Set iModeNum to zero for the first call, and increment iModeNum by one for each subsequent call. Continue calling the function until the return value is zero.\nWhen you call EnumDisplaySettingsEx with iModeNum set to zero, the operating system initializes and caches information about the display device. When you call EnumDisplaySettingsEx with iModeNum set to a nonzero value, the function returns the information that was cached the last time the function was called with iModeNum set to zero.", "possible_constants": [["ENUM_CURRENT_SETTINGS", -1], ["ENUM_REGISTRY_SETTINGS", -1]]}, {"name": "lpDevMode", "type": "", "description": "A pointer to a DEVMODE structure into which the function stores information about the specified graphics mode. Before calling EnumDisplaySettingsEx, set the dmSize member to sizeof (DEVMODE), and set the dmDriverExtra member to indicate the size, in bytes, of the additional space available to receive private driver data.\nThe EnumDisplaySettingsEx function will populate the dmFields member of the lpDevMode and one or more other members of the DEVMODE structure. To determine which members were set by the call to EnumDisplaySettingsEx, inspect the dmFields bitmask. Some of the fields typically populated by this function include:", "possible_constants": []}]}, {"name": "EnumDisplaySettingsExW", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumdisplaysettingsexw", "description": "The EnumDisplaySettingsEx function retrieves information about one of the graphics modes for a display device. To retrieve information for all the graphics modes for a display device, make a series of calls to this function.", "parameters": [{"name": "lpszDeviceName", "type": "", "description": "A pointer to a null-terminated string that specifies the display device about which graphics mode the function will obtain information.\nThis parameter is either NULL or a DISPLAY_DEVICE. DeviceName returned from EnumDisplayDevices. A NULL value specifies the current display device on the computer that the calling thread is running on.", "possible_constants": []}, {"name": "iModeNum", "type": "", "description": "Indicates the type of information to be retrieved. This value can be a graphics mode index or one of the following values.\nGraphics mode indexes start at zero. To obtain information for all of a display device's graphics modes, make a series of calls to EnumDisplaySettingsEx, as follows: Set iModeNum to zero for the first call, and increment iModeNum by one for each subsequent call. Continue calling the function until the return value is zero.\nWhen you call EnumDisplaySettingsEx with iModeNum set to zero, the operating system initializes and caches information about the display device. When you call EnumDisplaySettingsEx with iModeNum set to a nonzero value, the function returns the information that was cached the last time the function was called with iModeNum set to zero.", "possible_constants": [["ENUM_CURRENT_SETTINGS", -1], ["ENUM_REGISTRY_SETTINGS", -1]]}, {"name": "lpDevMode", "type": "", "description": "A pointer to a DEVMODE structure into which the function stores information about the specified graphics mode. Before calling EnumDisplaySettingsEx, set the dmSize member to sizeof (DEVMODE), and set the dmDriverExtra member to indicate the size, in bytes, of the additional space available to receive private driver data.\nThe EnumDisplaySettingsEx function will populate the dmFields member of the lpDevMode and one or more other members of the DEVMODE structure. To determine which members were set by the call to EnumDisplaySettingsEx, inspect the dmFields bitmask. Some of the fields typically populated by this function include:", "possible_constants": []}]}, {"name": "EnumDisplaySettingsW", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumdisplaysettingsw", "description": "The EnumDisplaySettings function retrieves information about one of the graphics modes for a display device. To retrieve information for all the graphics modes of a display device, make a series of calls to this function.", "parameters": [{"name": "lpszDeviceName", "type": "", "description": "A pointer to a null-terminated string that specifies the display device about whose graphics mode the function will obtain information.\nThis parameter is either NULL or a DISPLAY_DEVICE.DeviceName returned from EnumDisplayDevices. A NULL value specifies the current display device on the computer on which the calling thread is running.", "possible_constants": []}, {"name": "iModeNum", "type": "", "description": "The type of information to be retrieved. This value can be a graphics mode index or one of the following values.\nGraphics mode indexes start at zero. To obtain information for all of a display device's graphics modes, make a series of calls to EnumDisplaySettings, as follows: Set iModeNum to zero for the first call, and increment iModeNum by one for each subsequent call. Continue calling the function until the return value is zero.\nWhen you call EnumDisplaySettings with iModeNum set to zero, the operating system initializes and caches information about the display device. When you call EnumDisplaySettings with iModeNum set to a nonzero value, the function returns the information that was cached the last time the function was called with iModeNum set to zero.", "possible_constants": [["ENUM_CURRENT_SETTINGS", -1], ["ENUM_REGISTRY_SETTINGS", -1]]}, {"name": "lpDevMode", "type": "", "description": "", "possible_constants": []}, {"name": "A pointer to a DEVMODE structure into which the function stores information about the specified graphics mode. Before calling EnumDisplaySettings, set the dmSize member to sizeof(DEVMODE), and set the dmDriverExtra member to indicate the size, in bytes, of the additional space available to receive private driver data.", "type": "", "description": "The EnumDisplaySettings function sets values for the following five DEVMODE members:", "possible_constants": []}]}, {"name": "EnumPropsA", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumpropsa", "description": "Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. EnumProps continues until the last entry is enumerated or the callback function returns FALSE.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window whose property list is to be enumerated.", "possible_constants": []}, {"name": "lpEnumFunc", "type": "PROPENUMPROC", "description": "A pointer to the callback function. For more information about the callback function, see the PropEnumProc function.", "possible_constants": []}]}, {"name": "EnumPropsExA", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumpropsexa", "description": "Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. EnumPropsEx continues until the last entry is enumerated or the callback function returns FALSE.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window whose property list is to be enumerated.", "possible_constants": []}, {"name": "lpEnumFunc", "type": "PROPENUMPROCEX", "description": "A pointer to the callback function. For more information about the callback function, see the PropEnumProcEx function.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "Application-defined data to be passed to the callback function.", "possible_constants": []}]}, {"name": "EnumPropsExW", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumpropsexw", "description": "Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. EnumPropsEx continues until the last entry is enumerated or the callback function returns FALSE.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window whose property list is to be enumerated.", "possible_constants": []}, {"name": "lpEnumFunc", "type": "PROPENUMPROCEX", "description": "A pointer to the callback function. For more information about the callback function, see the PropEnumProcEx function.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "Application-defined data to be passed to the callback function.", "possible_constants": []}]}, {"name": "EnumPropsW", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumpropsw", "description": "Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. EnumProps continues until the last entry is enumerated or the callback function returns FALSE.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window whose property list is to be enumerated.", "possible_constants": []}, {"name": "lpEnumFunc", "type": "PROPENUMPROC", "description": "A pointer to the callback function. For more information about the callback function, see the PropEnumProc function.", "possible_constants": []}]}, {"name": "EnumThreadWindows", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumthreadwindows", "description": "Enumerates all nonchild windows associated with a thread by passing the handle to each window, in turn, to an application-defined callback function. EnumThreadWindows continues until the last window is enumerated or the callback function returns FALSE. To enumerate child windows of a particular window, use the EnumChildWindows function.", "parameters": [{"name": "dwThreadId", "type": "DWORD", "description": "The identifier of the thread whose windows are to be enumerated.", "possible_constants": []}, {"name": "lpfn", "type": "WNDENUMPROC", "description": "A pointer to an application-defined callback function. For more information, see EnumThreadWndProc.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "An application-defined value to be passed to the callback function.", "possible_constants": []}]}, {"name": "EnumWindows", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumwindows", "description": "Enumerates all top-level windows on the screen by passing the handle to each window, in turn, to an application-defined callback function. EnumWindows continues until the last top-level window is enumerated or the callback function returns FALSE.", "parameters": [{"name": "lpEnumFunc", "type": "WNDENUMPROC", "description": "A pointer to an application-defined callback function. For more information, see EnumWindowsProc.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "An application-defined value to be passed to the callback function.", "possible_constants": []}]}, {"name": "EnumWindowStationsA", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumwindowstationsa", "description": "Enumerates all window stations in the current session. The function passes the name of each window station, in turn, to an application-defined callback function.", "parameters": [{"name": "lpEnumFunc", "type": "", "description": "A pointer to an application-defined\nEnumWindowStationProc callback function.", "possible_constants": []}, {"name": "lParam", "type": "", "description": "An application-defined value to be passed to the callback function.", "possible_constants": []}]}, {"name": "EnumWindowStationsW", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumwindowstationsw", "description": "Enumerates all window stations in the current session. The function passes the name of each window station, in turn, to an application-defined callback function.", "parameters": [{"name": "lpEnumFunc", "type": "", "description": "A pointer to an application-defined\nEnumWindowStationProc callback function.", "possible_constants": []}, {"name": "lParam", "type": "", "description": "An application-defined value to be passed to the callback function.", "possible_constants": []}]}, {"name": "EqualRect", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-equalrect", "description": "The EqualRect function determines whether the two specified rectangles are equal by comparing the coordinates of their upper-left and lower-right corners.", "parameters": [{"name": "lprc1", "type": "", "description": "Pointer to a RECT structure that contains the logical coordinates of the first rectangle.", "possible_constants": []}, {"name": "lprc2", "type": "", "description": "Pointer to a RECT structure that contains the logical coordinates of the second rectangle.", "possible_constants": []}]}, {"name": "EvaluateProximityToPolygon", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-evaluateproximitytopolygon", "description": "Returns the score of a polygon as the probable touch target (compared to all other polygons that intersect the touch contact area) and an adjusted touch point within the polygon.", "parameters": [{"name": "numVertices", "type": "", "description": "The number of vertices in the polygon. This value must be greater than or equal to 3.\nThis value indicates the size of the array, as specified by the controlPolygon parameter.", "possible_constants": []}, {"name": "controlPolygon", "type": "", "description": "The array of x-y screen coordinates that define the shape of the UI element.\nThe numVertices parameter specifies the number of coordinates.", "possible_constants": []}, {"name": "pHitTestingInput", "type": "", "description": "The TOUCH_HIT_TESTING_INPUT structure that holds the data for the touch contact area.", "possible_constants": []}, {"name": "pProximityEval", "type": "", "description": "The TOUCH_HIT_TESTING_PROXIMITY_EVALUATION structure that holds the score and adjusted touch-point data.", "possible_constants": []}]}, {"name": "EvaluateProximityToRect", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-evaluateproximitytorect", "description": "Returns the score of a rectangle as the probable touch target, compared to all other rectangles that intersect the touch contact area, and an adjusted touch point within the rectangle.", "parameters": [{"name": "controlBoundingBox", "type": "", "description": "The RECT structure that defines the bounding box of the UI element.", "possible_constants": []}, {"name": "pHitTestingInput", "type": "", "description": "The TOUCH_HIT_TESTING_INPUT structure that holds the data for the touch contact area.", "possible_constants": []}, {"name": "pProximityEval", "type": "", "description": "The TOUCH_HIT_TESTING_PROXIMITY_EVALUATION structure that holds the score and adjusted touch-point data.", "possible_constants": []}]}, {"name": "ExcludeUpdateRgn", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-excludeupdatergn", "description": "The ExcludeUpdateRgn function prevents drawing within invalid areas of a window by excluding an updated region in the window from a clipping region.", "parameters": [{"name": "hDC", "type": "", "description": "Handle to the device context associated with the clipping region.", "possible_constants": []}, {"name": "hWnd", "type": "", "description": "Handle to the window to update.", "possible_constants": []}]}, {"name": "ExitWindows", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-exitwindows", "description": "Calls the ExitWindowsEx function to log off the interactive user. Applications should call ExitWindowsEx directly.", "parameters": [{"name": "dwReserved", "type": "", "description": "This parameter must be zero.", "possible_constants": []}, {"name": "Code", "type": "", "description": "This parameter must be zero.", "possible_constants": []}]}, {"name": "ExitWindowsEx", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-exitwindowsex", "description": "Logs off the interactive user, shuts down the system, or shuts down and restarts the system. It sends the\nWM_QUERYENDSESSION message to all applications to determine if they can be terminated.", "parameters": [{"name": "uFlags", "type": "", "description": "The shutdown type. This parameter must include one of the following values.\nThis parameter can optionally include one of the following values.", "possible_constants": [["EWX_HYBRID_SHUTDOWN", 4194304], ["EWX_LOGOFF", -1], ["EWX_POWEROFF", 8], ["EWX_REBOOT", 2], ["EWX_RESTARTAPPS", 64], ["EWX_SHUTDOWN", 1], ["EWX_FORCE", 4], ["EWX_FORCEIFHUNG", 16]]}, {"name": "dwReason", "type": "", "description": "The reason for initiating the shutdown. This parameter must be one of the\nsystem shutdown reason codes.\nIf this parameter is zero, the SHTDN_REASON_FLAG_PLANNED reason code  will not be set and therefore the default action is an undefined shutdown that is logged as \"No title for this reason could be found\". By default, it is also an unplanned shutdown. Depending on how the system is configured, an unplanned shutdown triggers the creation of a file that contains the system state information, which can delay shutdown. Therefore, do not use zero for this parameter.", "possible_constants": []}]}, {"name": "FillRect", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-fillrect", "description": "The FillRect function fills a rectangle by using the specified brush. This function includes the left and top borders, but excludes the right and bottom borders of the rectangle.", "parameters": [{"name": "hDC", "type": "", "description": "A handle to the device context.", "possible_constants": []}, {"name": "lprc", "type": "", "description": "A pointer to a RECT structure that contains the logical coordinates of the rectangle to be filled.", "possible_constants": []}, {"name": "hbr", "type": "", "description": "A handle to the brush used to fill the rectangle.", "possible_constants": []}]}, {"name": "FindWindowA", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-findwindowa", "description": "Retrieves a handle to the top-level window whose class name and window name match the specified strings. This function does not search child windows. This function does not perform a case-sensitive search.", "parameters": [{"name": "lpClassName", "type": "LPCTSTR", "description": "The class name or a class atom created by a previous call to the RegisterClass or RegisterClassEx function. The atom must be in the low-order word of lpClassName; the high-order word must be zero.\nIf lpClassName points to a string, it specifies the window class name. The class name can be any name registered with RegisterClass or RegisterClassEx, or any of the predefined control-class names.\nIf lpClassName is NULL, it finds any window whose title matches the lpWindowName parameter.", "possible_constants": []}, {"name": "lpWindowName", "type": "LPCTSTR", "description": "The window name (the window's title). If this parameter is NULL, all window names match.", "possible_constants": []}]}, {"name": "FindWindowExA", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-findwindowexa", "description": "Retrieves a handle to a window whose class name and window name match the specified strings. The function searches child windows, beginning with the one following the specified child window. This function does not perform a case-sensitive search.", "parameters": [{"name": "hWndParent", "type": "HWND", "description": "A handle to the parent window whose child windows are to be searched.\nIf hwndParent is NULL, the function uses the desktop window as the parent window. The function searches among windows that are child windows of the desktop.\nIf hwndParent is HWND_MESSAGE, the function searches all message-only windows.", "possible_constants": []}, {"name": "hWndChildAfter", "type": "HWND", "description": "A handle to a child window. The search begins with the next child window in the Z order. The child window must be a direct child window of hwndParent, not just a descendant window.\nIf hwndChildAfter is NULL, the search begins with the first child window of hwndParent.\nNote that if both hwndParent and hwndChildAfter are NULL, the function searches all top-level and message-only windows.", "possible_constants": []}, {"name": "lpszClass", "type": "LPCTSTR", "description": "The class name or a class atom created by a previous call to the RegisterClass or RegisterClassEx function. The atom must be placed in the low-order word of lpszClass; the high-order word must be zero.", "possible_constants": []}, {"name": "If lpszClass is a string, it specifies the window class name. The class name can be any name registered with RegisterClass or RegisterClassEx, or any of the predefined control-class names, or it can be MAKEINTATOM(0x8000). In this latter case, 0x8000 is the atom for a menu class. For more information, see the Remarks section of this topic.", "type": "", "description": "", "possible_constants": []}, {"name": "lpszWindow", "type": "LPCTSTR", "description": "The window name (the window's title). If this parameter is NULL, all window names match.", "possible_constants": []}]}, {"name": "FindWindowExW", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-findwindowexw", "description": "Retrieves a handle to a window whose class name and window name match the specified strings. The function searches child windows, beginning with the one following the specified child window. This function does not perform a case-sensitive search.", "parameters": [{"name": "hWndParent", "type": "HWND", "description": "A handle to the parent window whose child windows are to be searched.\nIf hwndParent is NULL, the function uses the desktop window as the parent window. The function searches among windows that are child windows of the desktop.\nIf hwndParent is HWND_MESSAGE, the function searches all message-only windows.", "possible_constants": []}, {"name": "hWndChildAfter", "type": "HWND", "description": "A handle to a child window. The search begins with the next child window in the Z order. The child window must be a direct child window of hwndParent, not just a descendant window.\nIf hwndChildAfter is NULL, the search begins with the first child window of hwndParent.\nNote that if both hwndParent and hwndChildAfter are NULL, the function searches all top-level and message-only windows.", "possible_constants": []}, {"name": "lpszClass", "type": "LPCTSTR", "description": "The class name or a class atom created by a previous call to the RegisterClass or RegisterClassEx function. The atom must be placed in the low-order word of lpszClass; the high-order word must be zero.", "possible_constants": []}, {"name": "If lpszClass is a string, it specifies the window class name. The class name can be any name registered with RegisterClass or RegisterClassEx, or any of the predefined control-class names, or it can be MAKEINTATOM(0x8000). In this latter case, 0x8000 is the atom for a menu class. For more information, see the Remarks section of this topic.", "type": "", "description": "", "possible_constants": []}, {"name": "lpszWindow", "type": "LPCTSTR", "description": "The window name (the window's title). If this parameter is NULL, all window names match.", "possible_constants": []}]}, {"name": "FindWindowW", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-findwindoww", "description": "Retrieves a handle to the top-level window whose class name and window name match the specified strings. This function does not search child windows. This function does not perform a case-sensitive search.", "parameters": [{"name": "lpClassName", "type": "LPCTSTR", "description": "The class name or a class atom created by a previous call to the RegisterClass or RegisterClassEx function. The atom must be in the low-order word of lpClassName; the high-order word must be zero.\nIf lpClassName points to a string, it specifies the window class name. The class name can be any name registered with RegisterClass or RegisterClassEx, or any of the predefined control-class names.\nIf lpClassName is NULL, it finds any window whose title matches the lpWindowName parameter.", "possible_constants": []}, {"name": "lpWindowName", "type": "LPCTSTR", "description": "The window name (the window's title). If this parameter is NULL, all window names match.", "possible_constants": []}]}, {"name": "FlashWindow", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-flashwindow", "description": "Flashes the specified window one time. It does not change the active state of the window.", "parameters": [{"name": "hWnd", "type": "", "description": "A handle to the window to be flashed. The window can be either open or minimized.", "possible_constants": []}, {"name": "bInvert", "type": "", "description": "If this parameter is TRUE, the window is flashed from one state to the other. If it is FALSE, the window is returned to its original state (either active or inactive).\nWhen an application is minimized and this parameter is TRUE, the taskbar window button flashes active/inactive. If it is FALSE, the taskbar window button flashes inactive, meaning that it does not change colors. It flashes, as if it were being redrawn, but it does not provide the visual invert clue to the user.", "possible_constants": []}]}, {"name": "FlashWindowEx", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-flashwindowex", "description": "Flashes the specified window. It does not change the active state of the window.", "parameters": [{"name": "pfwi", "type": "", "description": "A pointer to a\nFLASHWINFO structure.", "possible_constants": []}]}, {"name": "FrameRect", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-framerect", "description": "The FrameRect function draws a border around the specified rectangle by using the specified brush. The width and height of the border are always one logical unit.", "parameters": [{"name": "hDC", "type": "", "description": "A handle to the device context in which the border is drawn.", "possible_constants": []}, {"name": "lprc", "type": "", "description": "A pointer to a RECT structure that contains the logical coordinates of the upper-left and lower-right corners of the rectangle.", "possible_constants": []}, {"name": "hbr", "type": "", "description": "A handle to the brush used to draw the border.", "possible_constants": []}]}, {"name": "GET_APPCOMMAND_LPARAM", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-get_appcommand_lparam", "description": "Retrieves the application command from the specified\nLPARAM value.", "parameters": [{"name": "lParam", "type": "", "description": "The value to be converted.", "possible_constants": []}]}, {"name": "GET_DEVICE_LPARAM", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-get_device_lparam", "description": "Retrieves the input device type from the specified\nLPARAM value.", "parameters": [{"name": "lParam", "type": "", "description": "The value to be converted.", "possible_constants": []}]}, {"name": "GET_FLAGS_LPARAM", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-get_flags_lparam", "description": "Retrieves the state of certain virtual keys from the specified\nLPARAM value.", "parameters": [{"name": "lParam", "type": "", "description": "The value to be converted.", "possible_constants": []}]}, {"name": "GET_KEYSTATE_LPARAM", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-get_keystate_lparam", "description": "Retrieves the state of certain virtual keys from the specified LPARAM value.", "parameters": [{"name": "lParam", "type": "", "description": "The value to be converted.", "possible_constants": []}]}, {"name": "GET_KEYSTATE_WPARAM", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-get_keystate_wparam", "description": "Retrieves the state of certain virtual keys from the specified WPARAM value.", "parameters": [{"name": "wParam", "type": "", "description": "The value to be converted.", "possible_constants": []}]}, {"name": "GET_NCHITTEST_WPARAM", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-get_nchittest_wparam", "description": "Retrieves the hit-test value from the specified\nWPARAM value.", "parameters": [{"name": "wParam", "type": "", "description": "The value to be converted.", "possible_constants": []}]}, {"name": "GET_POINTERID_WPARAM", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-get_pointerid_wparam", "description": "Retrieves the pointer ID using the specified value.", "parameters": [{"name": "wParam", "type": "", "description": "The value to be converted.", "possible_constants": []}]}, {"name": "GET_RAWINPUT_CODE_WPARAM", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-get_rawinput_code_wparam", "description": "Retrieves the input code from wParam in WM_INPUT message.", "parameters": [{"name": "wParam", "type": "", "description": "wParam from WM_INPUT message.", "possible_constants": []}]}, {"name": "GET_WHEEL_DELTA_WPARAM", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-get_wheel_delta_wparam", "description": "Retrieves the wheel-delta value from the specified WPARAM value.", "parameters": [{"name": "wParam", "type": "", "description": "The value to be converted.", "possible_constants": []}]}, {"name": "GET_XBUTTON_WPARAM", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-get_xbutton_wparam", "description": "Retrieves the state of certain buttons from the specified WPARAM value.", "parameters": [{"name": "wParam", "type": "", "description": "The value to be converted.", "possible_constants": []}]}, {"name": "GetActiveWindow", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getactivewindow", "description": "Retrieves the window handle to the active window attached to the calling thread's message queue.", "parameters": []}, {"name": "GetAltTabInfoA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getalttabinfoa", "description": "Retrieves status information for the specified window if it is the application-switching (ALT+TAB) window.", "parameters": [{"name": "hwnd", "type": "HWND", "description": "A handle to the window for which status information will be retrieved. This window must be the application-switching window.", "possible_constants": []}, {"name": "iItem", "type": "int", "description": "The index of the icon in the application-switching window. If the pszItemText parameter is not NULL, the name of the item is copied to the pszItemText string. If this parameter is \u00e2\u0080\u00931, the name of the item is not copied.", "possible_constants": []}, {"name": "pati", "type": "PALTTABINFO", "description": "", "possible_constants": []}, {"name": "A pointer to an ALTTABINFO structure to receive the status information. Note that you must set the csSize member to sizeof(ALTTABINFO) before calling this function.", "type": "", "description": "", "possible_constants": []}, {"name": "pszItemText", "type": "LPTSTR", "description": "The name of the item. If this parameter is NULL, the name of the item is not copied.", "possible_constants": []}, {"name": "cchItemText", "type": "UINT", "description": "The size, in characters, of the pszItemText buffer.", "possible_constants": []}]}, {"name": "GetAltTabInfoW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getalttabinfow", "description": "Retrieves status information for the specified window if it is the application-switching (ALT+TAB) window.", "parameters": [{"name": "hwnd", "type": "HWND", "description": "A handle to the window for which status information will be retrieved. This window must be the application-switching window.", "possible_constants": []}, {"name": "iItem", "type": "int", "description": "The index of the icon in the application-switching window. If the pszItemText parameter is not NULL, the name of the item is copied to the pszItemText string. If this parameter is \u00e2\u0080\u00931, the name of the item is not copied.", "possible_constants": []}, {"name": "pati", "type": "PALTTABINFO", "description": "", "possible_constants": []}, {"name": "A pointer to an ALTTABINFO structure to receive the status information. Note that you must set the csSize member to sizeof(ALTTABINFO) before calling this function.", "type": "", "description": "", "possible_constants": []}, {"name": "pszItemText", "type": "LPTSTR", "description": "The name of the item. If this parameter is NULL, the name of the item is not copied.", "possible_constants": []}, {"name": "cchItemText", "type": "UINT", "description": "The size, in characters, of the pszItemText buffer.", "possible_constants": []}]}, {"name": "GetAncestor", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getancestor", "description": "Retrieves the handle to the ancestor of the specified window.", "parameters": [{"name": "hwnd", "type": "HWND", "description": "A handle to the window whose ancestor is to be retrieved. If this parameter is the desktop window, the function returns NULL.", "possible_constants": []}, {"name": "gaFlags", "type": "UINT", "description": "The ancestor to be retrieved. This parameter can be one of the following values.", "possible_constants": [["GA_PARENT", -1], ["GA_ROOT", -1], ["GA_ROOTOWNER", -1]]}]}, {"name": "GetAsyncKeyState", "return_type": "SHORT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getasynckeystate", "description": "Determines whether a key is up or down at the time the function is called, and whether the key was pressed after a previous call to GetAsyncKeyState.", "parameters": [{"name": "vKey", "type": "int", "description": "The virtual-key code. For more information, see Virtual Key Codes.\nYou can use left- and right-distinguishing constants to specify certain keys. See the Remarks section for further information.", "possible_constants": []}]}, {"name": "GetAutoRotationState", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getautorotationstate", "description": "Retrieves an AR_STATE value containing the state of screen auto-rotation for the system, for example whether auto-rotation is supported, and whether it is enabled by the user. GetAutoRotationState provides a robust and diverse way of querying for auto-rotation state, and more. For example, if you want your app to behave differently when multiple monitors are attached then you can determine that from the AR_STATE returned.", "parameters": [{"name": "pState", "type": "", "description": "Pointer to a location in memory that will receive the current state of auto-rotation for the system.", "possible_constants": []}]}, {"name": "GetAwarenessFromDpiAwarenessContext", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getawarenessfromdpiawarenesscontext", "description": "Retrieves the DPI_AWARENESS value from a DPI_AWARENESS_CONTEXT.", "parameters": [{"name": "value", "type": "", "description": "The DPI_AWARENESS_CONTEXT you want to examine.", "possible_constants": []}]}, {"name": "GetCapture", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getcapture", "description": "Retrieves a handle to the window (if any) that has captured the mouse. Only one window at a time can capture the mouse; this window receives mouse input whether or not the cursor is within its borders.", "parameters": []}, {"name": "GetCaretBlinkTime", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getcaretblinktime", "description": "Retrieves the time required to invert the caret's pixels.\nThe user can set this value.", "parameters": []}, {"name": "GetCaretPos", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getcaretpos", "description": "Copies the caret's position to the specified POINT structure.", "parameters": [{"name": "lpPoint", "type": "LPPOINT", "description": "A pointer to the POINT structure that is to receive the client coordinates of the caret.", "possible_constants": []}]}, {"name": "GetCIMSSM", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getcimssm", "description": "[GetCIMSSM may be altered or unavailable in the future. Instead, use GetCurrentInputMessageSource.]\nRetrieves the source of the input message (GetCurrentInputMessageSourceInSendMessage).\nSyntax\nBOOL GetCIMSSM(\n  INPUT_MESSAGE_SOURCE *inputMessageSource\n);\n\nParameters\ninputMessageSource\nThe INPUT_MESSAGE_SOURCE structure that holds the device type and the ID of the input message source.\nReturn value\nIf this function succeeds, it returns TRUE. Otherwise, it returns ERROR_INVALID_PARAMETER.\nThis function fails when:\nThe input parameter is invalid.\n\nGetCurrentInputMessageSource returns a value other than IMDT_UNAVAILABLE for the device type.\n\nRemarks\nGetCIMSSM should be used only when GetCurrentInputMessageSource returns a device type of IMDT_UNAVAILABLE.\nRequirements\n\n\n\n\u00c2\u00a0\n\u00c2\u00a0\n\n\n\n\nMinimum supported client\nWindows\u00c2\u00a08 [desktop apps only]\n\n\nMinimum supported server\nWindows Server\u00c2\u00a02012 [desktop apps only]\n\n\nTarget Platform\nWindows\n\n\nHeader\nwinuser.h\n\n\nLibrary\nUser32.lib\n\n\nDLL\nUser32.dll\n\n\n\nSee also\nInput Source Identification Reference", "parameters": [{"name": "inputMessageSource", "type": "", "description": "The INPUT_MESSAGE_SOURCE structure that holds the device type and the ID of the input message source.", "possible_constants": []}]}, {"name": "GetClassInfoA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclassinfoa", "description": "Retrieves information about a window class.", "parameters": [{"name": "hInstance", "type": "HINSTANCE", "description": "A handle to the instance of the application that created the class. To retrieve information about classes defined by the system (such as buttons or list boxes), set this parameter to NULL.", "possible_constants": []}, {"name": "lpClassName", "type": "LPCTSTR", "description": "The class name. The name must be that of a preregistered class or a class registered by a previous call to the RegisterClass or RegisterClassEx function.\nAlternatively, this parameter can be an atom. If so, it must be a class atom created by a previous call to RegisterClass or RegisterClassEx. The atom must be in the low-order word of\nlpClassName; the high-order word must be zero.", "possible_constants": []}, {"name": "lpWndClass", "type": "LPWNDCLASS", "description": "A pointer to a WNDCLASS structure that receives the information about the class.", "possible_constants": []}]}, {"name": "GetClassInfoExA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclassinfoexa", "description": "Retrieves information about a window class, including a handle to the small icon associated with the window class. The GetClassInfo function does not retrieve a handle to the small icon.", "parameters": [{"name": "hInstance", "type": "HINSTANCE", "description": "A handle to the instance of the application that created the class. To retrieve information about classes defined by the system (such as buttons or list boxes), set this parameter to NULL.", "possible_constants": []}, {"name": "lpszClass", "type": "LPCTSTR", "description": "The class name. The name must be that of a preregistered class or a class registered by a previous call to the RegisterClass or RegisterClassEx function. Alternatively, this parameter can be a class atom created by a previous call to RegisterClass or RegisterClassEx. The atom must be in the low-order word of\nlpszClass; the high-order word must be zero.", "possible_constants": []}, {"name": "lpwcx", "type": "LPWNDCLASSEX", "description": "A pointer to a WNDCLASSEX structure that receives the information about the class.", "possible_constants": []}]}, {"name": "GetClassInfoExW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclassinfoexw", "description": "Retrieves information about a window class, including a handle to the small icon associated with the window class. The GetClassInfo function does not retrieve a handle to the small icon.", "parameters": [{"name": "hInstance", "type": "HINSTANCE", "description": "A handle to the instance of the application that created the class. To retrieve information about classes defined by the system (such as buttons or list boxes), set this parameter to NULL.", "possible_constants": []}, {"name": "lpszClass", "type": "LPCTSTR", "description": "The class name. The name must be that of a preregistered class or a class registered by a previous call to the RegisterClass or RegisterClassEx function. Alternatively, this parameter can be a class atom created by a previous call to RegisterClass or RegisterClassEx. The atom must be in the low-order word of\nlpszClass; the high-order word must be zero.", "possible_constants": []}, {"name": "lpwcx", "type": "LPWNDCLASSEX", "description": "A pointer to a WNDCLASSEX structure that receives the information about the class.", "possible_constants": []}]}, {"name": "GetClassInfoW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclassinfow", "description": "Retrieves information about a window class.", "parameters": [{"name": "hInstance", "type": "HINSTANCE", "description": "A handle to the instance of the application that created the class. To retrieve information about classes defined by the system (such as buttons or list boxes), set this parameter to NULL.", "possible_constants": []}, {"name": "lpClassName", "type": "LPCTSTR", "description": "The class name. The name must be that of a preregistered class or a class registered by a previous call to the RegisterClass or RegisterClassEx function.\nAlternatively, this parameter can be an atom. If so, it must be a class atom created by a previous call to RegisterClass or RegisterClassEx. The atom must be in the low-order word of\nlpClassName; the high-order word must be zero.", "possible_constants": []}, {"name": "lpWndClass", "type": "LPWNDCLASS", "description": "A pointer to a WNDCLASS structure that receives the information about the class.", "possible_constants": []}]}, {"name": "GetClassLongA", "return_type": "DWORD", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclasslonga", "description": "Retrieves the specified 32-bit (DWORD) value from the WNDCLASSEX structure associated with the specified window.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window and, indirectly, the class to which the window belongs.", "possible_constants": []}, {"name": "nIndex", "type": "int", "description": "The value to be retrieved. To retrieve a value from the extra class memory, specify the positive, zero-based byte offset of the value to be retrieved. Valid values are in the range zero through the number of bytes of extra class memory, minus four; for example, if you specified 12 or more bytes of extra class memory, a value of 8 would be an index to the third integer. To retrieve any other value from the WNDCLASSEX structure, specify one of the following values.", "possible_constants": [["GCW_ATOM", -1], ["GCL_CBCLSEXTRA", -1], ["GCL_CBWNDEXTRA", -1], ["GCL_HBRBACKGROUND", -1], ["GCL_HCURSOR", -1], ["GCL_HICON", -1], ["GCL_HICONSM", -1], ["GCL_HMODULE", -1], ["GCL_MENUNAME", -1], ["GCL_STYLE", -1], ["GCL_WNDPROC", -1]]}]}, {"name": "GetClassLongPtrA", "return_type": "ULONG_PTR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclasslongptra", "description": "Retrieves the specified value from the WNDCLASSEX structure associated with the specified window.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window and, indirectly, the class to which the window belongs.", "possible_constants": []}, {"name": "nIndex", "type": "int", "description": "The value to be retrieved. To retrieve a value from the extra class memory, specify the positive, zero-based byte offset of the value to be retrieved. Valid values are in the range zero through the number of bytes of extra class memory, minus eight; for example, if you specified 24 or more bytes of extra class memory, a value of 16 would be an index to the third integer. To retrieve any other value from the WNDCLASSEX structure, specify one of the following values.", "possible_constants": [["GCW_ATOM", -1], ["GCL_CBCLSEXTRA", -1], ["GCL_CBWNDEXTRA", -1], ["GCLP_HBRBACKGROUND", -1], ["GCLP_HCURSOR", -1], ["GCLP_HICON", -1], ["GCLP_HICONSM", -1], ["GCLP_HMODULE", -1], ["GCLP_MENUNAME", -1], ["GCL_STYLE", -1], ["GCLP_WNDPROC", -1]]}]}, {"name": "GetClassLongPtrW", "return_type": "ULONG_PTR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclasslongptrw", "description": "Retrieves the specified value from the WNDCLASSEX structure associated with the specified window.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window and, indirectly, the class to which the window belongs.", "possible_constants": []}, {"name": "nIndex", "type": "int", "description": "The value to be retrieved. To retrieve a value from the extra class memory, specify the positive, zero-based byte offset of the value to be retrieved. Valid values are in the range zero through the number of bytes of extra class memory, minus eight; for example, if you specified 24 or more bytes of extra class memory, a value of 16 would be an index to the third integer. To retrieve any other value from the WNDCLASSEX structure, specify one of the following values.", "possible_constants": [["GCW_ATOM", -1], ["GCL_CBCLSEXTRA", -1], ["GCL_CBWNDEXTRA", -1], ["GCLP_HBRBACKGROUND", -1], ["GCLP_HCURSOR", -1], ["GCLP_HICON", -1], ["GCLP_HICONSM", -1], ["GCLP_HMODULE", -1], ["GCLP_MENUNAME", -1], ["GCL_STYLE", -1], ["GCLP_WNDPROC", -1]]}]}, {"name": "GetClassLongW", "return_type": "DWORD", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclasslongw", "description": "Retrieves the specified 32-bit (DWORD) value from the WNDCLASSEX structure associated with the specified window.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window and, indirectly, the class to which the window belongs.", "possible_constants": []}, {"name": "nIndex", "type": "int", "description": "The value to be retrieved. To retrieve a value from the extra class memory, specify the positive, zero-based byte offset of the value to be retrieved. Valid values are in the range zero through the number of bytes of extra class memory, minus four; for example, if you specified 12 or more bytes of extra class memory, a value of 8 would be an index to the third integer. To retrieve any other value from the WNDCLASSEX structure, specify one of the following values.", "possible_constants": [["GCW_ATOM", -1], ["GCL_CBCLSEXTRA", -1], ["GCL_CBWNDEXTRA", -1], ["GCL_HBRBACKGROUND", -1], ["GCL_HCURSOR", -1], ["GCL_HICON", -1], ["GCL_HICONSM", -1], ["GCL_HMODULE", -1], ["GCL_MENUNAME", -1], ["GCL_STYLE", -1], ["GCL_WNDPROC", -1]]}]}, {"name": "GetClassName", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclassname", "description": "Retrieves the name of the class to which the specified window belongs.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window and, indirectly, the class to which the window belongs.", "possible_constants": []}, {"name": "lpClassName", "type": "LPTSTR", "description": "The class name string.", "possible_constants": []}, {"name": "nMaxCount", "type": "int", "description": "", "possible_constants": []}, {"name": "The length of the lpClassName buffer, in characters. The buffer must be large enough to include the terminating null character; otherwise, the class name string is truncated to nMaxCount-1 characters.", "type": "", "description": "", "possible_constants": []}]}, {"name": "GetClassNameA", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclassnamea", "description": "Retrieves the name of the class to which the specified window belongs.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window and, indirectly, the class to which the window belongs.", "possible_constants": []}, {"name": "lpClassName", "type": "LPTSTR", "description": "The class name string.", "possible_constants": []}, {"name": "nMaxCount", "type": "int", "description": "", "possible_constants": []}, {"name": "The length of the lpClassName buffer, in characters. The buffer must be large enough to include the terminating null character; otherwise, the class name string is truncated to nMaxCount-1 characters.", "type": "", "description": "", "possible_constants": []}]}, {"name": "GetClassNameW", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclassnamew", "description": "Retrieves the name of the class to which the specified window belongs.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window and, indirectly, the class to which the window belongs.", "possible_constants": []}, {"name": "lpClassName", "type": "LPTSTR", "description": "The class name string.", "possible_constants": []}, {"name": "nMaxCount", "type": "int", "description": "", "possible_constants": []}, {"name": "The length of the lpClassName buffer, in characters. The buffer must be large enough to include the terminating null character; otherwise, the class name string is truncated to nMaxCount-1 characters.", "type": "", "description": "", "possible_constants": []}]}, {"name": "GetClassWord", "return_type": "WORD", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclassword", "description": "Retrieves the 16-bit (WORD) value at the specified offset into the extra class memory for the window class to which the specified window belongs.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window and, indirectly, the class to which the window belongs.", "possible_constants": []}, {"name": "nIndex", "type": "int", "description": "The zero-based byte offset of the value to be retrieved. Valid values are in the range zero through the number of bytes of class memory, minus two; for example, if you specified 10 or more bytes of extra class memory, a value of eight would be an index to the fifth 16-bit integer. There is an additional valid value as shown in the following table.", "possible_constants": [["GCW_ATOM", -1]]}]}, {"name": "GetClientRect", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclientrect", "description": "Retrieves the coordinates of a window's client area. The client coordinates specify the upper-left and lower-right corners of the client area. Because client coordinates are relative to the upper-left corner of a window's client area, the coordinates of the upper-left corner are (0,0).", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window whose client coordinates are to be retrieved.", "possible_constants": []}, {"name": "lpRect", "type": "LPRECT", "description": "A pointer to a RECT structure that receives the client coordinates. The left and top members are zero. The right and bottom members contain the width and height of the window.", "possible_constants": []}]}, {"name": "GetClipboardData", "return_type": "HANDLE", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclipboarddata", "description": "Retrieves data from the clipboard in a specified format. The clipboard must have been opened previously.", "parameters": [{"name": "uFormat", "type": "UINT", "description": "A clipboard format. For a description of the standard clipboard formats, see Standard Clipboard Formats.", "possible_constants": []}]}, {"name": "GetClipboardFormatNameA", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclipboardformatnamea", "description": "Retrieves from the clipboard the name of the specified registered format. The function copies the name to the specified buffer.", "parameters": [{"name": "format", "type": "UINT", "description": "The type of format to be retrieved. This parameter must not specify any of the predefined clipboard formats.", "possible_constants": []}, {"name": "lpszFormatName", "type": "LPTSTR", "description": "The buffer that is to receive the format name.", "possible_constants": []}, {"name": "cchMaxCount", "type": "int", "description": "The maximum length, in\ncharacters, of the string to be copied to the buffer. If the name exceeds this limit, it is truncated.", "possible_constants": []}]}, {"name": "GetClipboardFormatNameW", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclipboardformatnamew", "description": "Retrieves from the clipboard the name of the specified registered format. The function copies the name to the specified buffer.", "parameters": [{"name": "format", "type": "UINT", "description": "The type of format to be retrieved. This parameter must not specify any of the predefined clipboard formats.", "possible_constants": []}, {"name": "lpszFormatName", "type": "LPTSTR", "description": "The buffer that is to receive the format name.", "possible_constants": []}, {"name": "cchMaxCount", "type": "int", "description": "The maximum length, in\ncharacters, of the string to be copied to the buffer. If the name exceeds this limit, it is truncated.", "possible_constants": []}]}, {"name": "GetClipboardOwner", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclipboardowner", "description": "Retrieves the window handle of the current owner of the clipboard.", "parameters": []}, {"name": "GetClipboardSequenceNumber", "return_type": "DWORD", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclipboardsequencenumber", "description": "Retrieves the clipboard sequence number for the current window station.", "parameters": []}, {"name": "GetClipboardViewer", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclipboardviewer", "description": "Retrieves the handle to the first window in the clipboard viewer chain.", "parameters": []}, {"name": "GetClipCursor", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclipcursor", "description": "Retrieves the screen coordinates of the rectangular area to which the cursor is confined.", "parameters": [{"name": "lpRect", "type": "LPRECT", "description": "A pointer to a RECT structure that receives the screen coordinates of the confining rectangle. The structure receives the dimensions of the screen if the cursor is not confined to a rectangle.", "possible_constants": []}]}, {"name": "GetComboBoxInfo", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getcomboboxinfo", "description": "Retrieves information about the specified combo box.", "parameters": [{"name": "hwndCombo", "type": "HWND", "description": "A handle to the combo box.", "possible_constants": []}, {"name": "pcbi", "type": "PCOMBOBOXINFO", "description": "A pointer to a COMBOBOXINFO structure that receives the information. You must set COMBOBOXINFO.cbSize before calling this function.", "possible_constants": []}]}, {"name": "GetCurrentInputMessageSource", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getcurrentinputmessagesource", "description": "Retrieves the source of the input message.", "parameters": [{"name": "inputMessageSource", "type": "", "description": "The INPUT_MESSAGE_SOURCE structure that holds the device type and the ID of the input message source.", "possible_constants": []}]}, {"name": "GetCursor", "return_type": "HCURSOR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getcursor", "description": "Retrieves a handle to the current cursor.", "parameters": []}, {"name": "GetCursorInfo", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getcursorinfo", "description": "Retrieves information about the global cursor.", "parameters": [{"name": "pci", "type": "PCURSORINFO", "description": "", "possible_constants": []}, {"name": "A pointer to a CURSORINFO structure that receives the information. Note that you must set the cbSize member to sizeof(CURSORINFO) before calling this function.", "type": "", "description": "", "possible_constants": []}]}, {"name": "GetCursorPos", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getcursorpos", "description": "Retrieves the position of the mouse cursor, in screen coordinates.", "parameters": [{"name": "lpPoint", "type": "LPPOINT", "description": "A pointer to a POINT structure that receives the screen coordinates of the cursor.", "possible_constants": []}]}, {"name": "GetDC", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdc", "description": "The GetDC function retrieves a handle to a device context (DC) for the client area of a specified window or for the entire screen. You can use the returned handle in subsequent GDI functions to draw in the DC. The device context is an opaque data structure, whose values are used internally by GDI.", "parameters": [{"name": "hWnd", "type": "", "description": "A handle to the window whose DC is to be retrieved. If this value is NULL, GetDC retrieves the DC for the entire screen.", "possible_constants": []}]}, {"name": "GetDCEx", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdcex", "description": "The GetDCEx function retrieves a handle to a device context (DC) for the client area of a specified window or for the entire screen. You can use the returned handle in subsequent GDI functions to draw in the DC. The device context is an opaque data structure, whose values are used internally by GDI.", "parameters": [{"name": "hWnd", "type": "", "description": "A handle to the window whose DC is to be retrieved. If this value is NULL, GetDCEx retrieves the DC for the entire screen.", "possible_constants": []}, {"name": "hrgnClip", "type": "", "description": "A clipping region that may be combined with the visible region of the DC. If the value of flags is DCX_INTERSECTRGN or DCX_EXCLUDERGN, then the operating system assumes ownership of the region and will automatically delete it when it is no longer needed. In this case, the application should not use or delete the region after a successful call to GetDCEx.", "possible_constants": []}, {"name": "flags", "type": "", "description": "Specifies how the DC is created. This parameter can be one or more of the following values.", "possible_constants": [["DCX_WINDOW", -1], ["DCX_CACHE", -1], ["DCX_PARENTCLIP", -1], ["DCX_CLIPSIBLINGS", -1], ["DCX_CLIPCHILDREN", -1], ["DCX_NORESETATTRS", -1], ["DCX_LOCKWINDOWUPDATE", -1], ["DCX_EXCLUDERGN", -1], ["DCX_INTERSECTRGN", -1], ["DCX_INTERSECTUPDATE", -1], ["DCX_VALIDATE", -1]]}]}, {"name": "GetDesktopWindow", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdesktopwindow", "description": "Retrieves a handle to the desktop window. The desktop window covers the entire screen. The desktop window is the area on top of which other windows are painted.", "parameters": []}, {"name": "GetDialogBaseUnits", "return_type": "LONG", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdialogbaseunits", "description": "Retrieves the system's dialog base units, which are the average width and height of characters in the system font. For dialog boxes that use the system font, you can use these values to convert between dialog template units, as specified in dialog box templates, and pixels. For dialog boxes that do not use the system font, the conversion from dialog template units to pixels depends on the font used by the dialog box.", "parameters": []}, {"name": "GetDialogControlDpiChangeBehavior", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdialogcontroldpichangebehavior", "description": "Retrieves and per-monitor DPI scaling behavior overrides of a child window in a dialog.", "parameters": [{"name": "hWnd", "type": "", "description": "The handle for the window to examine.", "possible_constants": []}]}, {"name": "GetDialogDpiChangeBehavior", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdialogdpichangebehavior", "description": "Returns the flags that might have been set on a given dialog by an earlier call to SetDialogDpiChangeBehavior.", "parameters": [{"name": "hDlg", "type": "", "description": "The handle for the dialog to examine.", "possible_constants": []}]}, {"name": "GetDisplayAutoRotationPreferences", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdisplayautorotationpreferences", "description": "Retrieves the screen auto-rotation preferences for the current process.", "parameters": [{"name": "pOrientation", "type": "", "description": "Pointer to a location in memory that will receive the current orientation preference setting for the calling process.", "possible_constants": []}]}, {"name": "GetDisplayAutoRotationPreferencesByProcessId", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdisplayautorotationpreferencesbyprocessid", "description": "Retrieves the screen auto-rotation preferences for the process indicated by the dwProcessId parameter.", "parameters": [{"name": "dwProcessId", "type": "", "description": "The process to get preference settings for.", "possible_constants": []}, {"name": "pOrientation", "type": "", "description": "Pointer to a location in memory that will receive the current orientation preference setting for the indicated process.", "possible_constants": []}, {"name": "fRotateScreen", "type": "", "description": "Pointer to a location in memory that will receive a TRUE or FALSE value indicating whether the screen was rotated to comply with the process orientation preferences.", "possible_constants": []}]}, {"name": "GetDisplayConfigBufferSizes", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdisplayconfigbuffersizes", "description": "The GetDisplayConfigBufferSizes function retrieves the size of the buffers that are required to call the QueryDisplayConfig function.", "parameters": [{"name": "flags", "type": "", "description": "The type of information to retrieve. The value for the Flags parameter must be one of the following values.", "possible_constants": []}]}, {"name": "GetDlgCtrlID", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdlgctrlid", "description": "Retrieves the identifier of the specified control.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the control.", "possible_constants": []}]}, {"name": "GetDlgItem", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdlgitem", "description": "Retrieves a handle to a control in the specified dialog box.", "parameters": [{"name": "hDlg", "type": "HWND", "description": "A handle to the dialog box that contains the control.", "possible_constants": []}, {"name": "nIDDlgItem", "type": "int", "description": "The identifier of the control to be retrieved.", "possible_constants": []}]}, {"name": "GetDlgItemInt", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdlgitemint", "description": "Translates the text of a specified control in a dialog box into an integer value.", "parameters": [{"name": "hDlg", "type": "HWND", "description": "A handle to the dialog box that contains the control of interest.", "possible_constants": []}, {"name": "nIDDlgItem", "type": "int", "description": "The identifier of the control whose text is to be translated.", "possible_constants": []}, {"name": "lpTranslated", "type": "BOOL*", "description": "Indicates success or failure (TRUE indicates success, FALSE indicates failure).\nIf this parameter is NULL, the function returns no information about success or failure.", "possible_constants": []}, {"name": "bSigned", "type": "BOOL", "description": "Indicates whether the function should examine the text for a minus sign at the beginning and return a signed integer value if it finds one (TRUE specifies this should be done, FALSE that it should not).", "possible_constants": []}]}, {"name": "GetDlgItemTextA", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdlgitemtexta", "description": "Retrieves the title or text associated with a control in a dialog box.", "parameters": [{"name": "hDlg", "type": "HWND", "description": "A handle to the dialog box that contains the control.", "possible_constants": []}, {"name": "nIDDlgItem", "type": "int", "description": "The identifier of the control whose title or text is to be retrieved.", "possible_constants": []}, {"name": "lpString", "type": "LPTSTR", "description": "The buffer to receive the title or text.", "possible_constants": []}, {"name": "cchMax", "type": "int", "description": "The maximum length, in characters, of the string to be copied to the buffer pointed to by lpString. If the length of the string, including the null character, exceeds the limit, the string is truncated.", "possible_constants": []}]}, {"name": "GetDlgItemTextW", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdlgitemtextw", "description": "Retrieves the title or text associated with a control in a dialog box.", "parameters": [{"name": "hDlg", "type": "HWND", "description": "A handle to the dialog box that contains the control.", "possible_constants": []}, {"name": "nIDDlgItem", "type": "int", "description": "The identifier of the control whose title or text is to be retrieved.", "possible_constants": []}, {"name": "lpString", "type": "LPTSTR", "description": "The buffer to receive the title or text.", "possible_constants": []}, {"name": "cchMax", "type": "int", "description": "The maximum length, in characters, of the string to be copied to the buffer pointed to by lpString. If the length of the string, including the null character, exceeds the limit, the string is truncated.", "possible_constants": []}]}, {"name": "GetDoubleClickTime", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdoubleclicktime", "description": "Retrieves the current double-click time for the mouse. A double-click is a series of two clicks of the mouse button, the second occurring within a specified time after the first. The double-click time is the maximum number of milliseconds that may occur between the first and second click of a double-click. The maximum double-click time is 5000 milliseconds.", "parameters": []}, {"name": "GetDpiForSystem", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdpiforsystem", "description": "Returns the system DPI.", "parameters": []}, {"name": "GetDpiForWindow", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdpiforwindow", "description": "Returns the dots per inch (dpi) value for the associated window.", "parameters": [{"name": "hwnd", "type": "", "description": "The window you want to get information about.", "possible_constants": []}]}, {"name": "GetDpiFromDpiAwarenessContext", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdpifromdpiawarenesscontext", "description": "Retrieves the DPI from a given DPI_AWARENESS_CONTEXT handle. This enables you to determine the DPI of a thread without needed to examine a window created within that thread.", "parameters": [{"name": "value", "type": "", "description": "The DPI_AWARENESS_CONTEXT handle to examine.", "possible_constants": []}]}, {"name": "GetFocus", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getfocus", "description": "Retrieves the handle to the window that has the keyboard focus, if the window is attached to the calling thread's message queue.", "parameters": []}, {"name": "GetForegroundWindow", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getforegroundwindow", "description": "Retrieves a handle to the foreground window (the window with which the user is currently working). The system assigns a slightly higher priority to the thread that creates the foreground window than it does to other threads.", "parameters": []}, {"name": "GetGestureConfig", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getgestureconfig", "description": "Retrieves the configuration for which Windows  Touch gesture messages are sent from a window.", "parameters": [{"name": "hwnd", "type": "", "description": "A handle to the window to get the gesture configuration from.", "possible_constants": []}, {"name": "dwReserved", "type": "", "description": "This value is reserved and must be set to 0.", "possible_constants": []}, {"name": "dwFlags", "type": "", "description": "A gesture command flag value indicating options for retrieving the gesture configuration.  See Remarks for additional information and supported values.", "possible_constants": []}, {"name": "pcIDs", "type": "", "description": "The size, in number of gesture configuration structures, that is in the pGestureConfig buffer.", "possible_constants": []}, {"name": "pGestureConfig", "type": "", "description": "An array of gesture configuration structures that specify the gesture configuration.", "possible_constants": []}, {"name": "cbSize", "type": "", "description": "The size of the gesture configuration (GESTURECONFIG) structure.", "possible_constants": []}]}, {"name": "GetGestureExtraArgs", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getgestureextraargs", "description": "Retrieves additional information about a gesture from its GESTUREINFO handle.", "parameters": [{"name": "hGestureInfo", "type": "", "description": "The handle to the gesture information that is passed in the lParam of a WM_GESTURE message.", "possible_constants": []}, {"name": "cbExtraArgs", "type": "", "description": "A count of the bytes of data stored in the extra arguments.", "possible_constants": []}, {"name": "pExtraArgs", "type": "", "description": "A pointer to the extra argument information.", "possible_constants": []}]}, {"name": "GetGestureInfo", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getgestureinfo", "description": "Retrieves a GESTUREINFO  structure given a handle to\nthe gesture information.", "parameters": [{"name": "hGestureInfo", "type": "", "description": "The gesture information handle.", "possible_constants": []}, {"name": "pGestureInfo", "type": "", "description": "A pointer to the gesture information structure.", "possible_constants": []}]}, {"name": "GetGuiResources", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getguiresources", "description": "Retrieves the count of handles to graphical user interface (GUI) objects in use by the specified process.", "parameters": [{"name": "hProcess", "type": "", "description": "A handle to the process. The handle must refer to a process in the current session, and must have the PROCESS_QUERY_INFORMATION access right (see Process security and access rights).\nIf this parameter is the special value GR_GLOBAL, then the resource usage is reported across all processes in the current session.\nWindows Server\u00c2\u00a02008, Windows\u00c2\u00a0Vista, Windows Server\u00c2\u00a02003, and Windows\u00c2\u00a0XP: The GR_GLOBAL value is not supported until Windows\u00c2\u00a07 and Windows Server\u00c2\u00a02008\u00c2\u00a0R2.", "possible_constants": []}, {"name": "uiFlags", "type": "", "description": "The GUI object type. This parameter can be one of the following values.", "possible_constants": [["GR_GDIOBJECTS", -1], ["GR_GDIOBJECTS_PEAK", -1], ["GR_USEROBJECTS", -1], ["GR_USEROBJECTS_PEAK", -1]]}]}, {"name": "GetGUIThreadInfo", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getguithreadinfo", "description": "Retrieves information about the active window or a specified GUI thread.", "parameters": [{"name": "idThread", "type": "DWORD", "description": "The identifier for the thread for which information is to be retrieved. To retrieve this value, use the GetWindowThreadProcessId function. If this parameter is NULL, the function returns information for the foreground thread.", "possible_constants": []}, {"name": "pgui", "type": "LPGUITHREADINFO", "description": "", "possible_constants": []}, {"name": "A pointer to a GUITHREADINFO structure that receives information describing the thread. Note that you must set the cbSize member to sizeof(GUITHREADINFO) before calling this function.", "type": "", "description": "", "possible_constants": []}]}, {"name": "GetIconInfo", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-geticoninfo", "description": "Retrieves information about the specified icon or cursor.", "parameters": [{"name": "hIcon", "type": "HICON", "description": "A handle to the icon or cursor. To retrieve information about a standard icon or cursor, specify one of the following values.", "possible_constants": [["IDC_APPSTARTING", -1], ["IDC_ARROW", -1], ["IDC_CROSS", -1], ["IDC_HAND", -1], ["IDC_HELP", -1], ["IDC_IBEAM", -1], ["IDC_NO", -1], ["IDC_SIZEALL", -1], ["IDC_SIZENESW", -1], ["IDC_SIZENS", -1], ["IDC_SIZENWSE", -1], ["IDC_SIZEWE", -1], ["IDC_UPARROW", -1], ["IDC_WAIT", -1], ["IDI_APPLICATION", -1], ["IDI_ASTERISK", -1], ["IDI_EXCLAMATION", -1], ["IDI_HAND", -1], ["IDI_QUESTION", -1], ["IDI_WINLOGO", -1]]}, {"name": "piconinfo", "type": "PICONINFO", "description": "A pointer to an ICONINFO structure. The function fills in the structure's members.", "possible_constants": []}]}, {"name": "GetIconInfoExA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-geticoninfoexa", "description": "Retrieves information about the specified icon or cursor. GetIconInfoEx extends GetIconInfo by using the newer ICONINFOEX structure.", "parameters": [{"name": "hicon", "type": "HICON", "description": "A handle to the icon or cursor. To retrieve information about a standard icon or cursor, specify one of the following values.", "possible_constants": [["IDC_APPSTARTING", -1], ["IDC_ARROW", -1], ["IDC_CROSS", -1], ["IDC_HAND", -1], ["IDC_HELP", -1], ["IDC_IBEAM", -1], ["IDC_NO", -1], ["IDC_SIZEALL", -1], ["IDC_SIZENESW", -1], ["IDC_SIZENS", -1], ["IDC_SIZENWSE", -1], ["IDC_SIZEWE", -1], ["IDC_UPARROW", -1], ["IDC_WAIT", -1], ["IDI_APPLICATION", -1], ["IDI_ASTERISK", -1], ["IDI_EXCLAMATION", -1], ["IDI_HAND", -1], ["IDI_QUESTION", -1], ["IDI_WINLOGO", -1]]}, {"name": "piconinfo", "type": "PICONINFOEX", "description": "When this method returns, contains a pointer to an ICONINFOEX structure. The function fills in the structure's members.", "possible_constants": []}]}, {"name": "GetIconInfoExW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-geticoninfoexw", "description": "Retrieves information about the specified icon or cursor. GetIconInfoEx extends GetIconInfo by using the newer ICONINFOEX structure.", "parameters": [{"name": "hicon", "type": "HICON", "description": "A handle to the icon or cursor. To retrieve information about a standard icon or cursor, specify one of the following values.", "possible_constants": [["IDC_APPSTARTING", -1], ["IDC_ARROW", -1], ["IDC_CROSS", -1], ["IDC_HAND", -1], ["IDC_HELP", -1], ["IDC_IBEAM", -1], ["IDC_NO", -1], ["IDC_SIZEALL", -1], ["IDC_SIZENESW", -1], ["IDC_SIZENS", -1], ["IDC_SIZENWSE", -1], ["IDC_SIZEWE", -1], ["IDC_UPARROW", -1], ["IDC_WAIT", -1], ["IDI_APPLICATION", -1], ["IDI_ASTERISK", -1], ["IDI_EXCLAMATION", -1], ["IDI_HAND", -1], ["IDI_QUESTION", -1], ["IDI_WINLOGO", -1]]}, {"name": "piconinfo", "type": "PICONINFOEX", "description": "When this method returns, contains a pointer to an ICONINFOEX structure. The function fills in the structure's members.", "possible_constants": []}]}, {"name": "GetInputState", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getinputstate", "description": "Determines whether there are mouse-button or keyboard messages in the calling thread's message queue.", "parameters": []}, {"name": "GetKBCodePage", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getkbcodepage", "description": "Retrieves the current code page.", "parameters": []}, {"name": "GetKeyboardLayout", "return_type": "HKL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getkeyboardlayout", "description": "Retrieves the active input locale identifier (formerly called the keyboard layout).", "parameters": [{"name": "idThread", "type": "DWORD", "description": "The identifier of the thread to query, or 0 for the current thread.", "possible_constants": []}]}, {"name": "GetKeyboardLayoutList", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getkeyboardlayoutlist", "description": "Retrieves the input locale identifiers (formerly called keyboard layout handles) corresponding to the current set of input locales in the system. The function copies the identifiers to the specified buffer.", "parameters": [{"name": "nBuff", "type": "int", "description": "The maximum number of handles that the buffer can hold.", "possible_constants": []}, {"name": "lpList", "type": "HKL*", "description": "A pointer to the buffer that receives the array of input locale identifiers.", "possible_constants": []}]}, {"name": "GetKeyboardLayoutNameA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getkeyboardlayoutnamea", "description": "Retrieves the name of the active input locale identifier (formerly called the keyboard layout) for the system.", "parameters": [{"name": "pwszKLID", "type": "LPTSTR", "description": "The buffer (of at least KL_NAMELENGTH characters in length) that receives the name of the input locale identifier, including the terminating null character. This will be a copy of the string provided to the LoadKeyboardLayout function, unless layout substitution took place.", "possible_constants": []}]}, {"name": "GetKeyboardLayoutNameW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getkeyboardlayoutnamew", "description": "Retrieves the name of the active input locale identifier (formerly called the keyboard layout) for the system.", "parameters": [{"name": "pwszKLID", "type": "LPTSTR", "description": "The buffer (of at least KL_NAMELENGTH characters in length) that receives the name of the input locale identifier, including the terminating null character. This will be a copy of the string provided to the LoadKeyboardLayout function, unless layout substitution took place.", "possible_constants": []}]}, {"name": "GetKeyboardState", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getkeyboardstate", "description": "Copies the status of the 256 virtual keys to the specified buffer.", "parameters": [{"name": "lpKeyState", "type": "PBYTE", "description": "The 256-byte array that receives the status data for each virtual key.", "possible_constants": []}]}, {"name": "GetKeyboardType", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getkeyboardtype", "description": "Retrieves information about the current keyboard.", "parameters": [{"name": "nTypeFlag", "type": "int", "description": "The type of keyboard information to be retrieved. This parameter can be one of the following values.", "possible_constants": [["0", -1], ["1", -1], ["2", -1]]}]}, {"name": "GetKeyNameTextA", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getkeynametexta", "description": "Retrieves a string that represents the name of a key.", "parameters": [{"name": "lParam", "type": "LONG", "description": "The second parameter of the keyboard message (such as\nWM_KEYDOWN) to be processed. The function interprets the following bit positions in the lParam.", "possible_constants": []}, {"name": "lpString", "type": "LPTSTR", "description": "The buffer that will receive the key name.", "possible_constants": []}, {"name": "cchSize", "type": "int", "description": "The maximum length, in characters, of the key name, including the terminating null character. (This parameter should be equal to the size of the buffer pointed to by the\nlpString parameter.)", "possible_constants": []}]}, {"name": "GetKeyNameTextW", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getkeynametextw", "description": "Retrieves a string that represents the name of a key.", "parameters": [{"name": "lParam", "type": "LONG", "description": "The second parameter of the keyboard message (such as\nWM_KEYDOWN) to be processed. The function interprets the following bit positions in the lParam.", "possible_constants": []}, {"name": "lpString", "type": "LPTSTR", "description": "The buffer that will receive the key name.", "possible_constants": []}, {"name": "cchSize", "type": "int", "description": "The maximum length, in characters, of the key name, including the terminating null character. (This parameter should be equal to the size of the buffer pointed to by the\nlpString parameter.)", "possible_constants": []}]}, {"name": "GetKeyState", "return_type": "SHORT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getkeystate", "description": "Retrieves the status of the specified virtual key. The status specifies whether the key is up, down, or toggled (on, off\u00e2\u0080\u0094alternating each time the key is pressed).", "parameters": [{"name": "nVirtKey", "type": "int", "description": "A virtual key. If the desired virtual key is a letter or digit (A through Z, a through z, or 0 through 9),\nnVirtKey must be set to the ASCII value of that character. For other keys, it must be a virtual-key code.\nIf a non-English keyboard layout is used, virtual keys with values in the range ASCII A through Z and 0 through 9 are used to specify most of the character keys. For example, for the German keyboard layout, the virtual key of value ASCII O (0x4F) refers to the \"o\" key, whereas VK_OEM_1 refers to the \"o with umlaut\" key.", "possible_constants": []}]}, {"name": "GetLastActivePopup", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getlastactivepopup", "description": "Determines which pop-up window owned by the specified window was most recently active.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the owner window.", "possible_constants": []}]}, {"name": "GetLastInputInfo", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getlastinputinfo", "description": "Retrieves the time of the last input event.", "parameters": [{"name": "plii", "type": "PLASTINPUTINFO", "description": "A pointer to a LASTINPUTINFO structure that receives the time of the last input event.", "possible_constants": []}]}, {"name": "GetLayeredWindowAttributes", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getlayeredwindowattributes", "description": "Retrieves the opacity and transparency color key of a layered window.", "parameters": [{"name": "hwnd", "type": "HWND", "description": "A handle to the layered window. A layered window is created by specifying WS_EX_LAYERED when creating the window with the CreateWindowEx function or by setting WS_EX_LAYERED using SetWindowLong after the window has been created.", "possible_constants": []}, {"name": "pcrKey", "type": "COLORREF*", "description": "A pointer to a COLORREF value that receives the transparency color key to be used when composing the layered window. All pixels painted by the window in this color will be transparent. This can be NULL if the argument is not needed.", "possible_constants": []}, {"name": "pbAlpha", "type": "BYTE*", "description": "The Alpha value used to describe the opacity of the layered window. Similar to the SourceConstantAlpha member of the BLENDFUNCTION structure. When the variable referred to by pbAlpha is 0, the window is completely transparent. When the variable referred to by pbAlpha is 255, the window is opaque. This can be NULL if the argument is not needed.", "possible_constants": []}, {"name": "pdwFlags", "type": "DWORD*", "description": "A layering flag. This parameter can be NULL if the value is not needed. The layering flag can be one or more of the following values.", "possible_constants": [["LWA_ALPHA", 2], ["LWA_COLORKEY", 1]]}]}, {"name": "GetListBoxInfo", "return_type": "DWORD", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getlistboxinfo", "description": "Retrieves the number of items per column in a specified list box.", "parameters": [{"name": "hwnd", "type": "HWND", "description": "A handle to the list box whose number of items per column is to be retrieved.", "possible_constants": []}]}, {"name": "GetMenu", "return_type": "HMENU", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmenu", "description": "Retrieves a handle to the menu assigned to the specified window.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window whose menu handle is to be retrieved.", "possible_constants": []}]}, {"name": "GetMenuBarInfo", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmenubarinfo", "description": "Retrieves information about the specified menu bar.", "parameters": [{"name": "hwnd", "type": "HWND", "description": "A handle to the window (menu bar) whose information is to be retrieved.", "possible_constants": []}, {"name": "idObject", "type": "LONG", "description": "The menu object. This parameter can be one of the following values.", "possible_constants": [["OBJID_CLIENT", -1], ["OBJID_MENU", -1], ["OBJID_SYSMENU", -1]]}, {"name": "idItem", "type": "LONG", "description": "The item for which to retrieve information. If this parameter is zero, the function retrieves information about the menu itself. If this parameter is 1, the function retrieves information about the first item on the menu, and so on.", "possible_constants": []}, {"name": "pmbi", "type": "PMENUBARINFO", "description": "", "possible_constants": []}, {"name": "A pointer to a MENUBARINFO structure that receives the information. Note that you must set the cbSize member to sizeof(MENUBARINFO) before calling this function.", "type": "", "description": "", "possible_constants": []}]}, {"name": "GetMenuCheckMarkDimensions", "return_type": "LONG", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmenucheckmarkdimensions", "description": "Retrieves the dimensions of the default check-mark bitmap. The system displays this bitmap next to selected menu items. Before calling the SetMenuItemBitmaps function to replace the default check-mark bitmap for a menu item, an application must determine the correct bitmap size by calling GetMenuCheckMarkDimensions.", "parameters": []}, {"name": "GetMenuContextHelpId", "return_type": "DWORD", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmenucontexthelpid", "description": "Retrieves the Help context identifier associated with the specified menu.", "parameters": [{"name": "unnamedParam1", "type": "HMENU", "description": "A handle to the menu for which the Help context identifier is to be retrieved.", "possible_constants": []}]}, {"name": "GetMenuDefaultItem", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmenudefaultitem", "description": "Determines the default menu item on the specified menu.", "parameters": [{"name": "hMenu", "type": "HMENU", "description": "A handle to the menu for which to retrieve the default menu item.", "possible_constants": []}, {"name": "fByPos", "type": "UINT", "description": "Indicates whether to retrieve the menu item's identifier or its position. If this parameter is FALSE, the identifier is returned. Otherwise, the position is returned.", "possible_constants": []}, {"name": "gmdiFlags", "type": "UINT", "description": "Indicates how the function should search for menu items. This parameter can be zero or more of the following values.", "possible_constants": [["GMDI_GOINTOPOPUPS", 2], ["GMDI_USEDISABLED", 1]]}]}, {"name": "GetMenuInfo", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmenuinfo", "description": "Retrieves information about a specified menu.", "parameters": [{"name": "unnamedParam1", "type": "HMENU", "description": "A handle on a menu.", "possible_constants": []}, {"name": "unnamedParam2", "type": "LPMENUINFO", "description": "", "possible_constants": []}, {"name": "A pointer to a MENUINFO structure containing information for the menu. Note that you must set the cbSize member to sizeof(MENUINFO) before calling this function.", "type": "", "description": "", "possible_constants": []}]}, {"name": "GetMenuItemCount", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmenuitemcount", "description": "Determines the number of items in the specified menu.", "parameters": [{"name": "hMenu", "type": "HMENU", "description": "A handle to the menu to be examined.", "possible_constants": []}]}, {"name": "GetMenuItemID", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmenuitemid", "description": "Retrieves the menu item identifier of a menu item located at the specified position in a menu.", "parameters": [{"name": "hMenu", "type": "HMENU", "description": "A handle to the menu that contains the item whose identifier is to be retrieved.", "possible_constants": []}, {"name": "nPos", "type": "int", "description": "The zero-based relative position of the menu item whose identifier is to be retrieved.", "possible_constants": []}]}, {"name": "GetMenuItemInfoA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmenuiteminfoa", "description": "Retrieves information about a menu item.", "parameters": [{"name": "hmenu", "type": "HMENU", "description": "A handle to the menu that contains the menu item.", "possible_constants": []}, {"name": "item", "type": "UINT", "description": "The identifier or position of the menu item to get information about. The meaning of this parameter depends on the value of fByPosition.", "possible_constants": []}, {"name": "fByPosition", "type": "BOOL", "description": "The meaning of uItem. If this parameter is FALSE, uItem is a menu item identifier. Otherwise, it is a menu item position. See Accessing Menu Items Programmatically for more information.", "possible_constants": []}, {"name": "lpmii", "type": "LPMENUITEMINFO", "description": "", "possible_constants": []}, {"name": "A pointer to a MENUITEMINFO structure that specifies the information to retrieve and receives information about the menu item. Note that you must set the cbSize member to sizeof(MENUITEMINFO) before calling this function.", "type": "", "description": "", "possible_constants": []}]}, {"name": "GetMenuItemInfoW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmenuiteminfow", "description": "Retrieves information about a menu item.", "parameters": [{"name": "hmenu", "type": "HMENU", "description": "A handle to the menu that contains the menu item.", "possible_constants": []}, {"name": "item", "type": "UINT", "description": "The identifier or position of the menu item to get information about. The meaning of this parameter depends on the value of fByPosition.", "possible_constants": []}, {"name": "fByPosition", "type": "BOOL", "description": "The meaning of uItem. If this parameter is FALSE, uItem is a menu item identifier. Otherwise, it is a menu item position. See Accessing Menu Items Programmatically for more information.", "possible_constants": []}, {"name": "lpmii", "type": "LPMENUITEMINFO", "description": "", "possible_constants": []}, {"name": "A pointer to a MENUITEMINFO structure that specifies the information to retrieve and receives information about the menu item. Note that you must set the cbSize member to sizeof(MENUITEMINFO) before calling this function.", "type": "", "description": "", "possible_constants": []}]}, {"name": "GetMenuItemRect", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmenuitemrect", "description": "Retrieves the bounding rectangle\nfor the specified menu item.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window containing the menu.\nIf this value is NULL and the hMenu\nparameter represents a popup menu, the function will find the menu window.", "possible_constants": []}, {"name": "hMenu", "type": "HMENU", "description": "A handle to a menu.", "possible_constants": []}, {"name": "uItem", "type": "UINT", "description": "The zero-based position of the menu item.", "possible_constants": []}, {"name": "lprcItem", "type": "LPRECT", "description": "A pointer to a RECT structure that receives the\nbounding rectangle of the specified menu item expressed in screen coordinates.", "possible_constants": []}]}, {"name": "GetMenuState", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmenustate", "description": "Retrieves the menu flags associated with the specified menu item. If the menu item opens a submenu, this function also returns the number of items in the submenu.", "parameters": [{"name": "hMenu", "type": "HMENU", "description": "A handle to the menu that contains the menu item whose flags are to be retrieved.", "possible_constants": []}, {"name": "uId", "type": "UINT", "description": "The menu item for which the menu flags are to be retrieved, as determined by the uFlags parameter.", "possible_constants": []}, {"name": "uFlags", "type": "UINT", "description": "Indicates how the uId parameter is interpreted. This parameter can be one of the following values.", "possible_constants": [["MF_BYCOMMAND", 0], ["MF_BYPOSITION", 1024]]}]}, {"name": "GetMenuStringA", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmenustringa", "description": "Copies the text string of the specified menu item into the specified buffer.", "parameters": [{"name": "hMenu", "type": "HMENU", "description": "A handle to the menu.", "possible_constants": []}, {"name": "uIDItem", "type": "UINT", "description": "The menu item to be changed, as determined by the uFlag parameter.", "possible_constants": []}, {"name": "lpString", "type": "LPTSTR", "description": "The buffer that receives the null-terminated string. If the string is as long or longer than lpString, the string is truncated and the terminating null character is added. If lpString is NULL, the function returns the length of the menu string.", "possible_constants": []}, {"name": "cchMax", "type": "int", "description": "The maximum length, in characters, of the string to be copied. If the string is longer than the maximum specified in the nMaxCount parameter, the extra characters are truncated. If nMaxCount is 0, the function returns the length of the menu string.", "possible_constants": []}, {"name": "flags", "type": "UINT", "description": "Indicates how the uIDItem parameter is interpreted. This parameter must be one of the following values.", "possible_constants": [["MF_BYCOMMAND", 0], ["MF_BYPOSITION", 1024]]}]}, {"name": "GetMenuStringW", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmenustringw", "description": "Copies the text string of the specified menu item into the specified buffer.", "parameters": [{"name": "hMenu", "type": "HMENU", "description": "A handle to the menu.", "possible_constants": []}, {"name": "uIDItem", "type": "UINT", "description": "The menu item to be changed, as determined by the uFlag parameter.", "possible_constants": []}, {"name": "lpString", "type": "LPTSTR", "description": "The buffer that receives the null-terminated string. If the string is as long or longer than lpString, the string is truncated and the terminating null character is added. If lpString is NULL, the function returns the length of the menu string.", "possible_constants": []}, {"name": "cchMax", "type": "int", "description": "The maximum length, in characters, of the string to be copied. If the string is longer than the maximum specified in the nMaxCount parameter, the extra characters are truncated. If nMaxCount is 0, the function returns the length of the menu string.", "possible_constants": []}, {"name": "flags", "type": "UINT", "description": "Indicates how the uIDItem parameter is interpreted. This parameter must be one of the following values.", "possible_constants": [["MF_BYCOMMAND", 0], ["MF_BYPOSITION", 1024]]}]}, {"name": "GetMessage", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmessage", "description": "Retrieves a message from the calling thread's message queue. The function dispatches incoming sent messages until a posted message is available for retrieval.", "parameters": [{"name": "lpMsg", "type": "LPMSG", "description": "A pointer to an MSG structure that receives message information from the thread's message queue.", "possible_constants": []}, {"name": "hWnd", "type": "HWND", "description": "A handle to the window whose messages are to be retrieved. The window must belong to the current thread.\nIf hWnd is NULL, GetMessage retrieves messages for any window that belongs to the current thread, and any messages on the current thread's message queue whose hwnd value is NULL (see the MSG structure). Therefore if hWnd is NULL, both window messages and thread messages are processed.\nIf hWnd is -1, GetMessage retrieves only messages on the current thread's message queue whose hwnd value is NULL,  that is, thread messages as posted by  PostMessage (when the hWnd parameter is NULL) or PostThreadMessage.", "possible_constants": []}, {"name": "wMsgFilterMin", "type": "UINT", "description": "The integer value of the lowest message value to be retrieved. Use WM_KEYFIRST (0x0100) to specify the first keyboard message or WM_MOUSEFIRST (0x0200) to specify the first mouse message.\nUse WM_INPUT here and in wMsgFilterMax to specify only the WM_INPUT messages.\nIf wMsgFilterMin and wMsgFilterMax are both zero, GetMessage returns all available messages (that is, no range filtering is performed).", "possible_constants": []}, {"name": "wMsgFilterMax", "type": "UINT", "description": "The integer value of the highest message value to be retrieved. Use WM_KEYLAST to specify the last keyboard message or WM_MOUSELAST to specify the last mouse message.\nUse WM_INPUT here and in wMsgFilterMin to specify only the WM_INPUT messages.\nIf wMsgFilterMin and wMsgFilterMax are both zero, GetMessage returns all available messages (that is, no range filtering is performed).", "possible_constants": []}]}, {"name": "GetMessageA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmessagea", "description": "Retrieves a message from the calling thread's message queue. The function dispatches incoming sent messages until a posted message is available for retrieval.", "parameters": [{"name": "lpMsg", "type": "LPMSG", "description": "A pointer to an MSG structure that receives message information from the thread's message queue.", "possible_constants": []}, {"name": "hWnd", "type": "HWND", "description": "A handle to the window whose messages are to be retrieved. The window must belong to the current thread.\nIf hWnd is NULL, GetMessage retrieves messages for any window that belongs to the current thread, and any messages on the current thread's message queue whose hwnd value is NULL (see the MSG structure). Therefore if hWnd is NULL, both window messages and thread messages are processed.\nIf hWnd is -1, GetMessage retrieves only messages on the current thread's message queue whose hwnd value is NULL,  that is, thread messages as posted by  PostMessage (when the hWnd parameter is NULL) or PostThreadMessage.", "possible_constants": []}, {"name": "wMsgFilterMin", "type": "UINT", "description": "The integer value of the lowest message value to be retrieved. Use WM_KEYFIRST (0x0100) to specify the first keyboard message or WM_MOUSEFIRST (0x0200) to specify the first mouse message.\nUse WM_INPUT here and in wMsgFilterMax to specify only the WM_INPUT messages.\nIf wMsgFilterMin and wMsgFilterMax are both zero, GetMessage returns all available messages (that is, no range filtering is performed).", "possible_constants": []}, {"name": "wMsgFilterMax", "type": "UINT", "description": "The integer value of the highest message value to be retrieved. Use WM_KEYLAST to specify the last keyboard message or WM_MOUSELAST to specify the last mouse message.\nUse WM_INPUT here and in wMsgFilterMin to specify only the WM_INPUT messages.\nIf wMsgFilterMin and wMsgFilterMax are both zero, GetMessage returns all available messages (that is, no range filtering is performed).", "possible_constants": []}]}, {"name": "GetMessageExtraInfo", "return_type": "LPARAM", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmessageextrainfo", "description": "Retrieves the extra message information for the current thread. Extra message information is an application- or driver-defined value associated with the current thread's message queue.", "parameters": []}, {"name": "GetMessagePos", "return_type": "DWORD", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmessagepos", "description": "Retrieves the cursor position for the last message retrieved by the GetMessage function.", "parameters": []}, {"name": "GetMessageTime", "return_type": "LONG", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmessagetime", "description": "Retrieves the message time for the last message retrieved by the GetMessage function. The time is a long integer that specifies the elapsed time, in milliseconds, from the time the system was started to the time the message was created (that is, placed in the thread's message queue).", "parameters": []}, {"name": "GetMessageW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmessagew", "description": "Retrieves a message from the calling thread's message queue. The function dispatches incoming sent messages until a posted message is available for retrieval.", "parameters": [{"name": "lpMsg", "type": "LPMSG", "description": "A pointer to an MSG structure that receives message information from the thread's message queue.", "possible_constants": []}, {"name": "hWnd", "type": "HWND", "description": "A handle to the window whose messages are to be retrieved. The window must belong to the current thread.\nIf hWnd is NULL, GetMessage retrieves messages for any window that belongs to the current thread, and any messages on the current thread's message queue whose hwnd value is NULL (see the MSG structure). Therefore if hWnd is NULL, both window messages and thread messages are processed.\nIf hWnd is -1, GetMessage retrieves only messages on the current thread's message queue whose hwnd value is NULL,  that is, thread messages as posted by  PostMessage (when the hWnd parameter is NULL) or PostThreadMessage.", "possible_constants": []}, {"name": "wMsgFilterMin", "type": "UINT", "description": "The integer value of the lowest message value to be retrieved. Use WM_KEYFIRST (0x0100) to specify the first keyboard message or WM_MOUSEFIRST (0x0200) to specify the first mouse message.\nUse WM_INPUT here and in wMsgFilterMax to specify only the WM_INPUT messages.\nIf wMsgFilterMin and wMsgFilterMax are both zero, GetMessage returns all available messages (that is, no range filtering is performed).", "possible_constants": []}, {"name": "wMsgFilterMax", "type": "UINT", "description": "The integer value of the highest message value to be retrieved. Use WM_KEYLAST to specify the last keyboard message or WM_MOUSELAST to specify the last mouse message.\nUse WM_INPUT here and in wMsgFilterMin to specify only the WM_INPUT messages.\nIf wMsgFilterMin and wMsgFilterMax are both zero, GetMessage returns all available messages (that is, no range filtering is performed).", "possible_constants": []}]}, {"name": "GetMonitorInfoA", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmonitorinfoa", "description": "The GetMonitorInfo function retrieves information about a display monitor.", "parameters": [{"name": "hMonitor", "type": "", "description": "A handle to the display monitor of interest.", "possible_constants": []}, {"name": "lpmi", "type": "", "description": "A pointer to a MONITORINFO or MONITORINFOEX structure that receives information about the specified display monitor.\nYou must set the cbSize member of the structure to sizeof(MONITORINFO) or sizeof(MONITORINFOEX) before calling the GetMonitorInfo function. Doing so lets the function determine the type of structure you are passing to it.\nThe MONITORINFOEX structure is a superset of the MONITORINFO structure. It has one additional member: a string that contains a name for the display monitor. Most applications have no use for a display monitor name, and so can save some bytes by using a MONITORINFO structure.", "possible_constants": []}]}, {"name": "GetMonitorInfoW", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmonitorinfow", "description": "The GetMonitorInfo function retrieves information about a display monitor.", "parameters": [{"name": "hMonitor", "type": "", "description": "A handle to the display monitor of interest.", "possible_constants": []}, {"name": "lpmi", "type": "", "description": "A pointer to a MONITORINFO or MONITORINFOEX structure that receives information about the specified display monitor.\nYou must set the cbSize member of the structure to sizeof(MONITORINFO) or sizeof(MONITORINFOEX) before calling the GetMonitorInfo function. Doing so lets the function determine the type of structure you are passing to it.\nThe MONITORINFOEX structure is a superset of the MONITORINFO structure. It has one additional member: a string that contains a name for the display monitor. Most applications have no use for a display monitor name, and so can save some bytes by using a MONITORINFO structure.", "possible_constants": []}]}, {"name": "GetMouseMovePointsEx", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmousemovepointsex", "description": "Retrieves a history of up to 64 previous coordinates of the mouse or pen.", "parameters": [{"name": "cbSize", "type": "UINT", "description": "The size, in bytes, of the MOUSEMOVEPOINT structure.", "possible_constants": []}, {"name": "lppt", "type": "LPMOUSEMOVEPOINT", "description": "A pointer to a MOUSEMOVEPOINT structure containing valid mouse coordinates (in screen coordinates). It may also contain a time stamp.\nThe GetMouseMovePointsEx function searches for the point in the mouse coordinates history. If the function finds the point, it returns the last\nnBufPoints prior to and including the supplied point.\nIf your application supplies a time stamp, the GetMouseMovePointsEx function will use it to differentiate between two equal points that were recorded at different times.\nAn application should call this function using the mouse coordinates received from the WM_MOUSEMOVE message and convert them to screen coordinates.", "possible_constants": []}, {"name": "lpptBuf", "type": "LPMOUSEMOVEPOINT", "description": "A pointer to a buffer that will receive the points. It should be at least\ncbSize*\nnBufPoints in size.", "possible_constants": []}, {"name": "nBufPoints", "type": "int", "description": "The number of points to be retrieved.", "possible_constants": []}, {"name": "resolution", "type": "DWORD", "description": "The resolution desired. This parameter can be one of the following values.", "possible_constants": [["GMMP_USE_DISPLAY_POINTS", -1], ["GMMP_USE_HIGH_RESOLUTION_POINTS", -1]]}]}, {"name": "GetNextDlgGroupItem", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getnextdlggroupitem", "description": "Retrieves a handle to the first control in a group of controls that precedes (or follows) the specified control in a dialog box.", "parameters": [{"name": "hDlg", "type": "HWND", "description": "A handle to the dialog box to be searched.", "possible_constants": []}, {"name": "hCtl", "type": "HWND", "description": "A handle to the control to be used as the starting point for the search. If this parameter is NULL, the function uses the last (or first) control in the dialog box as the starting point for the search.", "possible_constants": []}, {"name": "bPrevious", "type": "BOOL", "description": "Indicates how the function is to search the group of controls in the dialog box. If this parameter is TRUE, the function searches for the previous control in the group. If it is FALSE, the function searches for the next control in the group.", "possible_constants": []}]}, {"name": "GetNextDlgTabItem", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getnextdlgtabitem", "description": "Retrieves a handle to the first\ncontrol that has the WS_TABSTOP\nstyle that precedes (or follows) the specified control.", "parameters": [{"name": "hDlg", "type": "HWND", "description": "A handle to the dialog box to be searched.", "possible_constants": []}, {"name": "hCtl", "type": "HWND", "description": "A handle to the control to be used as the starting point for the search.\nIf this parameter is NULL, the function fails.", "possible_constants": []}, {"name": "bPrevious", "type": "BOOL", "description": "Indicates how the function is to search the dialog box. If this parameter\nis TRUE, the function searches for the previous control\nin the dialog box. If this parameter is FALSE, the function searches\nfor the next control in the dialog box.", "possible_constants": []}]}, {"name": "GetNextWindow", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getnextwindow", "description": "Retrieves a handle to the next or previous window in the Z-Order. The next window is below the specified window; the previous window is above.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to a window. The window handle retrieved is relative to this window, based on the value of the wCmd parameter.", "possible_constants": []}, {"name": "wCmd", "type": "UINT", "description": "Indicates whether the function returns a handle to the next window or the previous window. This parameter can be either of the following values.", "possible_constants": [["GW_HWNDNEXT", -1], ["GW_HWNDPREV", -1]]}]}, {"name": "GetOpenClipboardWindow", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getopenclipboardwindow", "description": "Retrieves the handle to the window that currently has the clipboard open.", "parameters": []}, {"name": "GetParent", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getparent", "description": "Retrieves a handle to the specified window's parent or owner.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window whose parent window handle is to be retrieved.", "possible_constants": []}]}, {"name": "GetPhysicalCursorPos", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getphysicalcursorpos", "description": "Retrieves the position of the cursor in physical coordinates.", "parameters": [{"name": "lpPoint", "type": "LPPOINT", "description": "The position of the cursor, in physical coordinates.", "possible_constants": []}]}, {"name": "GetPointerCursorId", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointercursorid", "description": "Retrieves the cursor identifier associated with the specified pointer.", "parameters": [{"name": "pointerId", "type": "", "description": "An identifier of the pointer for which to retrieve the cursor identifier.", "possible_constants": []}, {"name": "cursorId", "type": "", "description": "An address of a UINT32 to receive the tablet cursor identifier, if any, associated with the specified pointer.", "possible_constants": []}]}, {"name": "GetPointerDevice", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointerdevice", "description": "Gets information about the pointer device.", "parameters": [{"name": "device", "type": "", "description": "The handle to the device.", "possible_constants": []}, {"name": "pointerDevice", "type": "", "description": "A POINTER_DEVICE_INFO structure that contains information about the pointer device.", "possible_constants": []}]}, {"name": "GetPointerDeviceCursors", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointerdevicecursors", "description": "Gets the cursor IDs that are mapped to the cursors associated with a pointer device.", "parameters": [{"name": "device", "type": "", "description": "The device handle.", "possible_constants": []}, {"name": "cursorCount", "type": "", "description": "The number of cursors associated with the pointer device.", "possible_constants": []}, {"name": "deviceCursors", "type": "", "description": "An array of POINTER_DEVICE_CURSOR_INFO structures that contain info about the cursors. If NULL, cursorCount returns the number of cursors associated with the pointer device.", "possible_constants": []}]}, {"name": "GetPointerDeviceProperties", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointerdeviceproperties", "description": "Gets  device properties that aren't included in the POINTER_DEVICE_INFO structure.", "parameters": [{"name": "device", "type": "", "description": "The pointer device to query properties from.\nA call to the GetPointerDevices function returns this handle in the POINTER_DEVICE_INFO structure.", "possible_constants": []}, {"name": "propertyCount", "type": "", "description": "The number  of properties.\nReturns the count that's written or needed if pointerProperties is NULL.\nIf this value is less than the number of properties that the pointer device supports and pointerProperties is not NULL, the function returns the actual number of properties in this variable and fails.", "possible_constants": []}, {"name": "pointerProperties", "type": "", "description": "The array of properties.", "possible_constants": []}]}, {"name": "GetPointerDeviceRects", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointerdevicerects", "description": "Gets the x and y range for the pointer device (in himetric) and the x and y range (current resolution) for the display that the pointer device is mapped to.", "parameters": [{"name": "device", "type": "", "description": "The handle to the pointer device.", "possible_constants": []}, {"name": "pointerDeviceRect", "type": "", "description": "The structure for retrieving the device's physical range data.", "possible_constants": []}, {"name": "displayRect", "type": "", "description": "The structure for retrieving the display resolution.", "possible_constants": []}]}, {"name": "GetPointerDevices", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointerdevices", "description": "Gets information about the pointer devices attached to the system.", "parameters": [{"name": "deviceCount", "type": "", "description": "If pointerDevices is NULL, deviceCount returns the total number of attached pointer devices. Otherwise, deviceCount specifies the number of POINTER_DEVICE_INFO structures pointed to by pointerDevices.", "possible_constants": []}, {"name": "pointerDevices", "type": "", "description": "Array of POINTER_DEVICE_INFO structures for the pointer devices attached to the system. If NULL, the total number of attached pointer devices is returned in deviceCount.", "possible_constants": []}]}, {"name": "GetPointerFrameInfo", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointerframeinfo", "description": "Gets the entire frame of information for the specified pointers associated with the current message.", "parameters": [{"name": "pointerId", "type": "", "description": "An identifier of the pointer for which to retrieve frame information.", "possible_constants": []}, {"name": "pointerCount", "type": "", "description": "A pointer to a variable that specifies the count of structures in the buffer to which pointerInfo points. If GetPointerFrameInfo succeeds, pointerCount is updated with the total count of pointers in the frame.", "possible_constants": []}, {"name": "pointerInfo", "type": "", "description": "Address of an array of POINTER_INFO structures to receive the pointer information. This parameter can be NULL if *pointerCount is zero.", "possible_constants": []}]}, {"name": "GetPointerFrameInfoHistory", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointerframeinfohistory", "description": "Gets the entire frame of information (including coalesced input frames) for the specified pointers associated with the current message.", "parameters": [{"name": "pointerId", "type": "", "description": "An identifier of the pointer for which to retrieve frame information.", "possible_constants": []}, {"name": "entriesCount", "type": "", "description": "A pointer to a variable that specifies the count of rows in the two-dimensional array to which pointerInfo points. If GetPointerFrameInfoHistory succeeds, entriesCount is updated with the total count of frames available in the history.", "possible_constants": []}, {"name": "pointerCount", "type": "", "description": "A pointer to a variable that specifies the count of columns in the two-dimensional array to which pointerInfo points. If GetPointerFrameInfoHistory succeeds, pointerCount is updated with the total count of pointers in each frame.", "possible_constants": []}, {"name": "pointerInfo", "type": "", "description": "Address of a two-dimensional array of POINTER_INFO structures to receive the pointer information. This parameter can be NULL if *entriesCount and *pointerCount are both zero.", "possible_constants": []}, {"name": "This array is interpreted as POINTER_INFO[*entriesCount][*pointerCount].", "type": "", "description": "", "possible_constants": []}]}, {"name": "GetPointerFramePenInfo", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointerframepeninfo", "description": "Gets the entire frame of pen-based information for the specified pointers (of type PT_PEN) associated with the current message.", "parameters": [{"name": "pointerId", "type": "", "description": "An identifier of the pointer for which to retrieve frame information.", "possible_constants": []}, {"name": "pointerCount", "type": "", "description": "A pointer to a variable that specifies the count of structures in the buffer to which penInfo points. If GetPointerFramePenInfo succeeds, pointerCount  is updated with the total count of pointers in the frame.", "possible_constants": []}, {"name": "penInfo", "type": "", "description": "Address of an array of POINTER_PEN_INFO structures to receive the pointer information. This parameter can be NULL if *pointerCount is zero.", "possible_constants": []}]}, {"name": "GetPointerFramePenInfoHistory", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointerframepeninfohistory", "description": "Gets the entire frame of pen-based information (including coalesced input frames) for the specified pointers (of type PT_PEN) associated with the current message.", "parameters": [{"name": "pointerId", "type": "", "description": "The identifier of the pointer for which to retrieve frame information.", "possible_constants": []}, {"name": "entriesCount", "type": "", "description": "A pointer to a variable that specifies the count of rows in the two-dimensional array to which penInfo points. If GetPointerFramePenInfoHistory succeeds,  entriesCount is updated with the total count of frames available in the history.", "possible_constants": []}, {"name": "pointerCount", "type": "", "description": "A pointer to a variaable that specifies the count of columns in the two-dimensional array to which penInfo points. If GetPointerFramePenInfoHistory succeeds, pointerCount is updated with  the total count of pointers in each frame.", "possible_constants": []}, {"name": "penInfo", "type": "", "description": "Address of a two-dimensional array of POINTER_PEN_INFO structures to receive the pointer information. This parameter can be NULL if *entriesCount and *pointerCount are both zero.\nThis array is interpreted as POINTER_PEN_INFO[*entriesCount][*pointerCount].", "possible_constants": []}]}, {"name": "GetPointerFrameTouchInfo", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointerframetouchinfo", "description": "Gets the entire frame of touch-based information for the specified pointers (of type PT_TOUCH) associated with the current message.", "parameters": [{"name": "pointerId", "type": "", "description": "An identifier of the pointer for which to retrieve frame information.", "possible_constants": []}, {"name": "pointerCount", "type": "", "description": "A pointer to a variable that specifies the count of structures in the buffer to which touchInfo points. If GetPointerFrameTouchInfo succeeds, pointerCount is updated with the total count of pointers in the frame.", "possible_constants": []}, {"name": "touchInfo", "type": "", "description": "Address of an array of POINTER_TOUCH_INFO structures to receive the pointer information. This parameter can be NULL if *pointerCount is zero.", "possible_constants": []}]}, {"name": "GetPointerFrameTouchInfoHistory", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointerframetouchinfohistory", "description": "Gets the entire frame of touch-based information (including coalesced input frames) for the specified pointers (of type PT_TOUCH) associated with the current message.", "parameters": [{"name": "pointerId", "type": "", "description": "An identifier of the pointer for which to retrieve frame information.", "possible_constants": []}, {"name": "entriesCount", "type": "", "description": "A pointer to variable that specifies the count of rows in the two-dimensional array to which touchInfo points. If GetPointerFrameTouchInfoHistory succeeds,  entriesCount is updated with the total count of frames available in the history.", "possible_constants": []}, {"name": "pointerCount", "type": "", "description": "A pointer to a variable that specifies the count of columns in the two-dimensional array to which touchInfo points. If GetPointerFrameTouchInfoHistory succeeds, pointerCount is updated with the total count of pointers in each frame.", "possible_constants": []}, {"name": "touchInfo", "type": "", "description": "Address of a two-dimensional array of POINTER_TOUCH_INFO structures to receive the pointer information. This parameter can be NULL if *entriesCount and *pointerCount are both zero.", "possible_constants": []}, {"name": "This array is interpreted as POINTER_TOUCH_INFO[*entriesCount][*pointerCount].", "type": "", "description": "", "possible_constants": []}]}, {"name": "GetPointerInfo", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointerinfo", "description": "Gets the information for the specified pointer associated with the current message.", "parameters": [{"name": "pointerId", "type": "", "description": "The pointer identifier.", "possible_constants": []}, {"name": "pointerInfo", "type": "", "description": "Address of a  POINTER_INFO structure that receives the pointer information.", "possible_constants": []}]}, {"name": "GetPointerInfoHistory", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointerinfohistory", "description": "Gets the information associated with the individual inputs, if any, that were coalesced into the current message for the specified pointer. The most recent input is included in the returned history and is the same as the most recent input returned by the GetPointerInfo function.", "parameters": [{"name": "pointerId", "type": "", "description": "An identifier of the pointer for which to retrieve information.", "possible_constants": []}, {"name": "entriesCount", "type": "", "description": "A pointer to a variable that specifies the count of structures in the buffer to which pointerInfo points. If GetPointerInfoHistory succceeds, entriesCount  is updated with the total count of structures available. The total count of structures available is the same as the historyCount field of the POINTER_INFO structure returned by a call to GetPointerInfo.", "possible_constants": []}, {"name": "pointerInfo", "type": "", "description": "Address of an array of POINTER_INFO structures to receive the pointer information. This parameter can be NULL if *entriesCount is zero.", "possible_constants": []}]}, {"name": "GetPointerInputTransform", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointerinputtransform", "description": "Gets one or more transforms for the pointer information coordinates associated with the current message.", "parameters": [{"name": "pointerId", "type": "", "description": "An identifier of the pointer for which to retrieve information.", "possible_constants": []}, {"name": "historyCount", "type": "", "description": "The number of INPUT_TRANSFORM structures that inputTransform can point to.\nThis value must be no less than 1 and no greater than the value specified in historyCount of the POINTER_INFO structure returned by GetPointerInfo, GetPointerTouchInfo, or GetPointerPenInfo (for a single input transform) or GetPointerInfoHistory, GetPointerTouchInfoHistory, or GetPointerPenInfoHistory (for an array of input transforms).\nIf GetPointerInputTransform succeeds, inputTransform  is updated with the total count of structures available. The total count of structures available is the same as the historyCount field of the POINTER_INFO structure.", "possible_constants": []}, {"name": "inputTransform", "type": "", "description": "Address of an array of INPUT_TRANSFORM structures to receive the transform information. This parameter cannot be NULL.", "possible_constants": []}]}, {"name": "GetPointerPenInfo", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointerpeninfo", "description": "Gets the pen-based information for the specified pointer (of type PT_PEN) associated with the current message.", "parameters": [{"name": "pointerId", "type": "", "description": "An identifier of the pointer for which to retrieve information.", "possible_constants": []}, {"name": "penInfo", "type": "", "description": "Address of a POINTER_PEN_INFO structure to receive the pen-specific pointer information.", "possible_constants": []}]}, {"name": "GetPointerPenInfoHistory", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointerpeninfohistory", "description": "Gets the pen-based information associated with the individual inputs, if any, that were coalesced into\nthe current message for the specified pointer (of type\nPT_PEN). The most recent input is included in\nthe returned history and is the same as the most recent input returned by the\nGetPointerPenInfo function.", "parameters": [{"name": "pointerId", "type": "", "description": "An identifier of the pointer for which to retrieve information.", "possible_constants": []}, {"name": "entriesCount", "type": "", "description": "A pointer to a variable that specifies the count of structures in the buffer to which\npenInfo points. If\nGetPointerPenInfoHistory succeeds,\nentriesCount is updated with the total count of structures available. The total\ncount of structures available is the same as the historyCount field in the\nPOINTER_PEN_INFO structure returned by a\ncall to  GetPointerPenInfo.", "possible_constants": []}, {"name": "penInfo", "type": "", "description": "Address of an array of\nPOINTER_PEN_INFO structures to receive\nthe pointer information. This parameter can be NULL if *entriesCount is zero.", "possible_constants": []}]}, {"name": "GetPointerTouchInfo", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointertouchinfo", "description": "Gets the touch-based information for the specified pointer (of type PT_TOUCH) associated with the current message.", "parameters": [{"name": "pointerId", "type": "", "description": "An identifier of the pointer for which to retrieve information.", "possible_constants": []}, {"name": "touchInfo", "type": "", "description": "Address of a POINTER_TOUCH_INFO structure to receive the touch-specific pointer information.", "possible_constants": []}]}, {"name": "GetPointerTouchInfoHistory", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointertouchinfohistory", "description": "Gets the touch-based information associated with the individual inputs, if any, that were coalesced into the current message for the specified pointer (of type PT_TOUCH). The most recent input is included in the returned history and is the same as the most recent input returned by the GetPointerTouchInfo function.", "parameters": [{"name": "pointerId", "type": "", "description": "An identifier of the pointer for which to retrieve information.", "possible_constants": []}, {"name": "entriesCount", "type": "", "description": "A pointer to a variable that specifies the count of structures in the buffer to which touchInfo points. If GetPointerTouchInfoHistory succeeds, entriesCount is updated with the total count of structures available. The total count of structures available is the same as the historyCount field in the POINTER_INFO structure returned by a call to GetPointerInfo or GetPointerTouchInfo.", "possible_constants": []}, {"name": "touchInfo", "type": "", "description": "Address of an array of POINTER_TOUCH_INFO structures to receive the pointer information. This parameter can be NULL if *entriesCount is zero.", "possible_constants": []}]}, {"name": "GetPointerType", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointertype", "description": "Retrieves the pointer type for a specified pointer.", "parameters": [{"name": "pointerId", "type": "", "description": "An identifier of the pointer for which to retrieve pointer type.", "possible_constants": []}, {"name": "pointerType", "type": "", "description": "An address of a POINTER_INPUT_TYPE type to receive a pointer input type.", "possible_constants": []}]}, {"name": "GetPriorityClipboardFormat", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpriorityclipboardformat", "description": "Retrieves the first available clipboard format in the specified list.", "parameters": [{"name": "paFormatPriorityList", "type": "UINT*", "description": "The clipboard formats, in priority order. For a description of the standard clipboard formats, see Standard Clipboard Formats .", "possible_constants": []}, {"name": "cFormats", "type": "int", "description": "The number of entries in the\npaFormatPriorityList array. This value must not be greater than the number of entries in the list.", "possible_constants": []}]}, {"name": "GetProcessDefaultLayout", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getprocessdefaultlayout", "description": "Retrieves the default layout that is used when windows are created with no parent or owner.", "parameters": [{"name": "pdwDefaultLayout", "type": "DWORD*", "description": "The current default process layout. For a list of values, see SetProcessDefaultLayout.", "possible_constants": []}]}, {"name": "GetProcessWindowStation", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getprocesswindowstation", "description": "Retrieves a handle to the current window station for the calling process.", "parameters": []}, {"name": "GetPropA", "return_type": "HANDLE", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpropa", "description": "Retrieves a data handle from the property list of the specified window. The character string identifies the handle to be retrieved. The string and handle must have been added to the property list by a previous call to the SetProp function.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window whose property list is to be searched.", "possible_constants": []}, {"name": "lpString", "type": "LPCTSTR", "description": "An atom that identifies a string. If this parameter is an atom, it must have been created by using the GlobalAddAtom function. The atom, a 16-bit value, must be placed in the low-order word of the lpString parameter; the high-order word must be zero.", "possible_constants": []}]}, {"name": "GetPropW", "return_type": "HANDLE", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpropw", "description": "Retrieves a data handle from the property list of the specified window. The character string identifies the handle to be retrieved. The string and handle must have been added to the property list by a previous call to the SetProp function.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window whose property list is to be searched.", "possible_constants": []}, {"name": "lpString", "type": "LPCTSTR", "description": "An atom that identifies a string. If this parameter is an atom, it must have been created by using the GlobalAddAtom function. The atom, a 16-bit value, must be placed in the low-order word of the lpString parameter; the high-order word must be zero.", "possible_constants": []}]}, {"name": "GetQueueStatus", "return_type": "DWORD", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getqueuestatus", "description": "Retrieves the type of messages found in the calling thread's message queue.", "parameters": [{"name": "flags", "type": "UINT", "description": "The types of messages for which to check. This parameter can be one or more of the following values.", "possible_constants": [["QS_ALLEVENTS", -1], ["QS_ALLINPUT", -1], ["QS_ALLPOSTMESSAGE", 256], ["QS_HOTKEY", 128], ["QS_INPUT", -1], ["QS_KEY", 1], ["QS_MOUSE", -1], ["QS_MOUSEBUTTON", 4], ["QS_MOUSEMOVE", 2], ["QS_PAINT", 32], ["QS_POSTMESSAGE", 8], ["QS_RAWINPUT", 1024], ["QS_SENDMESSAGE", 64], ["QS_TIMER", 16]]}]}, {"name": "GetRawInputBuffer", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputbuffer", "description": "Performs a buffered read of the raw input messages data found in the calling thread's message queue.", "parameters": [{"name": "pData", "type": "PRAWINPUT", "description": "A pointer to a buffer of RAWINPUT structures that contain the raw input data. If NULL, size of the first raw input message data (minimum required buffer), in bytes, is returned in *pcbSize.", "possible_constants": []}, {"name": "pcbSize", "type": "PUINT", "description": "The size, in bytes, of the provided RAWINPUT buffer.", "possible_constants": []}, {"name": "cbSizeHeader", "type": "UINT", "description": "The size, in bytes, of the RAWINPUTHEADER structure.", "possible_constants": []}]}, {"name": "GetRawInputData", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputdata", "description": "Retrieves the raw input from the specified device.", "parameters": [{"name": "hRawInput", "type": "HRAWINPUT", "description": "A handle to the RAWINPUT structure. This comes from the\nlParam in WM_INPUT.", "possible_constants": []}, {"name": "uiCommand", "type": "UINT", "description": "The command flag. This parameter can be one of the following values.", "possible_constants": [["RID_HEADER", 268435461], ["RID_INPUT", 268435459]]}, {"name": "pData", "type": "LPVOID", "description": "A pointer to the data that comes from the RAWINPUT structure. This depends on the value of\nuiCommand. If\npData is NULL, the required size of the buffer is returned in *pcbSize.", "possible_constants": []}, {"name": "pcbSize", "type": "PUINT", "description": "The size, in bytes, of the data in\npData.", "possible_constants": []}, {"name": "cbSizeHeader", "type": "UINT", "description": "The size, in bytes, of the RAWINPUTHEADER structure.", "possible_constants": []}]}, {"name": "GetRawInputDeviceInfoA", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputdeviceinfoa", "description": "Retrieves information about the raw input device.", "parameters": [{"name": "hDevice", "type": "HANDLE", "description": "A handle to the raw input device. This comes from the hDevice member of RAWINPUTHEADER or from GetRawInputDeviceList.", "possible_constants": []}, {"name": "uiCommand", "type": "UINT", "description": "Specifies what data will be returned in pData. This parameter can be one of the following values.", "possible_constants": [["RIDI_PREPARSEDDATA", 536870917], ["RIDI_DEVICENAME", 536870919], ["RIDI_DEVICEINFO", 536870923]]}, {"name": "pData", "type": "LPVOID", "description": "A pointer to a buffer that contains the information specified by uiCommand.", "possible_constants": []}, {"name": "If uiCommand is RIDI_DEVICEINFO, set the cbSize member of RID_DEVICE_INFO to sizeof(RID_DEVICE_INFO) before calling GetRawInputDeviceInfo.", "type": "", "description": "", "possible_constants": []}, {"name": "pcbSize", "type": "PUINT", "description": "The size, in bytes, of the data in pData.", "possible_constants": []}]}, {"name": "GetRawInputDeviceInfoW", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputdeviceinfow", "description": "Retrieves information about the raw input device.", "parameters": [{"name": "hDevice", "type": "HANDLE", "description": "A handle to the raw input device. This comes from the hDevice member of RAWINPUTHEADER or from GetRawInputDeviceList.", "possible_constants": []}, {"name": "uiCommand", "type": "UINT", "description": "Specifies what data will be returned in pData. This parameter can be one of the following values.", "possible_constants": [["RIDI_PREPARSEDDATA", 536870917], ["RIDI_DEVICENAME", 536870919], ["RIDI_DEVICEINFO", 536870923]]}, {"name": "pData", "type": "LPVOID", "description": "A pointer to a buffer that contains the information specified by uiCommand.", "possible_constants": []}, {"name": "If uiCommand is RIDI_DEVICEINFO, set the cbSize member of RID_DEVICE_INFO to sizeof(RID_DEVICE_INFO) before calling GetRawInputDeviceInfo.", "type": "", "description": "", "possible_constants": []}, {"name": "pcbSize", "type": "PUINT", "description": "The size, in bytes, of the data in pData.", "possible_constants": []}]}, {"name": "GetRawInputDeviceList", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputdevicelist", "description": "Enumerates the raw input devices attached to the system.", "parameters": [{"name": "pRawInputDeviceList", "type": "PRAWINPUTDEVICELIST", "description": "An array of RAWINPUTDEVICELIST structures for the devices attached to the system. If NULL, the number of devices are returned in *puiNumDevices.", "possible_constants": []}, {"name": "puiNumDevices", "type": "PUINT", "description": "If pRawInputDeviceList is NULL, the function populates this variable with the number of devices attached to the system; otherwise, this variable specifies the number of RAWINPUTDEVICELIST structures that can be contained in the buffer to which pRawInputDeviceList points. If this value is less than the number of devices attached to the system, the function returns the actual number of devices in this variable and fails with ERROR_INSUFFICIENT_BUFFER.", "possible_constants": []}, {"name": "cbSize", "type": "UINT", "description": "The size of a RAWINPUTDEVICELIST structure, in bytes.", "possible_constants": []}]}, {"name": "GetRawPointerDeviceData", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawpointerdevicedata", "description": "Gets the raw input data  from the pointer device.", "parameters": [{"name": "pointerId", "type": "", "description": "An identifier of the pointer for which to retrieve information.", "possible_constants": []}, {"name": "historyCount", "type": "", "description": "The pointer history.", "possible_constants": []}, {"name": "propertiesCount", "type": "", "description": "Number of properties to retrieve.", "possible_constants": []}, {"name": "pProperties", "type": "", "description": "Array of POINTER_DEVICE_PROPERTY structures that contain raw data reported by the device.", "possible_constants": []}, {"name": "pValues", "type": "", "description": "The values for pProperties.", "possible_constants": []}]}, {"name": "GetRegisteredRawInputDevices", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getregisteredrawinputdevices", "description": "Retrieves the information about the raw input devices for the current application.", "parameters": [{"name": "pRawInputDevices", "type": "PRAWINPUTDEVICE", "description": "An array of RAWINPUTDEVICE structures for the application.", "possible_constants": []}, {"name": "puiNumDevices", "type": "PUINT", "description": "The number of RAWINPUTDEVICE structures in *pRawInputDevices.", "possible_constants": []}, {"name": "cbSize", "type": "UINT", "description": "The size, in bytes, of a RAWINPUTDEVICE structure.", "possible_constants": []}]}, {"name": "GetScrollBarInfo", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getscrollbarinfo", "description": "The GetScrollBarInfo function retrieves information about the specified scroll bar.", "parameters": [{"name": "hwnd", "type": "HWND", "description": "Handle to a window associated with the scroll bar whose information is to be retrieved. If the\nidObject parameter is OBJID_CLIENT,\nhwnd is a handle to a scroll bar control. Otherwise,\nhwnd is a handle to a window created with WS_VSCROLL and/or WS_HSCROLL style.", "possible_constants": []}, {"name": "idObject", "type": "LONG", "description": "Specifies the scroll bar object. This parameter can be one of the following values.", "possible_constants": [["OBJID_CLIENT", -1], ["OBJID_HSCROLL", -1], ["OBJID_VSCROLL", -1]]}, {"name": "psbi", "type": "PSCROLLBARINFO", "description": "Pointer to a SCROLLBARINFO structure to receive the information. Before calling GetScrollBarInfo, set the\ncbSize member to\nsizeof(SCROLLBARINFO).", "possible_constants": []}]}, {"name": "GetScrollInfo", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getscrollinfo", "description": "The GetScrollInfo function retrieves the parameters of a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box (thumb).", "parameters": [{"name": "hwnd", "type": "HWND", "description": "Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the\nfnBar parameter.", "possible_constants": []}, {"name": "nBar", "type": "int", "description": "Specifies the type of scroll bar for which to retrieve parameters. This parameter can be one of the following values.", "possible_constants": [["SB_CTL", -1], ["SB_HORZ", -1], ["SB_VERT", -1]]}, {"name": "lpsi", "type": "LPSCROLLINFO", "description": "Pointer to a SCROLLINFO structure. Before calling GetScrollInfo, set the\ncbSize member to\nsizeof(SCROLLINFO), and set the\nfMask member to specify the scroll bar parameters to retrieve. Before returning, the function copies the specified parameters to the appropriate members of the structure.\nThe\nfMask member can be one or more of the following values.", "possible_constants": [["SIF_PAGE", -1], ["SIF_POS", -1], ["SIF_RANGE", -1], ["SIF_TRACKPOS", -1]]}]}, {"name": "GetScrollPos", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getscrollpos", "description": "The GetScrollPos function retrieves the current position of the scroll box (thumb) in the specified scroll bar. The current position is a relative value that depends on the current scrolling range. For example, if the scrolling range is 0 through 100 and the scroll box is in the middle of the bar, the current position is 50.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the\nnBar parameter.", "possible_constants": []}, {"name": "nBar", "type": "int", "description": "Specifies the scroll bar to be examined. This parameter can be one of the following values.", "possible_constants": [["SB_CTL", -1], ["SB_HORZ", -1], ["SB_VERT", -1]]}]}, {"name": "GetScrollRange", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getscrollrange", "description": "The GetScrollRange function retrieves the current minimum and maximum scroll box (thumb) positions for the specified scroll bar.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the\nnBar parameter.", "possible_constants": []}, {"name": "nBar", "type": "int", "description": "Specifies the scroll bar from which the positions are retrieved. This parameter can be one of the following values.", "possible_constants": [["SB_CTL", -1], ["SB_HORZ", -1], ["SB_VERT", -1]]}, {"name": "lpMinPos", "type": "LPINT", "description": "Pointer to the integer variable that receives the minimum position.", "possible_constants": []}, {"name": "lpMaxPos", "type": "LPINT", "description": "Pointer to the integer variable that receives the maximum position.", "possible_constants": []}]}, {"name": "GetShellWindow", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getshellwindow", "description": "Retrieves a handle to the Shell's desktop window.", "parameters": []}, {"name": "GetSubMenu", "return_type": "HMENU", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getsubmenu", "description": "Retrieves a handle to the drop-down menu or submenu activated by the specified menu item.", "parameters": [{"name": "hMenu", "type": "HMENU", "description": "A handle to the menu.", "possible_constants": []}, {"name": "nPos", "type": "int", "description": "The zero-based relative position in the specified menu of an item that activates a drop-down menu or submenu.", "possible_constants": []}]}, {"name": "GetSysColor", "return_type": "DWORD", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getsyscolor", "description": "Retrieves the current color of the specified display element. Display elements are the parts of a window and the display that appear on the system display screen.", "parameters": [{"name": "nIndex", "type": "int", "description": "The display element whose color is to be retrieved. This parameter can be one of the following values.", "possible_constants": [["COLOR_3DDKSHADOW", -1], ["COLOR_3DFACE", -1], ["COLOR_3DHIGHLIGHT", -1], ["COLOR_3DHILIGHT", -1], ["COLOR_3DLIGHT", -1], ["COLOR_3DSHADOW", -1], ["COLOR_ACTIVEBORDER", -1], ["COLOR_ACTIVECAPTION", -1], ["COLOR_APPWORKSPACE", -1], ["COLOR_BACKGROUND", -1], ["COLOR_BTNFACE", -1], [" COLOR_BTNHIGHLIGHT", -1], [" COLOR_BTNHILIGHT", -1], ["COLOR_BTNSHADOW", -1], ["COLOR_BTNTEXT", -1], ["COLOR_CAPTIONTEXT", -1], ["COLOR_DESKTOP", -1], ["COLOR_GRADIENTACTIVECAPTION", -1], ["COLOR_GRADIENTINACTIVECAPTION", -1], ["COLOR_GRAYTEXT", -1], ["COLOR_HIGHLIGHT", -1], ["COLOR_HIGHLIGHTTEXT", -1], ["COLOR_HOTLIGHT", -1], ["COLOR_INACTIVEBORDER", -1], ["COLOR_INACTIVECAPTION", -1], ["COLOR_INACTIVECAPTIONTEXT", -1], ["COLOR_INFOBK", -1], ["COLOR_INFOTEXT", -1], ["COLOR_MENU", -1], ["COLOR_MENUHILIGHT", -1], ["COLOR_MENUBAR", -1], ["COLOR_MENUTEXT", -1], ["COLOR_SCROLLBAR", -1], ["COLOR_WINDOW", -1], ["COLOR_WINDOWFRAME", -1], ["COLOR_WINDOWTEXT", -1]]}]}, {"name": "GetSysColorBrush", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getsyscolorbrush", "description": "The GetSysColorBrush function retrieves a handle identifying a logical brush that corresponds to the specified color index.", "parameters": [{"name": "nIndex", "type": "", "description": "A color index. This value corresponds to the color used to paint one of the window elements. See GetSysColor for system color index values.", "possible_constants": []}]}, {"name": "GetSystemDpiForProcess", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getsystemdpiforprocess", "description": "Retrieves the system DPI associated with a given process. This is useful for avoiding compatibility issues that arise from sharing DPI-sensitive information between multiple system-aware processes with different system DPI values.", "parameters": [{"name": "hProcess", "type": "", "description": "The handle for the process to examine. If this value is null, this API behaves identically to GetDpiForSystem.", "possible_constants": []}]}, {"name": "GetSystemMenu", "return_type": "HMENU", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getsystemmenu", "description": "Enables the application to access the window menu (also known as the system menu or the control menu) for copying and modifying.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window that will own a copy of the window menu.", "possible_constants": []}, {"name": "bRevert", "type": "BOOL", "description": "The action to be taken. If this parameter is FALSE, GetSystemMenu returns a handle to the copy of the window menu currently in use. The copy is initially identical to the window menu, but it can be modified. If this parameter is TRUE, GetSystemMenu resets the window menu back to the default state. The previous window menu, if any, is destroyed.", "possible_constants": []}]}, {"name": "GetSystemMetrics", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getsystemmetrics", "description": "Retrieves the specified\nsystem metric or system configuration setting.", "parameters": [{"name": "nIndex", "type": "int", "description": "The system metric or configuration setting to be retrieved. This parameter can be one of the following values.\nNote that all SM_CX* values are widths and all SM_CY* values are heights. Also note that all settings\ndesigned to return Boolean data represent TRUE as any nonzero value, and FALSE as a zero value.", "possible_constants": []}, {"name": "Value\nMeaning\n\n\n\nSM_ARRANGE\n56\n\n\n\nThe flags that specify how the system arranged minimized windows. For more information, see the Remarks section in this topic.\n\n\n\n\nSM_CLEANBOOT\n67\n\n\n\nThe value that specifies how the system is started: \n        \n\n0 Normal boot\n1 Fail-safe boot\n2 Fail-safe with network boot\n\nA fail-safe boot (also called SafeBoot, Safe Mode, or Clean Boot) bypasses the user startup files.\n\n\n\n\nSM_CMONITORS\n80\n\n\n\nThe number of display monitors on a desktop. For more information, see the Remarks section in this topic.\n        \n\n\n\n\nSM_CMOUSEBUTTONS\n43\n\n\n\nThe number of buttons on a mouse, or zero if no mouse is installed.\n\n\n\n\nSM_CONVERTIBLESLATEMODE\n0x2003\n\n\n\nReflects the state of the laptop or slate mode, 0 for Slate Mode and non-zero otherwise. When this system metric changes, the system sends a broadcast message via WM_SETTINGCHANGE with \"ConvertibleSlateMode\" in the LPARAM. Note that this system metric doesn't apply to desktop PCs. In that case, use GetAutoRotationState.\n\n\n\n\nSM_CXBORDER\n5\n\n\n\nThe width of a window border, in pixels. This is equivalent to the SM_CXEDGE value for \n        windows with the 3-D look.\n\n\n\n\nSM_CXCURSOR\n13\n\n\n\nThe width of a cursor, in pixels. The system cannot create cursors of other sizes.\n\n\n\n\nSM_CXDLGFRAME\n7\n\n\n\nThis value is the same as SM_CXFIXEDFRAME.\n\n\n\n\nSM_CXDOUBLECLK\n36\n\n\n\nThe width of the rectangle around the location of a first click in a double-click sequence, \n        in pixels. The second click must occur within the rectangle that is defined by SM_CXDOUBLECLK and SM_CYDOUBLECLK for the system to consider the two \n        clicks a double-click. The two clicks must also occur within a specified time. \n        \nTo set the width of the double-click rectangle, call\nSystemParametersInfo with SPI_SETDOUBLECLKWIDTH.\n\n\n\n\nSM_CXDRAG\n68\n\n\n\nThe number of pixels on either side of a mouse-down point that  the mouse\n       pointer can move before a drag operation begins. This allows the user to click and release the\n       mouse button easily without unintentionally starting a drag operation. If this value is negative, it is subtracted from the left of the mouse-down point and added to the right of it.\n\n\n\n\nSM_CXEDGE\n45\n\n\n\nThe width of a 3-D border, in pixels. This metric is the 3-D counterpart of SM_CXBORDER.\n\n\n\n\nSM_CXFIXEDFRAME\n7\n\n\n\nThe thickness of the frame around the perimeter of a window that has a caption but is not sizable, in pixels.\n       SM_CXFIXEDFRAME is the height of the horizontal border, and SM_CYFIXEDFRAME is the width of the vertical border. \n       \nThis value is the same as SM_CXDLGFRAME.\n\n\n\n\nSM_CXFOCUSBORDER\n83\n\n\n\nThe width of the left and right edges of the focus rectangle that the DrawFocusRect draws. This value is in pixels.\n       \nWindows\u00c2\u00a02000:\u00c2\u00a0\u00c2\u00a0This value is not supported.\n\n\n\n\nSM_CXFRAME\n32\n\n\n\nThis value is the same as SM_CXSIZEFRAME.\n\n\n\n\nSM_CXFULLSCREEN\n16\n\n\n\nThe width of the client area for a full-screen window on the primary display monitor, in pixels. To\n       get the coordinates of the portion of the screen that is not obscured by the system taskbar or by application desktop\n       toolbars, call the \n       SystemParametersInfo function with\n       the SPI_GETWORKAREA value.\n\n\n\n\nSM_CXHSCROLL\n21\n\n\n\nThe width of the arrow bitmap on a horizontal scroll bar, in pixels.\n\n\n\n\nSM_CXHTHUMB\n10\n\n\n\nThe width of the thumb box in a horizontal scroll bar, in pixels.\n\n\n\n\nSM_CXICON\n11\n\n\n\nThe default width of an icon, in pixels. The \n       LoadIcon function can load only icons with the  dimensions that SM_CXICON and SM_CYICON specifies.\n\n\n\n\nSM_CXICONSPACING\n38\n\n\n\nThe width of a grid cell for items in large icon view, in pixels. Each item fits into a rectangle of size SM_CXICONSPACING by SM_CYICONSPACING when arranged. This value is always greater than or equal to SM_CXICON.\n\n\n\n\nSM_CXMAXIMIZED\n61\n\n\n\nThe default width, in pixels, of a maximized top-level window on the primary display monitor.\n\n\n\n\nSM_CXMAXTRACK\n59\n\n\n\nThe default maximum width of a window that has a caption and sizing borders, in pixels. This metric\n       refers to the entire desktop. The user cannot drag the window frame to a size larger than these dimensions. A\n       window can override this value by processing the \n       WM_GETMINMAXINFO message.\n\n\n\n\nSM_CXMENUCHECK\n71\n\n\n\nThe width of the default menu check-mark bitmap, in pixels.\n\n\n\n\nSM_CXMENUSIZE\n54\n\n\n\nThe width of menu bar buttons, such as the child window close button that is used in the multiple document\n       interface, in pixels.\n\n\n\n\nSM_CXMIN\n28\n\n\n\nThe minimum width of a window, in pixels.\n\n\n\n\nSM_CXMINIMIZED\n57\n\n\n\nThe width of a minimized window, in pixels.\n\n\n\n\nSM_CXMINSPACING\n47\n\n\n\nThe width of a grid cell for a minimized window, in pixels. Each minimized window fits into a rectangle\n       this size when arranged. This value is always greater than or equal to SM_CXMINIMIZED.\n\n\n\n\nSM_CXMINTRACK\n34\n\n\n\nThe minimum tracking width of a window, in pixels. The user cannot drag the window frame to a size\n       smaller than these dimensions. A window can override this value by processing the \n       WM_GETMINMAXINFO message.\n\n\n\n\nSM_CXPADDEDBORDER\n92\n\n\n\nThe amount of border padding for captioned windows, in pixels.\nWindows\u00c2\u00a0XP/2000:\u00c2\u00a0\u00c2\u00a0This value is not supported.\n\n\n\n\nSM_CXSCREEN\n0\n\n\n\nThe width of the screen of the primary display monitor, in pixels. This is the same value\n       obtained by calling \n       GetDeviceCaps as follows: GetDeviceCaps(\n       hdcPrimaryMonitor, HORZRES).\n\n\n\n\nSM_CXSIZE\n30\n\n\n\nThe width of a button in a window caption or title bar, in pixels.\n\n\n\n\nSM_CXSIZEFRAME\n32\n\n\n\nThe thickness of the sizing border around the perimeter of a window that can be resized, in pixels.\n       SM_CXSIZEFRAME is the width of the horizontal border, and SM_CYSIZEFRAME is the height of the vertical border. \n       \nThis value is the same as SM_CXFRAME.\n\n\n\n\nSM_CXSMICON\n49\n\n\n\nThe recommended width of a small icon, in pixels. Small icons typically appear in window captions and in\n       small icon view.\n\n\n\n\nSM_CXSMSIZE\n52\n\n\n\nThe width of small caption buttons, in pixels.\n\n\n\n\nSM_CXVIRTUALSCREEN\n78\n\n\n\nThe width of the virtual screen, in pixels. The virtual screen is the bounding rectangle of all\n       display monitors. The SM_XVIRTUALSCREEN metric is the coordinates for the left side of\n       the virtual screen. \n       \n\n\n\n\nSM_CXVSCROLL\n2\n\n\n\nThe width of a vertical scroll bar, in pixels.\n\n\n\n\nSM_CYBORDER\n6\n\n\n\nThe height of a window border, in pixels. This is equivalent to the SM_CYEDGE value for \n        windows with the 3-D look.\n\n\n\n\nSM_CYCAPTION\n4\n\n\n\nThe height of a caption area, in pixels.\n\n\n\n\nSM_CYCURSOR\n14\n\n\n\nThe height of a cursor, in pixels. The system cannot create cursors of other sizes.\n\n\n\n\nSM_CYDLGFRAME\n8\n\n\n\nThis value is the same as SM_CYFIXEDFRAME.\n\n\n\n\nSM_CYDOUBLECLK\n37\n\n\n\nThe height of the rectangle around the location of a first click in a double-click sequence, \n        in pixels. The second click must occur within the rectangle defined by SM_CXDOUBLECLK and SM_CYDOUBLECLK for the system to consider the two \n        clicks a double-click. The two clicks must also occur within a specified time. \n        \nTo set the height of the double-click rectangle, call\nSystemParametersInfo with SPI_SETDOUBLECLKHEIGHT.\n\n\n\n\nSM_CYDRAG\n69\n\n\n\nThe number of pixels above and below a mouse-down point that the mouse\n       pointer can move before a drag operation begins. This allows the user to click and release the\n       mouse button easily without unintentionally starting a drag operation. If this value is negative, it is subtracted from above the mouse-down point and added below it. \n\n\n\n\nSM_CYEDGE\n46\n\n\n\nThe height of a 3-D border, in pixels. This is the 3-D counterpart of SM_CYBORDER.\n\n\n\n\nSM_CYFIXEDFRAME\n8\n\n\n\nThe thickness of the frame around the perimeter of a window that has a caption but is not sizable, in pixels.\n       SM_CXFIXEDFRAME is the height of the horizontal border, and SM_CYFIXEDFRAME is the width of the vertical border.\nThis value is the same as SM_CYDLGFRAME.\n\n\n\n\nSM_CYFOCUSBORDER\n84\n\n\n\nThe height of the top and bottom edges of the focus rectangle drawn\n       by \n       DrawFocusRect. This value is in pixels.\nWindows\u00c2\u00a02000:\u00c2\u00a0\u00c2\u00a0This value is not supported.\n\n\n\n\nSM_CYFRAME\n33\n\n\n\nThis value is the same as SM_CYSIZEFRAME.\n\n\n\n\nSM_CYFULLSCREEN\n17\n\n\n\nThe height of the client area for a full-screen window on the primary display monitor, in pixels. To\n       get the coordinates of the portion of the screen not obscured by the system taskbar or by application desktop\n       toolbars, call the \n       SystemParametersInfo function with\n       the SPI_GETWORKAREA value.\n\n\n\n\nSM_CYHSCROLL\n3\n\n\n\nThe height of a horizontal scroll bar, in\n       pixels.\n\n\n\n\nSM_CYICON\n12\n\n\n\nThe default height of an icon, in pixels. The \n       LoadIcon function can load only icons with the\n       dimensions SM_CXICON and SM_CYICON.\n\n\n\n\nSM_CYICONSPACING\n39\n\n\n\nThe height of a grid cell for items in large icon view, in pixels. Each item fits into a rectangle of size SM_CXICONSPACING by SM_CYICONSPACING when arranged. This value is always greater than or equal to SM_CYICON.\n\n\n\n\nSM_CYKANJIWINDOW\n18\n\n\n\nFor double byte character set versions of the system, this is the height of the Kanji window at the bottom\n       of the screen, in pixels.\n\n\n\n\nSM_CYMAXIMIZED\n62\n\n\n\nThe default height, in pixels, of a maximized top-level window on the primary display monitor.\n\n\n\n\nSM_CYMAXTRACK\n60\n\n\n\nThe default maximum height of a window that has a caption and sizing borders, in pixels. This metric\n       refers to the entire desktop. The user cannot drag the window frame to a size larger than these dimensions. A\n       window can override this value by processing the \n       WM_GETMINMAXINFO message.\n\n\n\n\nSM_CYMENU\n15\n\n\n\nThe height of a single-line menu bar, in pixels.\n\n\n\n\nSM_CYMENUCHECK\n72\n\n\n\nThe height of the default menu check-mark bitmap, in pixels.\n\n\n\n\nSM_CYMENUSIZE\n55\n\n\n\nThe height of menu bar buttons, such as the child window close button that is used in the multiple document\n       interface, in pixels.\n\n\n\n\nSM_CYMIN\n29\n\n\n\nThe minimum height of a window, in pixels.\n\n\n\n\nSM_CYMINIMIZED\n58\n\n\n\nThe height of a minimized window, in pixels.\n\n\n\n\nSM_CYMINSPACING\n48\n\n\n\nThe height of a grid cell for a minimized window, in pixels. Each minimized window fits into a rectangle\n       this size when arranged. This value is always greater than or equal to SM_CYMINIMIZED.\n\n\n\n\nSM_CYMINTRACK\n35\n\n\n\nThe minimum tracking height of a window, in pixels. The user cannot drag the window frame to a size\n       smaller than these dimensions. A window can override this value by processing the \n       WM_GETMINMAXINFO message.\n\n\n\n\nSM_CYSCREEN\n1\n\n\n\nThe height of the screen of the primary display monitor, in pixels. This is the same value\n       obtained by calling \n       GetDeviceCaps as follows: GetDeviceCaps(\n       hdcPrimaryMonitor, VERTRES).\n\n\n\n\nSM_CYSIZE\n31\n\n\n\nThe height of a button in a window caption or title bar, in pixels.\n\n\n\n\nSM_CYSIZEFRAME\n33\n\n\n\nThe thickness of the sizing border around the perimeter of a window that can be resized, in pixels.\n       SM_CXSIZEFRAME is the width of the horizontal border, and SM_CYSIZEFRAME is the height of the vertical border. \n       \nThis value is the same as SM_CYFRAME.\n\n\n\n\nSM_CYSMCAPTION\n51\n\n\n\nThe height of a small caption, in pixels.\n\n\n\n\nSM_CYSMICON\n50\n\n\n\nThe recommended height of a small icon, in pixels. Small icons typically appear in window captions and in\n       small icon view.\n\n\n\n\nSM_CYSMSIZE\n53\n\n\n\nThe height of small caption buttons, in pixels.\n\n\n\n\nSM_CYVIRTUALSCREEN\n79\n\n\n\nThe height of the virtual screen, in pixels. The virtual screen is the bounding rectangle of all\n       display monitors. The SM_YVIRTUALSCREEN metric is the coordinates for the top of\n       the virtual screen.\n\n\n\n\nSM_CYVSCROLL\n20\n\n\n\nThe height of the arrow bitmap on a vertical scroll bar, in\n       pixels.\n\n\n\n\nSM_CYVTHUMB\n9\n\n\n\nThe height of the thumb box in a vertical scroll bar, in pixels.\n\n\n\n\nSM_DBCSENABLED\n42\n\n\n\nNonzero if User32.dll supports DBCS; otherwise, 0.\n        \n       \n\n\n\n\nSM_DEBUG\n22\n\n\n\nNonzero if the debug version of User.exe is installed; otherwise, 0.\n\n\n\n\nSM_DIGITIZER\n94\n\n\n\nNonzero  if the current operating system is Windows\u00c2\u00a07  or Windows Server\u00c2\u00a02008\u00c2\u00a0R2 and the Tablet PC Input service is started; otherwise, 0. The return value is a bitmask that specifies the type of digitizer input supported by the device. For more information, see Remarks.\nWindows Server\u00c2\u00a02008, Windows\u00c2\u00a0Vista and Windows\u00c2\u00a0XP/2000:\u00c2\u00a0\u00c2\u00a0This value  is not supported.\n\n\n\n\nSM_IMMENABLED\n82\n\n\n\nNonzero if Input Method Manager/Input Method Editor features are enabled; otherwise, 0.\nSM_IMMENABLED indicates whether the system is ready to use a Unicode-based IME on a Unicode application.\nTo ensure that a language-dependent IME works, check SM_DBCSENABLED and the system ANSI code page.\nOtherwise the ANSI-to-Unicode conversion may not be performed correctly, or some components like fonts\nor registry settings may not be present.\n\n\n\n\nSM_MAXIMUMTOUCHES\n95\n\n\n\nNonzero if there are digitizers in the system; otherwise, 0. \nSM_MAXIMUMTOUCHES returns the aggregate maximum of the maximum number of contacts supported by every digitizer in the system.  If the system has only single-touch digitizers, the return value is 1. If the system has  multi-touch digitizers, the return value is the number of simultaneous contacts the hardware can provide.\nWindows Server\u00c2\u00a02008, Windows\u00c2\u00a0Vista and Windows\u00c2\u00a0XP/2000:\u00c2\u00a0\u00c2\u00a0This value is not supported.\n\n\n\n\nSM_MEDIACENTER\n87\n\n\n\nNonzero if the current operating system is the Windows XP, Media Center Edition, 0 if not.\n\n\n\n\nSM_MENUDROPALIGNMENT\n40\n\n\n\nNonzero if drop-down menus are right-aligned with the corresponding menu-bar item; 0 if the menus are\n       left-aligned.\n\n\n\n\nSM_MIDEASTENABLED\n74\n\n\n\nNonzero if the system is enabled for Hebrew and Arabic languages, 0 if not.\n\n\n\n\nSM_MOUSEPRESENT\n19\n\n\n\nNonzero if a mouse is installed; otherwise, 0. This value is rarely zero, because of support for virtual mice and because some systems detect the presence of the port instead of the presence of a mouse.\n\n\n\n\nSM_MOUSEHORIZONTALWHEELPRESENT\n91\n\n\n\nNonzero if a mouse with a horizontal scroll wheel is installed; otherwise 0.\n\n\n\n\nSM_MOUSEWHEELPRESENT\n75\n\n\n\nNonzero if a mouse with a vertical scroll wheel is installed; otherwise 0.\n       \n\n\n\n\nSM_NETWORK\n63\n\n\n\nThe least significant bit is set if a network is present; otherwise, it is cleared. The other bits are\n       reserved for future use.\n\n\n\n\nSM_PENWINDOWS\n41\n\n\n\nNonzero if the Microsoft Windows for Pen computing extensions are installed; zero otherwise.\n\n\n\n\nSM_REMOTECONTROL\n0x2001\n\n\n\nThis system metric is used in a Terminal Services environment to determine if the current Terminal Server session is being remotely controlled. Its value is nonzero if the current \n        session is remotely controlled; otherwise, 0.\nYou can use terminal services management tools such as Terminal Services Manager (tsadmin.msc) and shadow.exe to control a remote session. When a session is being remotely controlled, another user can view the contents of that session and potentially interact with it.\n\n\n\n\nSM_REMOTESESSION\n0x1000\n\n\n\nThis system metric is used in a Terminal Services environment. If the calling process is associated \n        with a Terminal Services client session, the return value is nonzero. If the calling process is \n        associated with the Terminal Services console session, the return value is 0. Windows Server\u00c2\u00a02003 and Windows\u00c2\u00a0XP:\u00c2\u00a0\u00c2\u00a0The console session\n        is not necessarily the physical console. For more information, see WTSGetActiveConsoleSessionId.\n\n\n\n\nSM_SAMEDISPLAYFORMAT\n81\n\n\n\nNonzero if all the display monitors have the same color format, otherwise, 0. Two \n        displays can have the same bit depth, but different color formats. For example, the red, green, \n        and blue pixels can be encoded with different numbers of bits, or those bits can be located in \n        different places in a pixel color value.\n        \n       \n\n\n\n\nSM_SECURE\n44\n\n\n\nThis system metric should be ignored; it always returns 0.\n\n\n\n\nSM_SERVERR2\n89\n\n\n\nThe build number if the system is Windows Server\u00c2\u00a02003\u00c2\u00a0R2; otherwise, 0.\n\n\n\n\nSM_SHOWSOUNDS\n70\n\n\n\nNonzero if the user requires an application to present information visually in situations \n        where it would otherwise present the information only in audible form; otherwise, 0.\n\n\n\n\nSM_SHUTTINGDOWN\n0x2000\n\n\n\nNonzero if the current session is shutting down; otherwise, 0.\n        \nWindows\u00c2\u00a02000:\u00c2\u00a0\u00c2\u00a0This value is not supported.\n\n\n\n\nSM_SLOWMACHINE\n73\n\n\n\nNonzero if the computer has a low-end (slow) processor; otherwise, 0.\n\n\n\n\nSM_STARTER\n88\n\n\n\nNonzero if the current operating system is Windows\u00c2\u00a07 Starter Edition, Windows\u00c2\u00a0Vista Starter, or Windows\u00c2\u00a0XP Starter Edition; otherwise, 0.\n\n\n\n\nSM_SWAPBUTTON\n23\n\n\n\nNonzero if the meanings of the left and right mouse buttons are swapped; otherwise, 0.\n\n\n\n\nSM_SYSTEMDOCKED\n\n0x2004\n\n\n\nReflects the state of the docking mode, 0 for Undocked Mode and non-zero otherwise. When this system metric changes, the system sends a broadcast message via WM_SETTINGCHANGE with \"SystemDockMode\" in the LPARAM.\n\n\n\n\nSM_TABLETPC\n86\n\n\n\nNonzero if the current operating system is the Windows XP Tablet PC edition or if the current operating system is Windows\u00c2\u00a0Vista or Windows\u00c2\u00a07 and the Tablet PC Input service is started; otherwise, 0. The SM_DIGITIZER setting indicates the type of digitizer input supported by a device running Windows\u00c2\u00a07 or Windows Server\u00c2\u00a02008\u00c2\u00a0R2. For more information, see Remarks. \n\n\n\n\nSM_XVIRTUALSCREEN\n76\n\n\n\nThe coordinates for the left side of the virtual screen. The virtual screen is the bounding\n        rectangle of all display monitors. The SM_CXVIRTUALSCREEN metric is the width \n        of the virtual screen.\n        \n       \n\n\n\n\nSM_YVIRTUALSCREEN\n77\n\n\n\nThe coordinates for the top of the virtual screen. The virtual screen is the bounding\n        rectangle of all display monitors. The SM_CYVIRTUALSCREEN metric is the height of the virtual screen.", "type": "", "description": "", "possible_constants": []}]}, {"name": "GetSystemMetricsForDpi", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getsystemmetricsfordpi", "description": "Retrieves the specified system metric or system configuration setting taking into account a provided DPI.", "parameters": [{"name": "nIndex", "type": "", "description": "The system metric or configuration setting to be retrieved. See GetSystemMetrics for the possible values.", "possible_constants": []}, {"name": "dpi", "type": "", "description": "The DPI to use for scaling the metric.", "possible_constants": []}]}, {"name": "GetTabbedTextExtentA", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-gettabbedtextextenta", "description": "The GetTabbedTextExtent function computes the width and height of a character string. If the string contains one or more tab characters, the width of the string is based upon the specified tab stops. The GetTabbedTextExtent function uses the currently selected font to compute the dimensions of the string.", "parameters": [{"name": "hdc", "type": "", "description": "A handle to the device context.", "possible_constants": []}, {"name": "lpString", "type": "", "description": "A pointer to a character string.", "possible_constants": []}, {"name": "chCount", "type": "", "description": "The length of the text string. For the ANSI function it is a BYTE count and for the Unicode function it is a WORD count. Note that for the ANSI function, characters in SBCS code pages take one byte each, while most characters in DBCS code pages take two bytes; for the Unicode function, most currently defined Unicode characters (those in the Basic Multilingual Plane (BMP)) are one WORD while Unicode surrogates are two WORDs.", "possible_constants": []}, {"name": "nTabPositions", "type": "", "description": "The number of tab-stop positions in the array pointed to by the lpnTabStopPositions parameter.", "possible_constants": []}, {"name": "lpnTabStopPositions", "type": "", "description": "A pointer to an array containing the tab-stop positions, in device units. The tab stops must be sorted in increasing order; the smallest x-value should be the first item in the array.", "possible_constants": []}]}, {"name": "GetTabbedTextExtentW", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-gettabbedtextextentw", "description": "The GetTabbedTextExtent function computes the width and height of a character string. If the string contains one or more tab characters, the width of the string is based upon the specified tab stops. The GetTabbedTextExtent function uses the currently selected font to compute the dimensions of the string.", "parameters": [{"name": "hdc", "type": "", "description": "A handle to the device context.", "possible_constants": []}, {"name": "lpString", "type": "", "description": "A pointer to a character string.", "possible_constants": []}, {"name": "chCount", "type": "", "description": "The length of the text string. For the ANSI function it is a BYTE count and for the Unicode function it is a WORD count. Note that for the ANSI function, characters in SBCS code pages take one byte each, while most characters in DBCS code pages take two bytes; for the Unicode function, most currently defined Unicode characters (those in the Basic Multilingual Plane (BMP)) are one WORD while Unicode surrogates are two WORDs.", "possible_constants": []}, {"name": "nTabPositions", "type": "", "description": "The number of tab-stop positions in the array pointed to by the lpnTabStopPositions parameter.", "possible_constants": []}, {"name": "lpnTabStopPositions", "type": "", "description": "A pointer to an array containing the tab-stop positions, in device units. The tab stops must be sorted in increasing order; the smallest x-value should be the first item in the array.", "possible_constants": []}]}, {"name": "GetThreadDesktop", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getthreaddesktop", "description": "Retrieves a handle to the desktop assigned to the specified thread.", "parameters": [{"name": "dwThreadId", "type": "", "description": "The thread identifier. The\nGetCurrentThreadId and\nCreateProcess functions return thread identifiers.", "possible_constants": []}]}, {"name": "GetThreadDpiAwarenessContext", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getthreaddpiawarenesscontext", "description": "Gets the DPI_AWARENESS_CONTEXT for the current thread.", "parameters": []}, {"name": "GetThreadDpiHostingBehavior", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getthreaddpihostingbehavior", "description": "Retrieves the DPI_HOSTING_BEHAVIOR from the current thread.", "parameters": []}, {"name": "GetTitleBarInfo", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-gettitlebarinfo", "description": "Retrieves information about the specified title bar.", "parameters": [{"name": "hwnd", "type": "HWND", "description": "A handle to the title bar whose information is to be retrieved.", "possible_constants": []}, {"name": "pti", "type": "PTITLEBARINFO", "description": "", "possible_constants": []}, {"name": "A pointer to a TITLEBARINFO structure to receive the information. Note that you must set the cbSize member to sizeof(TITLEBARINFO) before calling this function.", "type": "", "description": "", "possible_constants": []}]}, {"name": "GetTopWindow", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-gettopwindow", "description": "Examines the Z order of the child windows associated with the specified parent window and retrieves a handle to the child window at the top of the Z order.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the parent window whose child windows are to be examined. If this parameter is NULL, the function returns a handle to the window at the top of the Z order.", "possible_constants": []}]}, {"name": "GetTouchInputInfo", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-gettouchinputinfo", "description": "Retrieves detailed information about touch inputs associated with a particular touch input handle.", "parameters": [{"name": "hTouchInput", "type": "", "description": "The touch input handle received in the LPARAM of a touch message. The function fails with ERROR_INVALID_HANDLE if this handle is not valid. Note that the handle is not valid after it has been used in a successful call to CloseTouchInputHandle or after it has been passed to DefWindowProc, PostMessage, SendMessage or one of their variants.", "possible_constants": []}, {"name": "cInputs", "type": "", "description": "The number of structures in the pInputs array. This should ideally be at least equal to the number of touch points associated with the message as indicated in the message WPARAM. If cInputs is less than the number of touch points, the function will still succeed and populate the pInputs buffer with information about cInputs touch points.", "possible_constants": []}, {"name": "pInputs", "type": "", "description": "A pointer to an array of TOUCHINPUT structures to receive information about the touch points associated with the specified touch input handle.", "possible_constants": []}, {"name": "cbSize", "type": "", "description": "The size, in bytes, of a single TOUCHINPUT structure. If cbSize is not the size of a single TOUCHINPUT structure, the function fails with ERROR_INVALID_PARAMETER.", "possible_constants": []}]}, {"name": "GetUnpredictedMessagePos", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getunpredictedmessagepos", "description": "Gets pointer data before it has gone through touch prediction processing.", "parameters": []}, {"name": "GetUpdatedClipboardFormats", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getupdatedclipboardformats", "description": "Retrieves the currently supported clipboard formats.", "parameters": [{"name": "lpuiFormats", "type": "PUINT", "description": "An array of clipboard formats. For a description of the standard clipboard formats, see Standard Clipboard Formats.", "possible_constants": []}, {"name": "cFormats", "type": "UINT", "description": "The number of entries in the array pointed to by lpuiFormats.", "possible_constants": []}, {"name": "pcFormatsOut", "type": "PUINT", "description": "The actual number of clipboard formats in the array pointed to by lpuiFormats.", "possible_constants": []}]}, {"name": "GetUpdateRect", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getupdaterect", "description": "The GetUpdateRect function retrieves the coordinates of the smallest rectangle that completely encloses the update region of the specified window. GetUpdateRect retrieves the rectangle in logical coordinates. If there is no update region, GetUpdateRect retrieves an empty rectangle (sets all coordinates to zero).", "parameters": [{"name": "hWnd", "type": "", "description": "Handle to the window whose update region is to be retrieved.", "possible_constants": []}, {"name": "lpRect", "type": "", "description": "Pointer to the RECT structure that receives the coordinates, in device units, of the enclosing rectangle.\nAn application can set this parameter to NULL to determine whether an update region exists for the window. If this parameter is NULL, GetUpdateRect returns nonzero if an update region exists, and zero if one does not. This provides a simple and efficient means of determining whether a WM_PAINT message resulted from an invalid area.", "possible_constants": []}, {"name": "bErase", "type": "", "description": "Specifies whether the background in the update region is to be erased. If this parameter is TRUE and the update region is not empty, GetUpdateRect sends a WM_ERASEBKGND message to the specified window to erase the background.", "possible_constants": []}]}, {"name": "GetUpdateRgn", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getupdatergn", "description": "The GetUpdateRgn function retrieves the update region of a window by copying it into the specified region. The coordinates of the update region are relative to the upper-left corner of the window (that is, they are client coordinates).", "parameters": [{"name": "hWnd", "type": "", "description": "Handle to the window with an update region that is to be retrieved.", "possible_constants": []}, {"name": "hRgn", "type": "", "description": "Handle to the region to receive the update region.", "possible_constants": []}, {"name": "bErase", "type": "", "description": "Specifies whether the window background should be erased and whether nonclient areas of child windows should be drawn. If this parameter is FALSE, no drawing is done.", "possible_constants": []}]}, {"name": "GetUserObjectInformationA", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getuserobjectinformationa", "description": "Retrieves information about the specified window station or desktop object.", "parameters": [{"name": "hObj", "type": "", "description": "A handle to the window station or desktop object. This handle is returned by the\nCreateWindowStation,\nOpenWindowStation,\nCreateDesktop, or\nOpenDesktop function.", "possible_constants": []}, {"name": "nIndex", "type": "", "description": "The information to be retrieved. The parameter can be one of the following values.", "possible_constants": [["UOI_FLAGS", -1], ["UOI_HEAPSIZE", -1], ["UOI_IO", -1], ["UOI_NAME", -1], ["UOI_TYPE", -1], ["UOI_USER_SID", -1]]}, {"name": "pvInfo", "type": "", "description": "A pointer to a buffer to receive the object information.", "possible_constants": []}, {"name": "nLength", "type": "", "description": "The size of the buffer pointed to by the pvInfo parameter, in bytes.", "possible_constants": []}, {"name": "lpnLengthNeeded", "type": "", "description": "A pointer to a variable receiving the number of bytes required to store the requested information. If this variable's value is greater than the value of the nLength parameter when the function returns, the function returns FALSE, and none of the information is copied to the pvInfo buffer. If the value of the variable pointed to by lpnLengthNeeded is less than or equal to the value of nLength, the entire information block is copied.", "possible_constants": []}]}, {"name": "GetUserObjectInformationW", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getuserobjectinformationw", "description": "Retrieves information about the specified window station or desktop object.", "parameters": [{"name": "hObj", "type": "", "description": "A handle to the window station or desktop object. This handle is returned by the\nCreateWindowStation,\nOpenWindowStation,\nCreateDesktop, or\nOpenDesktop function.", "possible_constants": []}, {"name": "nIndex", "type": "", "description": "The information to be retrieved. The parameter can be one of the following values.", "possible_constants": [["UOI_FLAGS", -1], ["UOI_HEAPSIZE", -1], ["UOI_IO", -1], ["UOI_NAME", -1], ["UOI_TYPE", -1], ["UOI_USER_SID", -1]]}, {"name": "pvInfo", "type": "", "description": "A pointer to a buffer to receive the object information.", "possible_constants": []}, {"name": "nLength", "type": "", "description": "The size of the buffer pointed to by the pvInfo parameter, in bytes.", "possible_constants": []}, {"name": "lpnLengthNeeded", "type": "", "description": "A pointer to a variable receiving the number of bytes required to store the requested information. If this variable's value is greater than the value of the nLength parameter when the function returns, the function returns FALSE, and none of the information is copied to the pvInfo buffer. If the value of the variable pointed to by lpnLengthNeeded is less than or equal to the value of nLength, the entire information block is copied.", "possible_constants": []}]}, {"name": "GetUserObjectSecurity", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getuserobjectsecurity", "description": "The GetUserObjectSecurity function retrieves security information for the specified user object.", "parameters": [{"name": "hObj", "type": "", "description": "A handle to the user object for which to return security information.", "possible_constants": []}, {"name": "pSIRequested", "type": "", "description": "A pointer to a\nSECURITY_INFORMATION value that specifies the security information being requested.", "possible_constants": []}, {"name": "pSID", "type": "", "description": "A pointer to a\nSECURITY_DESCRIPTOR structure in self-relative format that contains the requested information when the function returns. This buffer must be aligned on a 4-byte boundary.", "possible_constants": []}, {"name": "nLength", "type": "", "description": "The length, in bytes, of the buffer pointed to by the pSD parameter.", "possible_constants": []}, {"name": "lpnLengthNeeded", "type": "", "description": "A pointer to a variable to receive the number of bytes required to store the complete security descriptor. If this variable's value is greater than the value of the nLength parameter when the function returns, the function returns FALSE and none of the security descriptor is copied to the buffer. Otherwise, the entire security descriptor is copied.", "possible_constants": []}]}, {"name": "GetWindow", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindow", "description": "Retrieves a handle to a window that has the specified relationship (Z-Order or owner) to the specified window.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to a window. The window handle retrieved is relative to this window, based on the value of the uCmd parameter.", "possible_constants": []}, {"name": "uCmd", "type": "UINT", "description": "The relationship between the specified window and the window whose handle is to be retrieved. This parameter can be one of the following values.", "possible_constants": [["GW_CHILD", -1], ["GW_ENABLEDPOPUP", -1], ["GW_HWNDFIRST", -1], ["GW_HWNDLAST", -1], ["GW_HWNDNEXT", -1], ["GW_HWNDPREV", -1], ["GW_OWNER", -1]]}]}, {"name": "GetWindowContextHelpId", "return_type": "DWORD", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowcontexthelpid", "description": "Retrieves the Help context identifier, if any, associated with the specified window.", "parameters": [{"name": "unnamedParam1", "type": "HWND", "description": "A handle to the window for which the Help context identifier is to be retrieved.", "possible_constants": []}]}, {"name": "GetWindowDC", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowdc", "description": "The GetWindowDC function retrieves the device context (DC) for the entire window, including title bar, menus, and scroll bars. A window device context permits painting anywhere in a window, because the origin of the device context is the upper-left corner of the window instead of the client area.", "parameters": [{"name": "hWnd", "type": "", "description": "A handle to the window with a device context that is to be retrieved. If this value is NULL, GetWindowDC retrieves the device context for the entire screen.\nIf this parameter is NULL, GetWindowDC retrieves the device context for the primary display monitor. To get the device context for other display monitors, use the EnumDisplayMonitors and CreateDC functions.", "possible_constants": []}]}, {"name": "GetWindowDisplayAffinity", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowdisplayaffinity", "description": "Retrieves the current display affinity setting, from any process, for a given window.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window.", "possible_constants": []}, {"name": "pdwAffinity", "type": "DWORD*", "description": "A pointer to a variable that receives the display affinity setting.\nSee SetWindowDisplayAffinity for a list of affinity settings and their meanings.", "possible_constants": []}]}, {"name": "GetWindowDpiAwarenessContext", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowdpiawarenesscontext", "description": "Returns the DPI_AWARENESS_CONTEXT associated with a window.", "parameters": [{"name": "hwnd", "type": "", "description": "The window to query.", "possible_constants": []}]}, {"name": "GetWindowDpiHostingBehavior", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowdpihostingbehavior", "description": "Returns the DPI_HOSTING_BEHAVIOR of the specified window.", "parameters": [{"name": "hwnd", "type": "", "description": "The handle for the window to examine.", "possible_constants": []}]}, {"name": "GetWindowFeedbackSetting", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowfeedbacksetting", "description": "Retrieves the feedback configuration for a window.", "parameters": [{"name": "hwnd", "type": "", "description": "The window to check for feedback configuration.", "possible_constants": []}, {"name": "feedback", "type": "", "description": "One of the values from the FEEDBACK_TYPE enumeration.", "possible_constants": []}, {"name": "dwFlags", "type": "", "description": "Specify GWFS_INCLUDE_ANCESTORS to check the parent window chain until a value is found. The default is 0 and indicates that only the specified window will be checked.", "possible_constants": []}, {"name": "pSize", "type": "", "description": "The size of memory region that the config parameter points to.\nThe pSize parameter specifies the size of the configuration data for the feedback type in feedback and must be sizeof(BOOL).", "possible_constants": []}, {"name": "config", "type": "", "description": "The configuration data.\nThe config parameter must point to a value of type BOOL.", "possible_constants": []}]}, {"name": "GetWindowInfo", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowinfo", "description": "Retrieves information about the specified window.", "parameters": [{"name": "hwnd", "type": "HWND", "description": "A handle to the window whose information is to be retrieved.", "possible_constants": []}, {"name": "pwi", "type": "PWINDOWINFO", "description": "", "possible_constants": []}, {"name": "A pointer to a WINDOWINFO structure to receive the information. Note that you must set the cbSize member to sizeof(WINDOWINFO) before calling this function.", "type": "", "description": "", "possible_constants": []}]}, {"name": "GetWindowLongA", "return_type": "LONG", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowlonga", "description": "Retrieves information about the specified window. The function also retrieves the 32-bit (DWORD) value at the specified offset into the extra window memory. Note\u00c2\u00a0\u00c2\u00a0If you are retrieving a pointer or a handle, this function has been superseded by the GetWindowLongPtr function. (Pointers and handles are 32 bits on 32-bit Windows and 64 bits on 64-bit Windows.) To write code that is compatible with both 32-bit and 64-bit versions of Windows, use GetWindowLongPtr.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window and, indirectly, the class to which the window belongs.", "possible_constants": []}, {"name": "nIndex", "type": "int", "description": "The zero-based offset to the value to be retrieved. Valid values are in the range zero through the number of bytes of extra window memory, minus four; for example, if you specified 12 or more bytes of extra memory, a value of 8 would be an index to the third 32-bit integer. To retrieve any other value, specify one of the following values.\nThe following values are also available when the hWnd parameter identifies a dialog box.", "possible_constants": [["GWL_EXSTYLE", -1], ["GWL_HINSTANCE", -1], ["GWL_HWNDPARENT", -1], ["GWL_ID", -1], ["GWL_STYLE", -1], ["GWL_USERDATA", -1], ["GWL_WNDPROC", -1], ["DWL_DLGPROC", -1], ["DWL_MSGRESULT", -1], ["DWL_USER", -1]]}]}, {"name": "GetWindowLongPtrA", "return_type": "LONG_PTR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowlongptra", "description": "Retrieves information about the specified window. The function also retrieves the value at a specified offset into the extra window memory.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window and, indirectly, the class to which the window belongs.", "possible_constants": []}, {"name": "nIndex", "type": "int", "description": "The zero-based offset to the value to be retrieved. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of a LONG_PTR. To retrieve any other value, specify one of the following values.\nThe following values are also available when the hWnd parameter identifies a dialog box.", "possible_constants": [["GWL_EXSTYLE", -1], ["GWLP_HINSTANCE", -1], ["GWLP_HWNDPARENT", -1], ["GWLP_ID", -1], ["GWL_STYLE", -1], ["GWLP_USERDATA", -1], ["GWLP_WNDPROC", -1], ["DWLP_DLGPROC", -1], ["DWLP_MSGRESULT", -1], ["DWLP_USER", -1]]}]}, {"name": "GetWindowLongPtrW", "return_type": "LONG_PTR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowlongptrw", "description": "Retrieves information about the specified window. The function also retrieves the value at a specified offset into the extra window memory.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window and, indirectly, the class to which the window belongs.", "possible_constants": []}, {"name": "nIndex", "type": "int", "description": "The zero-based offset to the value to be retrieved. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of a LONG_PTR. To retrieve any other value, specify one of the following values.\nThe following values are also available when the hWnd parameter identifies a dialog box.", "possible_constants": [["GWL_EXSTYLE", -1], ["GWLP_HINSTANCE", -1], ["GWLP_HWNDPARENT", -1], ["GWLP_ID", -1], ["GWL_STYLE", -1], ["GWLP_USERDATA", -1], ["GWLP_WNDPROC", -1], ["DWLP_DLGPROC", -1], ["DWLP_MSGRESULT", -1], ["DWLP_USER", -1]]}]}, {"name": "GetWindowLongW", "return_type": "LONG", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowlongw", "description": "Retrieves information about the specified window. The function also retrieves the 32-bit (DWORD) value at the specified offset into the extra window memory. Note\u00c2\u00a0\u00c2\u00a0If you are retrieving a pointer or a handle, this function has been superseded by the GetWindowLongPtr function. (Pointers and handles are 32 bits on 32-bit Windows and 64 bits on 64-bit Windows.) To write code that is compatible with both 32-bit and 64-bit versions of Windows, use GetWindowLongPtr.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window and, indirectly, the class to which the window belongs.", "possible_constants": []}, {"name": "nIndex", "type": "int", "description": "The zero-based offset to the value to be retrieved. Valid values are in the range zero through the number of bytes of extra window memory, minus four; for example, if you specified 12 or more bytes of extra memory, a value of 8 would be an index to the third 32-bit integer. To retrieve any other value, specify one of the following values.\nThe following values are also available when the hWnd parameter identifies a dialog box.", "possible_constants": [["GWL_EXSTYLE", -1], ["GWL_HINSTANCE", -1], ["GWL_HWNDPARENT", -1], ["GWL_ID", -1], ["GWL_STYLE", -1], ["GWL_USERDATA", -1], ["GWL_WNDPROC", -1], ["DWL_DLGPROC", -1], ["DWL_MSGRESULT", -1], ["DWL_USER", -1]]}]}, {"name": "GetWindowModuleFileNameA", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowmodulefilenamea", "description": "Retrieves the full path and file name of the module associated with the specified window handle.", "parameters": [{"name": "hwnd", "type": "HWND", "description": "A handle to the window whose module file name is to be retrieved.", "possible_constants": []}, {"name": "pszFileName", "type": "LPTSTR", "description": "The path and file name.", "possible_constants": []}, {"name": "cchFileNameMax", "type": "UINT", "description": "The maximum number of characters that can be copied into the lpszFileName buffer.", "possible_constants": []}]}, {"name": "GetWindowModuleFileNameW", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowmodulefilenamew", "description": "Retrieves the full path and file name of the module associated with the specified window handle.", "parameters": [{"name": "hwnd", "type": "HWND", "description": "A handle to the window whose module file name is to be retrieved.", "possible_constants": []}, {"name": "pszFileName", "type": "LPTSTR", "description": "The path and file name.", "possible_constants": []}, {"name": "cchFileNameMax", "type": "UINT", "description": "The maximum number of characters that can be copied into the lpszFileName buffer.", "possible_constants": []}]}, {"name": "GetWindowPlacement", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowplacement", "description": "Retrieves the show state and the restored, minimized, and maximized positions of the specified window.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window.", "possible_constants": []}, {"name": "lpwndpl", "type": "WINDOWPLACEMENT*", "description": "", "possible_constants": []}, {"name": "A pointer to the WINDOWPLACEMENT structure that receives the show state and position information. Before calling GetWindowPlacement, set the length member to sizeof(WINDOWPLACEMENT). GetWindowPlacement fails if lpwndpl-> length is not set correctly.", "type": "", "description": "", "possible_constants": []}]}, {"name": "GetWindowRect", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowrect", "description": "Retrieves the dimensions of the bounding rectangle of the specified window. The dimensions are given in screen coordinates that are relative to the upper-left corner of the screen.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window.", "possible_constants": []}, {"name": "lpRect", "type": "LPRECT", "description": "A pointer to a  RECT structure that receives the screen coordinates of the upper-left and lower-right corners of the window.", "possible_constants": []}]}, {"name": "GetWindowRgn", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowrgn", "description": "The GetWindowRgn function obtains a copy of the window region of a window. The window region of a window is set by calling the SetWindowRgn function. The window region determines the area within the window where the system permits drawing. The system does not display any portion of a window that lies outside of the window region", "parameters": [{"name": "hWnd", "type": "", "description": "Handle to the window whose window region is to be obtained.", "possible_constants": []}, {"name": "hRgn", "type": "", "description": "Handle to the region which will be modified to represent the window region.", "possible_constants": []}]}, {"name": "GetWindowRgnBox", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowrgnbox", "description": "The GetWindowRgnBox function retrieves the dimensions of the tightest bounding rectangle for the window region of a window.", "parameters": [{"name": "hWnd", "type": "", "description": "Handle to the window.", "possible_constants": []}, {"name": "lprc", "type": "", "description": "Pointer to a RECT structure that receives the rectangle dimensions, in device units relative to the upper-left corner of the window.", "possible_constants": []}]}, {"name": "GetWindowTextA", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowtexta", "description": "Copies the text of the specified window's title bar (if it has one) into a buffer. If the specified window is a control, the text of the control is copied. However, GetWindowText cannot retrieve the text of a control in another application.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window or control containing the text.", "possible_constants": []}, {"name": "lpString", "type": "LPTSTR", "description": "The buffer that will receive the text. If the string is as long or longer than the buffer, the string is truncated and terminated with a null character.", "possible_constants": []}, {"name": "nMaxCount", "type": "int", "description": "The maximum number of characters to copy to the buffer, including the null character. If the text exceeds this limit, it is truncated.", "possible_constants": []}]}, {"name": "GetWindowTextLengthA", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowtextlengtha", "description": "Retrieves the length, in characters, of the specified window's title bar text (if the window has a title bar). If the specified window is a control, the function retrieves the length of the text within the control. However, GetWindowTextLength cannot retrieve the length of the text of an edit control in another application.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window or control.", "possible_constants": []}]}, {"name": "GetWindowTextLengthW", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowtextlengthw", "description": "Retrieves the length, in characters, of the specified window's title bar text (if the window has a title bar). If the specified window is a control, the function retrieves the length of the text within the control. However, GetWindowTextLength cannot retrieve the length of the text of an edit control in another application.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window or control.", "possible_constants": []}]}, {"name": "GetWindowTextW", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowtextw", "description": "Copies the text of the specified window's title bar (if it has one) into a buffer. If the specified window is a control, the text of the control is copied. However, GetWindowText cannot retrieve the text of a control in another application.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window or control containing the text.", "possible_constants": []}, {"name": "lpString", "type": "LPTSTR", "description": "The buffer that will receive the text. If the string is as long or longer than the buffer, the string is truncated and terminated with a null character.", "possible_constants": []}, {"name": "nMaxCount", "type": "int", "description": "The maximum number of characters to copy to the buffer, including the null character. If the text exceeds this limit, it is truncated.", "possible_constants": []}]}, {"name": "GetWindowThreadProcessId", "return_type": "DWORD", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowthreadprocessid", "description": "Retrieves the identifier of the thread that created the specified window and, optionally, the identifier of the process that created the window.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window.", "possible_constants": []}, {"name": "lpdwProcessId", "type": "LPDWORD", "description": "A pointer to a variable that receives the process identifier. If this parameter is not NULL, GetWindowThreadProcessId copies the identifier of the process to the variable; otherwise, it does not.", "possible_constants": []}]}, {"name": "GID_ROTATE_ANGLE_FROM_ARGUMENT", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-gid_rotate_angle_from_argument", "description": "The GID_ROTATE_ANGLE_FROM_ARGUMENT macro is used to interpret the\nGID_ROTATE ullArgument value when receiving\nthe value in the WM_GESTURE structure.", "parameters": [{"name": "_arg_", "type": "", "description": "A value from a WM_GESTURE message.", "possible_constants": []}]}, {"name": "GID_ROTATE_ANGLE_TO_ARGUMENT", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-gid_rotate_angle_to_argument", "description": "Converts a radian value to an argument for rotation gesture messages.", "parameters": [{"name": "_arg_", "type": "", "description": "The angle of rotation as a double in radians.", "possible_constants": []}]}, {"name": "GrayStringA", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-graystringa", "description": "The GrayString function draws gray text at the specified location. The function draws the text by copying it into a memory bitmap, graying the bitmap, and then copying the bitmap to the screen. The function grays the text regardless of the selected brush and background. GrayString uses the font currently selected for the specified device context.", "parameters": [{"name": "hDC", "type": "", "description": "A handle to the device context.", "possible_constants": []}, {"name": "hBrush", "type": "", "description": "A handle to the brush to be used for graying. If this parameter is NULL, the text is grayed with the same brush that was used to draw window text.", "possible_constants": []}, {"name": "lpOutputFunc", "type": "", "description": "A pointer to the application-defined function that will draw the string, or, if TextOut is to be used to draw the string, it is a NULL pointer. For details, see the OutputProc callback function.", "possible_constants": []}, {"name": "lpData", "type": "", "description": "A pointer to data to be passed to the output function. If the lpOutputFunc parameter is NULL, lpData must be a pointer to the string to be output.", "possible_constants": []}, {"name": "nCount", "type": "", "description": "The number of characters to be output. If the nCount parameter is zero, GrayString calculates the length of the string (assuming lpData is a pointer to the string). If nCount is 1 and the function pointed to by lpOutputFunc returns FALSE, the image is shown but not grayed.", "possible_constants": []}, {"name": "X", "type": "", "description": "The device x-coordinate of the starting position of the rectangle that encloses the string.", "possible_constants": []}, {"name": "Y", "type": "", "description": "The device y-coordinate of the starting position of the rectangle that encloses the string.", "possible_constants": []}, {"name": "nWidth", "type": "", "description": "The width, in device units, of the rectangle that encloses the string. If this parameter is zero, GrayString calculates the width of the area, assuming lpData is a pointer to the string.", "possible_constants": []}, {"name": "nHeight", "type": "", "description": "The height, in device units, of the rectangle that encloses the string. If this parameter is zero, GrayString calculates the height of the area, assuming lpData is a pointer to the string.", "possible_constants": []}]}, {"name": "GrayStringW", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-graystringw", "description": "The GrayString function draws gray text at the specified location. The function draws the text by copying it into a memory bitmap, graying the bitmap, and then copying the bitmap to the screen. The function grays the text regardless of the selected brush and background. GrayString uses the font currently selected for the specified device context.", "parameters": [{"name": "hDC", "type": "", "description": "A handle to the device context.", "possible_constants": []}, {"name": "hBrush", "type": "", "description": "A handle to the brush to be used for graying. If this parameter is NULL, the text is grayed with the same brush that was used to draw window text.", "possible_constants": []}, {"name": "lpOutputFunc", "type": "", "description": "A pointer to the application-defined function that will draw the string, or, if TextOut is to be used to draw the string, it is a NULL pointer. For details, see the OutputProc callback function.", "possible_constants": []}, {"name": "lpData", "type": "", "description": "A pointer to data to be passed to the output function. If the lpOutputFunc parameter is NULL, lpData must be a pointer to the string to be output.", "possible_constants": []}, {"name": "nCount", "type": "", "description": "The number of characters to be output. If the nCount parameter is zero, GrayString calculates the length of the string (assuming lpData is a pointer to the string). If nCount is 1 and the function pointed to by lpOutputFunc returns FALSE, the image is shown but not grayed.", "possible_constants": []}, {"name": "X", "type": "", "description": "The device x-coordinate of the starting position of the rectangle that encloses the string.", "possible_constants": []}, {"name": "Y", "type": "", "description": "The device y-coordinate of the starting position of the rectangle that encloses the string.", "possible_constants": []}, {"name": "nWidth", "type": "", "description": "The width, in device units, of the rectangle that encloses the string. If this parameter is zero, GrayString calculates the width of the area, assuming lpData is a pointer to the string.", "possible_constants": []}, {"name": "nHeight", "type": "", "description": "The height, in device units, of the rectangle that encloses the string. If this parameter is zero, GrayString calculates the height of the area, assuming lpData is a pointer to the string.", "possible_constants": []}]}, {"name": "HAS_POINTER_CONFIDENCE_WPARAM", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-has_pointer_confidence_wparam", "description": "Checks whether the specified pointer message is considered intentional rather than accidental.", "parameters": [{"name": "wParam", "type": "", "description": "The value to be converted.", "possible_constants": []}]}, {"name": "HideCaret", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-hidecaret", "description": "Removes the caret from the screen. Hiding a caret does not destroy its current shape or invalidate the insertion point.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window that owns the caret. If this parameter is NULL, HideCaret searches the current task for the window that owns the caret.", "possible_constants": []}]}, {"name": "HiliteMenuItem", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-hilitemenuitem", "description": "Adds or removes highlighting from an item in a menu bar.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window that contains the menu.", "possible_constants": []}, {"name": "hMenu", "type": "HMENU", "description": "A handle to the menu bar that contains the item.", "possible_constants": []}, {"name": "uIDHiliteItem", "type": "UINT", "description": "The menu item. This parameter is either the identifier of the menu item or the offset of the menu item in the menu bar, depending on the value of the uHilite parameter.", "possible_constants": []}, {"name": "uHilite", "type": "UINT", "description": "Controls the interpretation of the uItemHilite parameter and indicates whether the menu item is highlighted. This parameter must be a combination of either MF_BYCOMMAND or MF_BYPOSITION and MF_HILITE or MF_UNHILITE.", "possible_constants": [["MF_BYCOMMAND", 0], ["MF_BYPOSITION", 1024], ["MF_HILITE", 128], ["MF_UNHILITE", 0]]}]}, {"name": "InflateRect", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-inflaterect", "description": "The InflateRect function increases or decreases the width and height of the specified rectangle. The InflateRect function adds -dx units to the left end and dx to the right end of the rectangle and -dy units to the top and dy to the bottom. The dx and dy parameters are signed values; positive values increase the width and height, and negative values decrease them.", "parameters": [{"name": "lprc", "type": "", "description": "A pointer to the RECT structure that increases or decreases in size.", "possible_constants": []}, {"name": "dx", "type": "", "description": "The amount to increase or decrease the rectangle width. This parameter must be negative to decrease the width.", "possible_constants": []}, {"name": "dy", "type": "", "description": "The amount to increase or decrease the rectangle height. This parameter must be negative to decrease the height.", "possible_constants": []}]}, {"name": "InitializeTouchInjection", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-initializetouchinjection", "description": "Configures the touch injection context for the calling application and initializes the maximum number of simultaneous contacts that the app can inject.Note\u00c2\u00a0\u00c2\u00a0InitializeTouchInjection must precede any call to  InjectTouchInput.", "parameters": [{"name": "maxCount", "type": "", "description": "The maximum number of touch contacts.\nThe maxCount parameter must be greater than 0 and less than or equal to MAX_TOUCH_COUNT (256) as  defined in winuser.h.", "possible_constants": []}, {"name": "dwMode", "type": "", "description": "The contact visualization mode.\nThe dwMode parameter must be   TOUCH_FEEDBACK_DEFAULT, TOUCH_FEEDBACK_INDIRECT, or TOUCH_FEEDBACK_NONE.", "possible_constants": []}]}, {"name": "InjectSyntheticPointerInput", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-injectsyntheticpointerinput", "description": "Simulates pointer input (pen or touch).", "parameters": [{"name": "device", "type": "", "description": "A handle to the pointer injection device created by CreateSyntheticPointerDevice.", "possible_constants": []}, {"name": "pointerInfo", "type": "", "description": "Array of injected pointers.\nThe type must match the pointerType parameter of the CreateSyntheticPointerDevice call that created the injection device.\nThe ptPixelLocation for each POINTER_TYPE_INFO is specified relative to top left of the virtual screen:", "possible_constants": []}, {"name": "count", "type": "", "description": "The number of contacts.\nFor PT_TOUCH this value must be greater than 0 and less than or equal to MAX_TOUCH_COUNT.\nFor PT_PEN this value must be 1.", "possible_constants": []}]}, {"name": "InjectTouchInput", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-injecttouchinput", "description": "Simulates touch input.Note\u00c2\u00a0\u00c2\u00a0InitializeTouchInjection must precede any call to  InjectTouchInput.", "parameters": [{"name": "count", "type": "", "description": "The size of the array in contacts.\nThe maximum value for count is specified by the maxCount parameter of the InitializeTouchInjection function.", "possible_constants": []}, {"name": "contacts", "type": "", "description": "Array of POINTER_TOUCH_INFO structures that represents all contacts on the desktop. The  screen coordinates of each contact must be within the bounds of the desktop.", "possible_constants": []}]}, {"name": "InSendMessage", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-insendmessage", "description": "Determines whether the current window procedure is processing a message that was sent from another thread (in the same process or a different process) by a call to the SendMessage function.", "parameters": []}, {"name": "InSendMessageEx", "return_type": "DWORD", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-insendmessageex", "description": "Determines whether the current window procedure is processing a message that was sent from another thread (in the same process or a different process).", "parameters": [{"name": "lpReserved", "type": "LPVOID", "description": "Reserved; must be NULL.", "possible_constants": []}]}, {"name": "InsertMenuA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-insertmenua", "description": "Inserts a new menu item into a menu, moving other items down the menu.", "parameters": [{"name": "hMenu", "type": "HMENU", "description": "A handle to the menu to be changed.", "possible_constants": []}, {"name": "uPosition", "type": "UINT", "description": "The menu item before which the new menu item is to be inserted, as determined by the uFlags parameter.", "possible_constants": []}, {"name": "uFlags", "type": "UINT", "description": "Controls the interpretation of the uPosition parameter and the content, appearance, and behavior of the new menu item. This parameter must include one of the following required values.\nThe parameter must also include at least one of the following values.", "possible_constants": [["MF_BYCOMMAND", 0], ["MF_BYPOSITION", 1024], ["MF_BITMAP", 4], ["MF_CHECKED", 8], ["MF_DISABLED", 2], ["MF_ENABLED", 0], ["MF_GRAYED", 1], ["MF_MENUBARBREAK", 32], ["MF_MENUBREAK", 64], ["MF_OWNERDRAW", 256], ["MF_POPUP", 16], ["MF_SEPARATOR", 2048], ["MF_STRING", 0], ["MF_UNCHECKED", 0]]}, {"name": "uIDNewItem", "type": "UINT_PTR", "description": "The identifier of the new menu item or, if the uFlags parameter has the MF_POPUP flag set, a handle to the drop-down menu or submenu.", "possible_constants": []}, {"name": "lpNewItem", "type": "LPCTSTR", "description": "The content of the new menu item. The interpretation of lpNewItem depends on whether the uFlags parameter includes the MF_BITMAP, MF_OWNERDRAW, or MF_STRING flag, as follows.", "possible_constants": [["MF_BITMAP", 4], ["MF_OWNERDRAW", 256], ["MF_STRING", 0]]}]}, {"name": "InsertMenuItemA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-insertmenuitema", "description": "Inserts a new menu item at the specified position in a menu.", "parameters": [{"name": "hmenu", "type": "HMENU", "description": "A handle to the menu in which the new menu item is inserted.", "possible_constants": []}, {"name": "item", "type": "UINT", "description": "The identifier or position of the menu item before which to insert the new item. The meaning of this parameter depends on the value of fByPosition.", "possible_constants": []}, {"name": "fByPosition", "type": "BOOL", "description": "Controls the meaning of item. If this parameter is FALSE, item is a menu item identifier. Otherwise, it is a menu item position. See Accessing Menu Items Programmatically for more information.", "possible_constants": []}, {"name": "lpmi", "type": "LPCMENUITEMINFO", "description": "A pointer to a MENUITEMINFO structure that contains information about the new menu item.", "possible_constants": []}]}, {"name": "InsertMenuItemW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-insertmenuitemw", "description": "Inserts a new menu item at the specified position in a menu.", "parameters": [{"name": "hmenu", "type": "HMENU", "description": "A handle to the menu in which the new menu item is inserted.", "possible_constants": []}, {"name": "item", "type": "UINT", "description": "The identifier or position of the menu item before which to insert the new item. The meaning of this parameter depends on the value of fByPosition.", "possible_constants": []}, {"name": "fByPosition", "type": "BOOL", "description": "Controls the meaning of item. If this parameter is FALSE, item is a menu item identifier. Otherwise, it is a menu item position. See Accessing Menu Items Programmatically for more information.", "possible_constants": []}, {"name": "lpmi", "type": "LPCMENUITEMINFO", "description": "A pointer to a MENUITEMINFO structure that contains information about the new menu item.", "possible_constants": []}]}, {"name": "InsertMenuW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-insertmenuw", "description": "Inserts a new menu item into a menu, moving other items down the menu.", "parameters": [{"name": "hMenu", "type": "HMENU", "description": "A handle to the menu to be changed.", "possible_constants": []}, {"name": "uPosition", "type": "UINT", "description": "The menu item before which the new menu item is to be inserted, as determined by the uFlags parameter.", "possible_constants": []}, {"name": "uFlags", "type": "UINT", "description": "Controls the interpretation of the uPosition parameter and the content, appearance, and behavior of the new menu item. This parameter must include one of the following required values.\nThe parameter must also include at least one of the following values.", "possible_constants": [["MF_BYCOMMAND", 0], ["MF_BYPOSITION", 1024], ["MF_BITMAP", 4], ["MF_CHECKED", 8], ["MF_DISABLED", 2], ["MF_ENABLED", 0], ["MF_GRAYED", 1], ["MF_MENUBARBREAK", 32], ["MF_MENUBREAK", 64], ["MF_OWNERDRAW", 256], ["MF_POPUP", 16], ["MF_SEPARATOR", 2048], ["MF_STRING", 0], ["MF_UNCHECKED", 0]]}, {"name": "uIDNewItem", "type": "UINT_PTR", "description": "The identifier of the new menu item or, if the uFlags parameter has the MF_POPUP flag set, a handle to the drop-down menu or submenu.", "possible_constants": []}, {"name": "lpNewItem", "type": "LPCTSTR", "description": "The content of the new menu item. The interpretation of lpNewItem depends on whether the uFlags parameter includes the MF_BITMAP, MF_OWNERDRAW, or MF_STRING flag, as follows.", "possible_constants": [["MF_BITMAP", 4], ["MF_OWNERDRAW", 256], ["MF_STRING", 0]]}]}, {"name": "InternalGetWindowText", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-internalgetwindowtext", "description": "[This function is not intended for general\n      use. It may\n      be altered or unavailable in subsequent versions of Windows.]\nCopies the text of the specified window's title bar (if it has one) into a buffer.\nThis function is similar to the GetWindowText function.\nHowever, it obtains the window text directly from the window structure\nassociated with the specified window's handle and then always provides the text as a\nUnicode string. This is unlike GetWindowText which obtains the\ntext by sending the window a WM_GETTEXT message.  If the\nspecified window is a control, the text of the control is obtained.\nSyntax\nint InternalGetWindowText(\n  HWND   hWnd,\n  LPWSTR pString,\n  int    cchMaxCount\n);\n\nParameters\nhWnd\nType: HWND\nA handle to the window or control containing the text.\npString\nType: LPWSTR\nThe buffer that is to receive the text.\nIf the string is as long or longer than the buffer, the string is truncated and terminated with a null character.\ncchMaxCount\nType: int\nThe maximum number of characters to be copied to the buffer, including the null character. If the text exceeds this limit, it is truncated.\nReturn value\nType: int\nIf the function succeeds, the return value is the length, in characters, of the copied string, not including the terminating null character.\nIf the window has no title bar or text, if the title bar is empty, or if the window or control handle is invalid, the return value is zero. To get extended error information, call GetLastError.\nRemarks\nThis function was not included in the SDK headers and libraries until Windows\u00c2\u00a0XP with Service Pack\u00c2\u00a01 (SP1) and Windows Server\u00c2\u00a02003. If you do not have a header file and import library for this function, you can call the function using LoadLibrary and GetProcAddress.\nRequirements\n\n\n\n\u00c2\u00a0\n\u00c2\u00a0\n\n\n\n\nMinimum supported client\nWindows\u00c2\u00a02000 Professional [desktop apps only]\n\n\nMinimum supported server\nWindows\u00c2\u00a02000 Server [desktop apps only]\n\n\nTarget Platform\nWindows\n\n\nHeader\nwinuser.h (include Windows.h)\n\n\nLibrary\nUser32.lib\n\n\nDLL\nUser32.dll\n\n\n\nSee also\nConceptual\nGetWindowText\nGetWindowTextLength\nReference\nSetWindowText\nUsing Messages and Message Queues\nWM_GETTEXT\nWindows", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window or control containing the text.", "possible_constants": []}, {"name": "pString", "type": "LPWSTR", "description": "The buffer that is to receive the text.\nIf the string is as long or longer than the buffer, the string is truncated and terminated with a null character.", "possible_constants": []}, {"name": "cchMaxCount", "type": "int", "description": "The maximum number of characters to be copied to the buffer, including the null character. If the text exceeds this limit, it is truncated.", "possible_constants": []}]}, {"name": "IntersectRect", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-intersectrect", "description": "The IntersectRect function calculates the intersection of two source rectangles and places the coordinates of the intersection rectangle into the destination rectangle. If the source rectangles do not intersect, an empty rectangle (in which all coordinates are set to zero) is placed into the destination rectangle.", "parameters": [{"name": "lprcDst", "type": "", "description": "A pointer to the RECT structure that is to receive the intersection of the rectangles pointed to by the lprcSrc1 and lprcSrc2 parameters. This parameter cannot be NULL.", "possible_constants": []}, {"name": "lprcSrc1", "type": "", "description": "A pointer to the RECT structure that contains the first source rectangle.", "possible_constants": []}, {"name": "lprcSrc2", "type": "", "description": "A pointer to the RECT structure that contains the second source rectangle.", "possible_constants": []}]}, {"name": "InvalidateRect", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-invalidaterect", "description": "The InvalidateRect function adds a rectangle to the specified window's update region. The update region represents the portion of the window's client area that must be redrawn.", "parameters": [{"name": "hWnd", "type": "", "description": "A handle to the window whose update region has changed. If this parameter is NULL, the system invalidates and redraws all windows, not just the windows for this application, and sends the WM_ERASEBKGND and WM_NCPAINT messages before the function returns. Setting this parameter to NULL is not recommended.", "possible_constants": []}, {"name": "lpRect", "type": "", "description": "A pointer to a RECT structure that contains the client coordinates of the rectangle to be added to the update region. If this parameter is NULL, the entire client area is added to the update region.", "possible_constants": []}, {"name": "bErase", "type": "", "description": "Specifies whether the background within the update region is to be erased when the update region is processed. If this parameter is TRUE, the background is erased when the BeginPaint function is called. If this parameter is FALSE, the background remains unchanged.", "possible_constants": []}]}, {"name": "InvalidateRgn", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-invalidatergn", "description": "The InvalidateRgn function invalidates the client area within the specified region by adding it to the current update region of a window. The invalidated region, along with all other areas in the update region, is marked for painting when the next WM_PAINT message occurs.", "parameters": [{"name": "hWnd", "type": "", "description": "A handle to the window with an update region that is to be modified.", "possible_constants": []}, {"name": "hRgn", "type": "", "description": "A handle to the region to be added to the update region. The region is assumed to have client coordinates. If this parameter is NULL, the entire client area is added to the update region.", "possible_constants": []}, {"name": "bErase", "type": "", "description": "Specifies whether the background within the update region should be erased when the update region is processed. If this parameter is TRUE, the background is erased when the BeginPaint function is called. If the parameter is FALSE, the background remains unchanged.", "possible_constants": []}]}, {"name": "InvertRect", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-invertrect", "description": "The InvertRect function inverts a rectangle in a window by performing a logical NOT operation on the color values for each pixel in the rectangle's interior.", "parameters": [{"name": "hDC", "type": "", "description": "A handle to the device context.", "possible_constants": []}, {"name": "lprc", "type": "", "description": "A pointer to a RECT structure that contains the logical coordinates of the rectangle to be inverted.", "possible_constants": []}]}, {"name": "IS_INTRESOURCE", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-is_intresource", "description": "Determines whether a value is an integer identifier for a resource.", "parameters": [{"name": "_r", "type": "", "description": "The pointer to be tested whether it contains an integer resource identifier.", "possible_constants": []}]}, {"name": "IS_POINTER_CANCELED_WPARAM", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-is_pointer_canceled_wparam", "description": "Checks whether the specified pointer input ended abruptly, or was invalid, indicating the interaction was not completed.", "parameters": [{"name": "wParam", "type": "", "description": "The value to be converted.", "possible_constants": []}]}, {"name": "IS_POINTER_FIFTHBUTTON_WPARAM", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-is_pointer_fifthbutton_wparam", "description": "Checks whether the specified pointer took fifth action.", "parameters": [{"name": "wParam", "type": "", "description": "The value to be converted.", "possible_constants": []}]}, {"name": "IS_POINTER_FIRSTBUTTON_WPARAM", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-is_pointer_firstbutton_wparam", "description": "Checks whether the specified pointer took first action.", "parameters": [{"name": "wParam", "type": "", "description": "The value to be converted.", "possible_constants": []}]}, {"name": "IS_POINTER_FLAG_SET_WPARAM", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-is_pointer_flag_set_wparam", "description": "Checks whether a pointer macro sets the  specified flag.", "parameters": [{"name": "wParam", "type": "", "description": "The value to be converted.", "possible_constants": []}, {"name": "flag", "type": "", "description": "The flag to be set. The value is one of the Pointer_Flags constants.", "possible_constants": []}]}, {"name": "IS_POINTER_FOURTHBUTTON_WPARAM", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-is_pointer_fourthbutton_wparam", "description": "Checks whether the specified pointer took fourth action.", "parameters": [{"name": "wParam", "type": "", "description": "The value to be converted.", "possible_constants": []}]}, {"name": "IS_POINTER_INCONTACT_WPARAM", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-is_pointer_incontact_wparam", "description": "Checks whether the specified pointer is in contact.", "parameters": [{"name": "wParam", "type": "", "description": "The value to be converted.", "possible_constants": []}]}, {"name": "IS_POINTER_INRANGE_WPARAM", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-is_pointer_inrange_wparam", "description": "Checks whether the specified pointer is in range.", "parameters": [{"name": "wParam", "type": "", "description": "The value to be converted.", "possible_constants": []}]}, {"name": "IS_POINTER_NEW_WPARAM", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-is_pointer_new_wparam", "description": "Checks whether the specified pointer is a new pointer.", "parameters": [{"name": "wParam", "type": "", "description": "The value to be converted.", "possible_constants": []}]}, {"name": "IS_POINTER_SECONDBUTTON_WPARAM", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-is_pointer_secondbutton_wparam", "description": "Checks whether the specified pointer took second action.", "parameters": [{"name": "wParam", "type": "", "description": "The value to be converted.", "possible_constants": []}]}, {"name": "IS_POINTER_THIRDBUTTON_WPARAM", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-is_pointer_thirdbutton_wparam", "description": "Checks whether the specified pointer took third action.", "parameters": [{"name": "wParam", "type": "", "description": "The value to be converted.", "possible_constants": []}]}, {"name": "IsCharAlphaA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-ischaralphaa", "description": "Determines whether a character is an alphabetical character. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.", "parameters": [{"name": "ch", "type": "TCHAR", "description": "The character to be tested.", "possible_constants": []}]}, {"name": "IsCharAlphaNumericA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-ischaralphanumerica", "description": "Determines whether a character is either an alphabetical or a numeric character. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.", "parameters": [{"name": "ch", "type": "TCHAR", "description": "The character to be tested.", "possible_constants": []}]}, {"name": "IsCharAlphaNumericW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-ischaralphanumericw", "description": "Determines whether a character is either an alphabetical or a numeric character. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.", "parameters": [{"name": "ch", "type": "TCHAR", "description": "The character to be tested.", "possible_constants": []}]}, {"name": "IsCharAlphaW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-ischaralphaw", "description": "Determines whether a character is an alphabetical character. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.", "parameters": [{"name": "ch", "type": "TCHAR", "description": "The character to be tested.", "possible_constants": []}]}, {"name": "IsCharLowerA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-ischarlowera", "description": "Determines whether a character is lowercase. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.", "parameters": [{"name": "ch", "type": "TCHAR", "description": "The character to be tested.", "possible_constants": []}]}, {"name": "IsCharLowerW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-ischarlowerw", "description": "Determines whether a character is lowercase. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.", "parameters": [{"name": "ch", "type": "TCHAR", "description": "The character to be tested.", "possible_constants": []}]}, {"name": "IsCharUpperA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-ischaruppera", "description": "Determines whether a character is uppercase. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.", "parameters": [{"name": "ch", "type": "TCHAR", "description": "The character to be tested.", "possible_constants": []}]}, {"name": "IsCharUpperW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-ischarupperw", "description": "Determines whether a character is uppercase. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.", "parameters": [{"name": "ch", "type": "TCHAR", "description": "The character to be tested.", "possible_constants": []}]}, {"name": "IsChild", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-ischild", "description": "Determines whether a window is a child window or descendant window of a specified parent window. A child window is the direct descendant of a specified parent window if that parent window is in the chain of parent windows; the chain of parent windows leads from the original overlapped or pop-up window to the child window.", "parameters": [{"name": "hWndParent", "type": "HWND", "description": "A handle to the parent window.", "possible_constants": []}, {"name": "hWnd", "type": "HWND", "description": "A handle to the window to be tested.", "possible_constants": []}]}, {"name": "IsClipboardFormatAvailable", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-isclipboardformatavailable", "description": "Determines whether the clipboard contains data in the specified format.", "parameters": [{"name": "format", "type": "UINT", "description": "A standard or registered clipboard format. For a description of the standard clipboard formats, see Standard Clipboard Formats .", "possible_constants": []}]}, {"name": "IsDialogMessageA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-isdialogmessagea", "description": "Determines whether a message is intended for the specified dialog box and, if it is, processes the message.", "parameters": [{"name": "hDlg", "type": "HWND", "description": "A handle to the dialog box.", "possible_constants": []}, {"name": "lpMsg", "type": "LPMSG", "description": "A pointer to an MSG structure that contains the message to be checked.", "possible_constants": []}]}, {"name": "IsDialogMessageW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-isdialogmessagew", "description": "Determines whether a message is intended for the specified dialog box and, if it is, processes the message.", "parameters": [{"name": "hDlg", "type": "HWND", "description": "A handle to the dialog box.", "possible_constants": []}, {"name": "lpMsg", "type": "LPMSG", "description": "A pointer to an MSG structure that contains the message to be checked.", "possible_constants": []}]}, {"name": "IsDlgButtonChecked", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-isdlgbuttonchecked", "description": "The IsDlgButtonChecked function determines whether a button control is checked or whether a three-state button control is checked, unchecked, or indeterminate.", "parameters": [{"name": "hDlg", "type": "HWND", "description": "A handle to the dialog box that contains the button control.", "possible_constants": []}, {"name": "nIDButton", "type": "int", "description": "The identifier of the button control.", "possible_constants": []}]}, {"name": "IsGUIThread", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-isguithread", "description": "Determines whether the calling thread is already a GUI thread. It can also optionally convert the thread to a GUI thread.", "parameters": [{"name": "bConvert", "type": "BOOL", "description": "If TRUE and the thread is not a GUI thread, convert the thread to a GUI thread.", "possible_constants": []}]}, {"name": "IsHungAppWindow", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-ishungappwindow", "description": "[This function is not intended for general\n      use. It may\n      be altered or unavailable in subsequent versions of Windows.]\nDetermines whether the system considers that a specified application is not responding.\nAn application is considered to be not responding if it is not waiting for input, is not in\nstartup processing, and has not called PeekMessage within\nthe internal timeout period of 5 seconds.\nSyntax\nBOOL IsHungAppWindow(\n  HWND hwnd\n);\n\nParameters\nhwnd\nType: HWND\nA handle to the window to be tested.\nReturn value\nType: BOOL\nThe return value is TRUE if the window stops responding; otherwise, it is FALSE.  Ghost windows always return\nTRUE.\nRemarks\nThe Windows timeout criteria of 5 seconds is subject to change.\nThis function was not included in the SDK headers and libraries until Windows\u00c2\u00a0XP\u00c2\u00a0Service Pack\u00c2\u00a01 (SP1) and Windows Server\u00c2\u00a02003. If you do not have a header file and import library for this function, you can call the function using LoadLibrary and GetProcAddress.\nRequirements\n\n\n\n\u00c2\u00a0\n\u00c2\u00a0\n\n\n\n\nMinimum supported client\nWindows\u00c2\u00a02000 Professional [desktop apps only]\n\n\nMinimum supported server\nWindows\u00c2\u00a02000 Server [desktop apps only]\n\n\nTarget Platform\nWindows\n\n\nHeader\nwinuser.h (include Windows.h)\n\n\nLibrary\nUser32.lib\n\n\nDLL\nUser32.dll\n\n\nAPI set\next-ms-win-ntuser-window-l1-1-3 (introduced in Windows 10, version 10.0.10240)\n\n\n\nSee also\nConceptual\nIsWindow\nReference\nWindows", "parameters": [{"name": "hwnd", "type": "HWND", "description": "A handle to the window to be tested.", "possible_constants": []}]}, {"name": "IsIconic", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-isiconic", "description": "Determines whether the specified window is minimized (iconic).", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window to be tested.", "possible_constants": []}]}, {"name": "IsImmersiveProcess", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-isimmersiveprocess", "description": "Determines whether the process belongs to a Windows Store app.", "parameters": [{"name": "hProcess", "type": "", "description": "Target process handle.", "possible_constants": []}]}, {"name": "IsMenu", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-ismenu", "description": "Determines whether a handle is a menu handle.", "parameters": [{"name": "hMenu", "type": "HMENU", "description": "A handle to be tested.", "possible_constants": []}]}, {"name": "IsMouseInPointerEnabled", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-ismouseinpointerenabled", "description": "Indicates whether EnableMouseInPointer is set for the mouse to  act as a pointer input device and send WM_POINTER messages.", "parameters": []}, {"name": "IsProcessDPIAware", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-isprocessdpiaware", "description": "[IsProcessDPIAware is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions. Instead, use GetProcessDPIAwareness.]\nDetermines whether the current process is dots per inch (dpi) aware such that it adjusts the sizes of UI elements to compensate for the dpi setting.\nSyntax\nBOOL IsProcessDPIAware();\n\nReturn value\nType: BOOL\nTRUE if the process is dpi aware; otherwise, FALSE.\nRequirements\n\n\n\n\u00c2\u00a0\n\u00c2\u00a0\n\n\n\n\nMinimum supported client\nWindows Vista [desktop apps only]\n\n\nMinimum supported server\nWindows Server 2008 [desktop apps only]\n\n\nTarget Platform\nWindows\n\n\nHeader\nwinuser.h (include Windows.h)\n\n\nLibrary\nUser32.lib\n\n\nDLL\nUser32.dll", "parameters": []}, {"name": "IsRectEmpty", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-isrectempty", "description": "The IsRectEmpty function determines whether the specified rectangle is empty. An empty rectangle is one that has no area; that is, the coordinate of the right side is less than or equal to the coordinate of the left side, or the coordinate of the bottom side is less than or equal to the coordinate of the top side.", "parameters": [{"name": "lprc", "type": "", "description": "Pointer to a RECT structure that contains the logical coordinates of the rectangle.", "possible_constants": []}]}, {"name": "IsTouchWindow", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-istouchwindow", "description": "Checks whether a specified window is touch-capable and, optionally, retrieves the modifier flags set for the window's touch capability.", "parameters": [{"name": "hwnd", "type": "", "description": "The handle of the window. The function fails with ERROR_ACCESS_DENIED if the calling thread is not on the same desktop as the specified window.", "possible_constants": []}, {"name": "pulFlags", "type": "", "description": "The address of the ULONG variable to receive the modifier flags for the specified window's touch capability.", "possible_constants": []}]}, {"name": "IsValidDpiAwarenessContext", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-isvaliddpiawarenesscontext", "description": "Determines if a specified DPI_AWARENESS_CONTEXT is valid and supported by the current system.", "parameters": [{"name": "value", "type": "", "description": "The context that you want to determine if it is supported.", "possible_constants": []}]}, {"name": "IsWindow", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-iswindow", "description": "Determines whether the specified window handle identifies an existing window.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window to be tested.", "possible_constants": []}]}, {"name": "IsWindowEnabled", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-iswindowenabled", "description": "Determines whether the specified window is enabled for mouse and keyboard input.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window to be tested.", "possible_constants": []}]}, {"name": "IsWindowUnicode", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-iswindowunicode", "description": "Determines whether the specified window is a native Unicode window.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window to be tested.", "possible_constants": []}]}, {"name": "IsWindowVisible", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-iswindowvisible", "description": "Determines the visibility state of the specified window.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window to be tested.", "possible_constants": []}]}, {"name": "IsWinEventHookInstalled", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-iswineventhookinstalled", "description": "Determines whether there is an installed WinEvent hook that might be notified of a specified event.", "parameters": [{"name": "event", "type": "DWORD", "description": "The event constant that hooks might be notified of. The function checks whether there is an installed hook for this event constant.", "possible_constants": []}]}, {"name": "IsWow64Message", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-iswow64message", "description": "Determines whether the last message read from the current thread's queue originated from a WOW64 process.", "parameters": []}, {"name": "IsZoomed", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-iszoomed", "description": "Determines whether a window is maximized.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window to be tested.", "possible_constants": []}]}, {"name": "keybd_event", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-keybd_event", "description": "Synthesizes a keystroke. The system can use such a synthesized keystroke to generate a WM_KEYUP or WM_KEYDOWN message. The keyboard driver's interrupt handler calls the keybd_event function.", "parameters": [{"name": "bVk", "type": "BYTE", "description": "A virtual-key code. The code must be a value in the range 1 to 254. For a complete list, see Virtual Key Codes.", "possible_constants": []}, {"name": "bScan", "type": "BYTE", "description": "A hardware scan code for the key.", "possible_constants": []}, {"name": "dwFlags", "type": "DWORD", "description": "Controls various aspects of function operation. This parameter can be one or more of the following values.", "possible_constants": [["KEYEVENTF_EXTENDEDKEY", 1], ["KEYEVENTF_KEYUP", 2]]}, {"name": "dwExtraInfo", "type": "ULONG_PTR", "description": "An additional value associated with the key stroke.", "possible_constants": []}]}, {"name": "KillTimer", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-killtimer", "description": "Destroys the specified timer.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window associated with the specified timer. This value must be the same as the\nhWnd value passed to the SetTimer function that created the timer.", "possible_constants": []}, {"name": "uIDEvent", "type": "UINT_PTR", "description": "The timer to be destroyed. If the window handle passed to SetTimer is valid, this parameter must be the same as the\nnIDEvent\nvalue passed to SetTimer. If the application calls SetTimer with\nhWnd set to NULL, this parameter must be the timer identifier returned by SetTimer.", "possible_constants": []}]}, {"name": "LoadAcceleratorsA", "return_type": "HACCEL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadacceleratorsa", "description": "Loads the specified accelerator table.", "parameters": [{"name": "hInstance", "type": "HINSTANCE", "description": "A handle to the module whose executable file contains the accelerator table to be loaded.", "possible_constants": []}, {"name": "lpTableName", "type": "LPCTSTR", "description": "The name of the accelerator table to be loaded. Alternatively, this parameter can specify the resource identifier of an accelerator-table resource in the low-order word and zero in the high-order word. To create this value, use the MAKEINTRESOURCE macro.", "possible_constants": []}]}, {"name": "LoadAcceleratorsW", "return_type": "HACCEL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadacceleratorsw", "description": "Loads the specified accelerator table.", "parameters": [{"name": "hInstance", "type": "HINSTANCE", "description": "A handle to the module whose executable file contains the accelerator table to be loaded.", "possible_constants": []}, {"name": "lpTableName", "type": "LPCTSTR", "description": "The name of the accelerator table to be loaded. Alternatively, this parameter can specify the resource identifier of an accelerator-table resource in the low-order word and zero in the high-order word. To create this value, use the MAKEINTRESOURCE macro.", "possible_constants": []}]}, {"name": "LoadBitmapA", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadbitmapa", "description": "[LoadBitmap is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions. Instead, use LoadImage and DrawFrameControl.]\nThe LoadBitmap function loads the specified bitmap resource from a module's executable file.\nSyntax\nHBITMAP LoadBitmapA(\n  HINSTANCE hInstance,\n  LPCSTR    lpBitmapName\n);\n\nParameters\nhInstance\nA handle to the instance of the module whose executable file contains the bitmap to be loaded.\nlpBitmapName\nA pointer to a null-terminated string that contains the name of the bitmap resource to be loaded. Alternatively, this parameter can consist of the resource identifier in the low-order word and zero in the high-order word. The MAKEINTRESOURCE macro can be used to create this value.\nReturn value\nIf the function succeeds, the return value is the handle to the specified bitmap.\nIf the function fails, the return value is NULL.\nRemarks\nIf the bitmap pointed to by the lpBitmapName parameter does not exist or there is insufficient memory to load the bitmap, the function fails.\nLoadBitmap creates a compatible bitmap of the display, which cannot be selected to a printer. To load a bitmap that you can select to a printer, call LoadImage and specify LR_CREATEDIBSECTION to create a DIB section. A DIB section can be selected to any device.\nAn application can use the LoadBitmap function to access predefined bitmaps. To do so, the application must set the hInstance parameter to NULL and the lpBitmapName parameter to one of the following values.\n\n\nBitmap name\nBitmap name\n\n\nOBM_BTNCORNERS\nOBM_OLD_RESTORE\n\n\nOBM_BTSIZE\nOBM_OLD_RGARROW\n\n\nOBM_CHECK\nOBM_OLD_UPARROW\n\n\nOBM_CHECKBOXES\nOBM_OLD_ZOOM\n\n\nOBM_CLOSE\nOBM_REDUCE\n\n\nOBM_COMBO\nOBM_REDUCED\n\n\nOBM_DNARROW\nOBM_RESTORE\n\n\nOBM_DNARROWD\nOBM_RESTORED\n\n\nOBM_DNARROWI\nOBM_RGARROW\n\n\nOBM_LFARROW\nOBM_RGARROWD\n\n\nOBM_LFARROWD\nOBM_RGARROWI\n\n\nOBM_LFARROWI\nOBM_SIZE\n\n\nOBM_MNARROW\nOBM_UPARROW\n\n\nOBM_OLD_CLOSE\nOBM_UPARROWD\n\n\nOBM_OLD_DNARROW\nOBM_UPARROWI\n\n\nOBM_OLD_LFARROW\nOBM_ZOOM\n\n\nOBM_OLD_REDUCE\nOBM_ZOOMD\n\n\n\u00c2\u00a0\nBitmap names that begin with OBM_OLD represent bitmaps used by 16-bit versions of Windows earlier than 3.0.\nFor an application to use any of the OBM_ constants, the constant OEMRESOURCE must be defined before the Windows.h header file is included.\nThe application must call the DeleteObject function to delete each bitmap handle returned by the LoadBitmap function.\nExamples\nFor an example, see Example of Menu-Item Bitmaps in Using Menus.\n\n\nNote\nThe winuser.h header defines LoadBitmap as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see Conventions for Function Prototypes.\n\nRequirements\n\n\n\n\u00c2\u00a0\n\u00c2\u00a0\n\n\n\n\nMinimum supported client\nWindows\u00c2\u00a02000 Professional [desktop apps only]\n\n\nMinimum supported server\nWindows\u00c2\u00a02000 Server [desktop apps only]\n\n\nTarget Platform\nWindows\n\n\nHeader\nwinuser.h (include Windows.h)\n\n\nLibrary\nUser32.lib\n\n\nDLL\nUser32.dll\n\n\nAPI set\next-ms-win-ntuser-draw-l1-1-1 (introduced in Windows 8.1)\n\n\n\nSee also\nBitmap Functions\nBitmaps Overview\nCreateBitmap\nDeleteObject\nDrawFrameControl\nLoadCursor\nLoadIcon\nLoadImage\nMAKEINTRESOURCE", "parameters": [{"name": "hInstance", "type": "", "description": "A handle to the instance of the module whose executable file contains the bitmap to be loaded.", "possible_constants": []}, {"name": "lpBitmapName", "type": "", "description": "A pointer to a null-terminated string that contains the name of the bitmap resource to be loaded. Alternatively, this parameter can consist of the resource identifier in the low-order word and zero in the high-order word. The MAKEINTRESOURCE macro can be used to create this value.", "possible_constants": []}]}, {"name": "LoadBitmapW", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadbitmapw", "description": "[LoadBitmap is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions. Instead, use LoadImage and DrawFrameControl.]\nThe LoadBitmap function loads the specified bitmap resource from a module's executable file.\nSyntax\nHBITMAP LoadBitmapW(\n  HINSTANCE hInstance,\n  LPCWSTR   lpBitmapName\n);\n\nParameters\nhInstance\nA handle to the instance of the module whose executable file contains the bitmap to be loaded.\nlpBitmapName\nA pointer to a null-terminated string that contains the name of the bitmap resource to be loaded. Alternatively, this parameter can consist of the resource identifier in the low-order word and zero in the high-order word. The MAKEINTRESOURCE macro can be used to create this value.\nReturn value\nIf the function succeeds, the return value is the handle to the specified bitmap.\nIf the function fails, the return value is NULL.\nRemarks\nIf the bitmap pointed to by the lpBitmapName parameter does not exist or there is insufficient memory to load the bitmap, the function fails.\nLoadBitmap creates a compatible bitmap of the display, which cannot be selected to a printer. To load a bitmap that you can select to a printer, call LoadImage and specify LR_CREATEDIBSECTION to create a DIB section. A DIB section can be selected to any device.\nAn application can use the LoadBitmap function to access predefined bitmaps. To do so, the application must set the hInstance parameter to NULL and the lpBitmapName parameter to one of the following values.\n\n\nBitmap name\nBitmap name\n\n\nOBM_BTNCORNERS\nOBM_OLD_RESTORE\n\n\nOBM_BTSIZE\nOBM_OLD_RGARROW\n\n\nOBM_CHECK\nOBM_OLD_UPARROW\n\n\nOBM_CHECKBOXES\nOBM_OLD_ZOOM\n\n\nOBM_CLOSE\nOBM_REDUCE\n\n\nOBM_COMBO\nOBM_REDUCED\n\n\nOBM_DNARROW\nOBM_RESTORE\n\n\nOBM_DNARROWD\nOBM_RESTORED\n\n\nOBM_DNARROWI\nOBM_RGARROW\n\n\nOBM_LFARROW\nOBM_RGARROWD\n\n\nOBM_LFARROWD\nOBM_RGARROWI\n\n\nOBM_LFARROWI\nOBM_SIZE\n\n\nOBM_MNARROW\nOBM_UPARROW\n\n\nOBM_OLD_CLOSE\nOBM_UPARROWD\n\n\nOBM_OLD_DNARROW\nOBM_UPARROWI\n\n\nOBM_OLD_LFARROW\nOBM_ZOOM\n\n\nOBM_OLD_REDUCE\nOBM_ZOOMD\n\n\n\u00c2\u00a0\nBitmap names that begin with OBM_OLD represent bitmaps used by 16-bit versions of Windows earlier than 3.0.\nFor an application to use any of the OBM_ constants, the constant OEMRESOURCE must be defined before the Windows.h header file is included.\nThe application must call the DeleteObject function to delete each bitmap handle returned by the LoadBitmap function.\nExamples\nFor an example, see Example of Menu-Item Bitmaps in Using Menus.\n\n\nNote\nThe winuser.h header defines LoadBitmap as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see Conventions for Function Prototypes.\n\nRequirements\n\n\n\n\u00c2\u00a0\n\u00c2\u00a0\n\n\n\n\nMinimum supported client\nWindows\u00c2\u00a02000 Professional [desktop apps only]\n\n\nMinimum supported server\nWindows\u00c2\u00a02000 Server [desktop apps only]\n\n\nTarget Platform\nWindows\n\n\nHeader\nwinuser.h (include Windows.h)\n\n\nLibrary\nUser32.lib\n\n\nDLL\nUser32.dll\n\n\nAPI set\next-ms-win-ntuser-draw-l1-1-1 (introduced in Windows 8.1)\n\n\n\nSee also\nBitmap Functions\nBitmaps Overview\nCreateBitmap\nDeleteObject\nDrawFrameControl\nLoadCursor\nLoadIcon\nLoadImage\nMAKEINTRESOURCE", "parameters": [{"name": "hInstance", "type": "", "description": "A handle to the instance of the module whose executable file contains the bitmap to be loaded.", "possible_constants": []}, {"name": "lpBitmapName", "type": "", "description": "A pointer to a null-terminated string that contains the name of the bitmap resource to be loaded. Alternatively, this parameter can consist of the resource identifier in the low-order word and zero in the high-order word. The MAKEINTRESOURCE macro can be used to create this value.", "possible_constants": []}]}, {"name": "LoadCursorA", "return_type": "HCURSOR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadcursora", "description": "Loads the specified cursor resource from the executable (.EXE) file associated with an application instance.", "parameters": [{"name": "hInstance", "type": "HINSTANCE", "description": "A handle to an instance of the module whose executable file contains the cursor to be loaded.", "possible_constants": []}, {"name": "lpCursorName", "type": "LPCTSTR", "description": "The name of the cursor resource to be loaded. Alternatively, this parameter can consist of the resource identifier in the low-order word and zero in the high-order word. The MAKEINTRESOURCE macro can also be used to create this value. To use one of the predefined cursors, the application must set the hInstance parameter to NULL and the lpCursorName parameter to one the following values.", "possible_constants": [["IDC_APPSTARTING", -1], ["IDC_ARROW", -1], ["IDC_CROSS", -1], ["IDC_HAND", -1], ["IDC_HELP", -1], ["IDC_IBEAM", -1], ["IDC_ICON", -1], ["IDC_NO", -1], ["IDC_SIZE", -1], ["IDC_SIZEALL", -1], ["IDC_SIZENESW", -1], ["IDC_SIZENS", -1], ["IDC_SIZENWSE", -1], ["IDC_SIZEWE", -1], ["IDC_UPARROW", -1], ["IDC_WAIT", -1]]}]}, {"name": "LoadCursorFromFileA", "return_type": "HCURSOR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadcursorfromfilea", "description": "Creates a cursor based on data contained in a file.", "parameters": [{"name": "lpFileName", "type": "LPCTSTR", "description": "The source of the file data to be used to create the cursor. The data in the file must be in either .CUR or .ANI format.\nIf the high-order word of lpFileName is nonzero, it is a pointer to a string that is a fully qualified name of a file containing cursor data.", "possible_constants": []}]}, {"name": "LoadCursorFromFileW", "return_type": "HCURSOR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadcursorfromfilew", "description": "Creates a cursor based on data contained in a file.", "parameters": [{"name": "lpFileName", "type": "LPCTSTR", "description": "The source of the file data to be used to create the cursor. The data in the file must be in either .CUR or .ANI format.\nIf the high-order word of lpFileName is nonzero, it is a pointer to a string that is a fully qualified name of a file containing cursor data.", "possible_constants": []}]}, {"name": "LoadCursorW", "return_type": "HCURSOR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadcursorw", "description": "Loads the specified cursor resource from the executable (.EXE) file associated with an application instance.", "parameters": [{"name": "hInstance", "type": "HINSTANCE", "description": "A handle to an instance of the module whose executable file contains the cursor to be loaded.", "possible_constants": []}, {"name": "lpCursorName", "type": "LPCTSTR", "description": "The name of the cursor resource to be loaded. Alternatively, this parameter can consist of the resource identifier in the low-order word and zero in the high-order word. The MAKEINTRESOURCE macro can also be used to create this value. To use one of the predefined cursors, the application must set the hInstance parameter to NULL and the lpCursorName parameter to one the following values.", "possible_constants": [["IDC_APPSTARTING", -1], ["IDC_ARROW", -1], ["IDC_CROSS", -1], ["IDC_HAND", -1], ["IDC_HELP", -1], ["IDC_IBEAM", -1], ["IDC_ICON", -1], ["IDC_NO", -1], ["IDC_SIZE", -1], ["IDC_SIZEALL", -1], ["IDC_SIZENESW", -1], ["IDC_SIZENS", -1], ["IDC_SIZENWSE", -1], ["IDC_SIZEWE", -1], ["IDC_UPARROW", -1], ["IDC_WAIT", -1]]}]}, {"name": "LoadIconA", "return_type": "HICON", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadicona", "description": "Loads the specified icon resource from the executable (.exe) file associated with an application instance.", "parameters": [{"name": "hInstance", "type": "HINSTANCE", "description": "A handle to an instance of the module whose executable file contains the icon to be loaded. This parameter must be NULL when a standard icon is being loaded.", "possible_constants": []}, {"name": "lpIconName", "type": "LPCTSTR", "description": "The name of the icon resource to be loaded. Alternatively, this parameter can contain the resource identifier in the low-order word and zero in the high-order word. Use the MAKEINTRESOURCE macro to create this value.\nTo use one of the predefined icons, set the hInstance parameter to NULL and the lpIconName parameter to one of the following values.", "possible_constants": [["IDI_APPLICATION", -1], ["IDI_ASTERISK", -1], ["IDI_ERROR", -1], ["IDI_EXCLAMATION", -1], ["IDI_HAND", -1], ["IDI_INFORMATION", -1], ["IDI_QUESTION", -1], ["IDI_SHIELD", -1], ["IDI_WARNING", -1], ["IDI_WINLOGO", -1]]}]}, {"name": "LoadIconW", "return_type": "HICON", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadiconw", "description": "Loads the specified icon resource from the executable (.exe) file associated with an application instance.", "parameters": [{"name": "hInstance", "type": "HINSTANCE", "description": "A handle to an instance of the module whose executable file contains the icon to be loaded. This parameter must be NULL when a standard icon is being loaded.", "possible_constants": []}, {"name": "lpIconName", "type": "LPCTSTR", "description": "The name of the icon resource to be loaded. Alternatively, this parameter can contain the resource identifier in the low-order word and zero in the high-order word. Use the MAKEINTRESOURCE macro to create this value.\nTo use one of the predefined icons, set the hInstance parameter to NULL and the lpIconName parameter to one of the following values.", "possible_constants": [["IDI_APPLICATION", -1], ["IDI_ASTERISK", -1], ["IDI_ERROR", -1], ["IDI_EXCLAMATION", -1], ["IDI_HAND", -1], ["IDI_INFORMATION", -1], ["IDI_QUESTION", -1], ["IDI_SHIELD", -1], ["IDI_WARNING", -1], ["IDI_WINLOGO", -1]]}]}, {"name": "LoadImageA", "return_type": "HANDLE", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadimagea", "description": "Loads an icon, cursor, animated cursor, or bitmap.", "parameters": [{"name": "hInst", "type": "HINSTANCE", "description": "A handle to the module of either a DLL or executable (.exe) that contains the image to be loaded. For more information, see GetModuleHandle. Note that as of  32-bit Windows, an instance handle (HINSTANCE), such as the application instance handle exposed by system function call of WinMain, and a module handle (HMODULE) are the same thing.\nTo load an OEM image, set this parameter to NULL.\nTo load a stand-alone resource (icon, cursor, or bitmap file)\u00e2\u0080\u0094for example, c:\\myimage.bmp\u00e2\u0080\u0094set this parameter to NULL.", "possible_constants": []}, {"name": "name", "type": "LPCTSTR", "description": "The image to be loaded. If the hinst parameter is non-NULL and the fuLoad parameter omits LR_LOADFROMFILE, lpszName specifies the image resource in the hinst module. If the image resource is to be loaded by name from the module, the lpszName parameter is a pointer to a null-terminated string that contains the name of the image resource. If the image resource is to be loaded by ordinal from the module, use the MAKEINTRESOURCE macro to convert the image ordinal into a form that can be passed to the LoadImage function.\nFor more information, see the Remarks section below.\nIf the hinst parameter is NULL and the fuLoad parameter omits the LR_LOADFROMFILE value, the lpszName specifies the OEM image to load. The OEM image identifiers are defined in Winuser.h and have the following prefixes.", "possible_constants": []}, {"name": "To pass these constants to the LoadImage function, use the MAKEINTRESOURCE macro. For example, to load the OCR_NORMAL cursor, pass MAKEINTRESOURCE(OCR_NORMAL) as the lpszName parameter, NULL as the hinst parameter, and LR_SHARED as one of the flags to the fuLoad parameter.", "type": "", "description": "If the fuLoad parameter includes the LR_LOADFROMFILE value, lpszName is the name of the file that contains the  stand-alone resource (icon, cursor, or bitmap file). Therefore, set hinst to NULL.", "possible_constants": []}, {"name": "type", "type": "UINT", "description": "The type of image to be loaded. This parameter can be one of the following values.", "possible_constants": [["IMAGE_BITMAP", -1], ["IMAGE_CURSOR", -1], ["IMAGE_ICON", -1]]}, {"name": "cx", "type": "int", "description": "The width, in pixels, of the icon or cursor. If this parameter is zero and the fuLoad parameter is LR_DEFAULTSIZE, the function uses the SM_CXICON or SM_CXCURSOR system metric value to set the width. If this parameter is zero and LR_DEFAULTSIZE is not used, the function uses the actual resource width.", "possible_constants": []}, {"name": "cy", "type": "int", "description": "The height, in pixels, of the icon or cursor. If this parameter is zero and the fuLoad parameter is LR_DEFAULTSIZE, the function uses the SM_CYICON or SM_CYCURSOR system metric value to set the height. If this parameter is zero and LR_DEFAULTSIZE is not used, the function uses the actual resource height.", "possible_constants": []}, {"name": "fuLoad", "type": "UINT", "description": "This parameter can be one or more of the following values.", "possible_constants": [["LR_CREATEDIBSECTION", 8192], ["LR_DEFAULTCOLOR", 0], ["LR_DEFAULTSIZE", 64], ["LR_LOADFROMFILE", 16], ["LR_LOADMAP3DCOLORS", 4096], ["LR_LOADTRANSPARENT", 32], ["LR_MONOCHROME", 1], ["LR_SHARED", 32768], ["LR_VGACOLOR", 128]]}]}, {"name": "LoadImageW", "return_type": "HANDLE", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadimagew", "description": "Loads an icon, cursor, animated cursor, or bitmap.", "parameters": [{"name": "hInst", "type": "HINSTANCE", "description": "A handle to the module of either a DLL or executable (.exe) that contains the image to be loaded. For more information, see GetModuleHandle. Note that as of  32-bit Windows, an instance handle (HINSTANCE), such as the application instance handle exposed by system function call of WinMain, and a module handle (HMODULE) are the same thing.\nTo load an OEM image, set this parameter to NULL.\nTo load a stand-alone resource (icon, cursor, or bitmap file)\u00e2\u0080\u0094for example, c:\\myimage.bmp\u00e2\u0080\u0094set this parameter to NULL.", "possible_constants": []}, {"name": "name", "type": "LPCTSTR", "description": "The image to be loaded. If the hinst parameter is non-NULL and the fuLoad parameter omits LR_LOADFROMFILE, lpszName specifies the image resource in the hinst module. If the image resource is to be loaded by name from the module, the lpszName parameter is a pointer to a null-terminated string that contains the name of the image resource. If the image resource is to be loaded by ordinal from the module, use the MAKEINTRESOURCE macro to convert the image ordinal into a form that can be passed to the LoadImage function.\nFor more information, see the Remarks section below.\nIf the hinst parameter is NULL and the fuLoad parameter omits the LR_LOADFROMFILE value, the lpszName specifies the OEM image to load. The OEM image identifiers are defined in Winuser.h and have the following prefixes.", "possible_constants": []}, {"name": "To pass these constants to the LoadImage function, use the MAKEINTRESOURCE macro. For example, to load the OCR_NORMAL cursor, pass MAKEINTRESOURCE(OCR_NORMAL) as the lpszName parameter, NULL as the hinst parameter, and LR_SHARED as one of the flags to the fuLoad parameter.", "type": "", "description": "If the fuLoad parameter includes the LR_LOADFROMFILE value, lpszName is the name of the file that contains the  stand-alone resource (icon, cursor, or bitmap file). Therefore, set hinst to NULL.", "possible_constants": []}, {"name": "type", "type": "UINT", "description": "The type of image to be loaded. This parameter can be one of the following values.", "possible_constants": [["IMAGE_BITMAP", -1], ["IMAGE_CURSOR", -1], ["IMAGE_ICON", -1]]}, {"name": "cx", "type": "int", "description": "The width, in pixels, of the icon or cursor. If this parameter is zero and the fuLoad parameter is LR_DEFAULTSIZE, the function uses the SM_CXICON or SM_CXCURSOR system metric value to set the width. If this parameter is zero and LR_DEFAULTSIZE is not used, the function uses the actual resource width.", "possible_constants": []}, {"name": "cy", "type": "int", "description": "The height, in pixels, of the icon or cursor. If this parameter is zero and the fuLoad parameter is LR_DEFAULTSIZE, the function uses the SM_CYICON or SM_CYCURSOR system metric value to set the height. If this parameter is zero and LR_DEFAULTSIZE is not used, the function uses the actual resource height.", "possible_constants": []}, {"name": "fuLoad", "type": "UINT", "description": "This parameter can be one or more of the following values.", "possible_constants": [["LR_CREATEDIBSECTION", 8192], ["LR_DEFAULTCOLOR", 0], ["LR_DEFAULTSIZE", 64], ["LR_LOADFROMFILE", 16], ["LR_LOADMAP3DCOLORS", 4096], ["LR_LOADTRANSPARENT", 32], ["LR_MONOCHROME", 1], ["LR_SHARED", 32768], ["LR_VGACOLOR", 128]]}]}, {"name": "LoadKeyboardLayoutA", "return_type": "HKL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadkeyboardlayouta", "description": "Loads a new input locale identifier (formerly called the keyboard layout) into the system.", "parameters": [{"name": "pwszKLID", "type": "LPCTSTR", "description": "The name of the input locale identifier to load. This name is a string composed of the hexadecimal value of the Language Identifier (low word) and a device identifier (high word). For example, U.S. English has a language identifier of 0x0409, so the primary U.S. English layout is named \"00000409\". Variants of U.S. English layout (such as the Dvorak layout) are named \"00010409\", \"00020409\", and so on.", "possible_constants": []}, {"name": "Flags", "type": "UINT", "description": "Specifies how the input locale identifier is to be loaded. This parameter can be one or more of the following values.", "possible_constants": [["KLF_ACTIVATE", 1], ["KLF_NOTELLSHELL", 128], ["KLF_REORDER", 8], ["KLF_REPLACELANG", 16], ["KLF_SUBSTITUTE_OK", 2], ["KLF_SETFORPROCESS", 256], ["KLF_UNLOADPREVIOUS", -1]]}]}, {"name": "LoadKeyboardLayoutW", "return_type": "HKL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadkeyboardlayoutw", "description": "Loads a new input locale identifier (formerly called the keyboard layout) into the system.", "parameters": [{"name": "pwszKLID", "type": "LPCTSTR", "description": "The name of the input locale identifier to load. This name is a string composed of the hexadecimal value of the Language Identifier (low word) and a device identifier (high word). For example, U.S. English has a language identifier of 0x0409, so the primary U.S. English layout is named \"00000409\". Variants of U.S. English layout (such as the Dvorak layout) are named \"00010409\", \"00020409\", and so on.", "possible_constants": []}, {"name": "Flags", "type": "UINT", "description": "Specifies how the input locale identifier is to be loaded. This parameter can be one of the following values.", "possible_constants": [["KLF_ACTIVATE", 1], ["KLF_NOTELLSHELL", 128], ["KLF_REORDER", 8], ["KLF_REPLACELANG", 16], ["KLF_SUBSTITUTE_OK", 2], ["KLF_SETFORPROCESS", 256], ["KLF_UNLOADPREVIOUS", -1]]}]}, {"name": "LoadMenuA", "return_type": "HMENU", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadmenua", "description": "Loads the specified menu resource from the executable (.exe) file associated with an application instance.", "parameters": [{"name": "hInstance", "type": "HINSTANCE", "description": "A handle to the module containing the menu resource to be loaded.", "possible_constants": []}, {"name": "lpMenuName", "type": "LPCTSTR", "description": "The name of the menu resource. Alternatively, this parameter can consist of the resource identifier in the low-order word and zero in the high-order word. To create this value, use the MAKEINTRESOURCE macro.", "possible_constants": []}]}, {"name": "LoadMenuIndirectA", "return_type": "HMENU", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadmenuindirecta", "description": "Loads the specified menu template in memory.", "parameters": [{"name": "lpMenuTemplate", "type": "const MENUTEMPLATE*", "description": "A pointer to a menu template or an extended menu template. A menu template consists of a MENUITEMTEMPLATEHEADER structure followed by one or more contiguous MENUITEMTEMPLATE structures. An extended menu template consists of a MENUEX_TEMPLATE_HEADER structure followed by one or more contiguous MENUEX_TEMPLATE_ITEM structures.", "possible_constants": []}]}, {"name": "LoadMenuIndirectW", "return_type": "HMENU", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadmenuindirectw", "description": "Loads the specified menu template in memory.", "parameters": [{"name": "lpMenuTemplate", "type": "const MENUTEMPLATE*", "description": "A pointer to a menu template or an extended menu template. A menu template consists of a MENUITEMTEMPLATEHEADER structure followed by one or more contiguous MENUITEMTEMPLATE structures. An extended menu template consists of a MENUEX_TEMPLATE_HEADER structure followed by one or more contiguous MENUEX_TEMPLATE_ITEM structures.", "possible_constants": []}]}, {"name": "LoadMenuW", "return_type": "HMENU", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadmenuw", "description": "Loads the specified menu resource from the executable (.exe) file associated with an application instance.", "parameters": [{"name": "hInstance", "type": "HINSTANCE", "description": "A handle to the module containing the menu resource to be loaded.", "possible_constants": []}, {"name": "lpMenuName", "type": "LPCTSTR", "description": "The name of the menu resource. Alternatively, this parameter can consist of the resource identifier in the low-order word and zero in the high-order word. To create this value, use the MAKEINTRESOURCE macro.", "possible_constants": []}]}, {"name": "LoadStringA", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadstringa", "description": "Loads a string resource from the executable file associated with a specified module and either copies the string into a buffer with a terminating null character or returns a read-only pointer to the string resource itself.", "parameters": [{"name": "hInstance", "type": "HINSTANCE", "description": "A handle to an instance of the module whose executable file contains the string resource. To get the handle to the application itself, call the GetModuleHandle function with NULL.", "possible_constants": []}, {"name": "uID", "type": "UINT", "description": "The identifier of the string to be loaded.", "possible_constants": []}, {"name": "lpBuffer", "type": "LPTSTR", "description": "The buffer to receive the string (if cchBufferMax is non-zero) or a read-only pointer to the string resource itself (if cchBufferMax is zero). Must be of sufficient length to hold a pointer (8 bytes).", "possible_constants": []}, {"name": "cchBufferMax", "type": "int", "description": "The size of the buffer, in characters. The string is truncated and null-terminated if it is longer than the number of characters specified. If this parameter is 0, then lpBuffer receives a read-only pointer to the string resource itself.", "possible_constants": []}]}, {"name": "LoadStringW", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadstringw", "description": "Loads a string resource from the executable file associated with a specified module and either copies the string into a buffer with a terminating null character or returns a read-only pointer to the string resource itself.", "parameters": [{"name": "hInstance", "type": "HINSTANCE", "description": "A handle to an instance of the module whose executable file contains the string resource. To get the handle to the application itself, call the GetModuleHandle function with NULL.", "possible_constants": []}, {"name": "uID", "type": "UINT", "description": "The identifier of the string to be loaded.", "possible_constants": []}, {"name": "lpBuffer", "type": "LPTSTR", "description": "The buffer to receive the string (if cchBufferMax is non-zero) or a read-only pointer to the string resource itself (if cchBufferMax is zero). Must be of sufficient length to hold a pointer (8 bytes).", "possible_constants": []}, {"name": "cchBufferMax", "type": "int", "description": "The size of the buffer, in characters. The string is truncated and null-terminated if it is longer than the number of characters specified. If this parameter is 0, then lpBuffer receives a read-only pointer to the string resource itself.", "possible_constants": []}]}, {"name": "LockSetForegroundWindow", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-locksetforegroundwindow", "description": "The foreground process can call the LockSetForegroundWindow function to disable calls to the SetForegroundWindow function.", "parameters": [{"name": "uLockCode", "type": "UINT", "description": "Specifies whether to enable or disable calls to SetForegroundWindow. This parameter can be one of the following values.", "possible_constants": [["LSFW_LOCK", -1], ["LSFW_UNLOCK", -1]]}]}, {"name": "LockWindowUpdate", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-lockwindowupdate", "description": "The LockWindowUpdate function disables or enables drawing in the specified window. Only one window can be locked at a time.", "parameters": [{"name": "hWndLock", "type": "", "description": "The window in which drawing will be disabled. If this parameter is NULL, drawing in the locked window is enabled.", "possible_constants": []}]}, {"name": "LockWorkStation", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-lockworkstation", "description": "Locks the workstation's display. Locking a workstation protects it from unauthorized use.", "parameters": []}, {"name": "LogicalToPhysicalPoint", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-logicaltophysicalpoint", "description": "Converts the logical coordinates of a point in a window to physical coordinates.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window whose transform is used for the conversion. Top level windows are fully supported. In the case of child windows, only the area of overlap between the parent and the child window is converted.", "possible_constants": []}, {"name": "lpPoint", "type": "LPPOINT", "description": "A pointer to a POINT structure that specifies the logical coordinates to be converted. The new physical coordinates are copied into this structure if the function succeeds.", "possible_constants": []}]}, {"name": "LogicalToPhysicalPointForPerMonitorDPI", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-logicaltophysicalpointforpermonitordpi", "description": "Converts a point in a window from logical coordinates into physical coordinates, regardless of the dots per inch (dpi) awareness of the caller. For more information about DPI awareness levels, see PROCESS_DPI_AWARENESS.", "parameters": [{"name": "hWnd", "type": "", "description": "A handle to the window whose transform is used for the conversion.", "possible_constants": []}, {"name": "lpPoint", "type": "", "description": "A pointer to a POINT structure that specifies the logical coordinates to be converted. The new physical coordinates are copied into this structure if the function succeeds.", "possible_constants": []}]}, {"name": "LookupIconIdFromDirectory", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-lookupiconidfromdirectory", "description": "Searches through icon or cursor data for the icon or cursor that best fits the current display device.", "parameters": [{"name": "presbits", "type": "PBYTE", "description": "The icon or cursor directory data. Because this function does not validate the resource data, it causes a general protection (GP) fault or returns an undefined value if presbits is not pointing to valid resource data.", "possible_constants": []}, {"name": "fIcon", "type": "BOOL", "description": "Indicates whether an icon or a cursor is sought. If this parameter is TRUE, the function is searching for an icon; if the parameter is FALSE, the function is searching for a cursor.", "possible_constants": []}]}, {"name": "LookupIconIdFromDirectoryEx", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-lookupiconidfromdirectoryex", "description": "Searches through icon or cursor data for the icon or cursor that best fits the current display device.", "parameters": [{"name": "presbits", "type": "PBYTE", "description": "The icon or cursor directory data. Because this function does not validate the resource data, it causes a general protection (GP) fault or returns an undefined value if presbits is not pointing to valid resource data.", "possible_constants": []}, {"name": "fIcon", "type": "BOOL", "description": "Indicates whether an icon or a cursor is sought. If this parameter is TRUE, the function is searching for an icon; if the parameter is FALSE, the function is searching for a cursor.", "possible_constants": []}, {"name": "cxDesired", "type": "int", "description": "The desired width, in pixels, of the icon. If this parameter is zero, the function uses the SM_CXICON or SM_CXCURSOR system metric value.", "possible_constants": []}, {"name": "cyDesired", "type": "int", "description": "The desired height, in pixels, of the icon. If this parameter is zero, the function uses the SM_CYICON or SM_CYCURSOR system metric value.", "possible_constants": []}, {"name": "Flags", "type": "UINT", "description": "A combination of the following values.", "possible_constants": [["LR_DEFAULTCOLOR", 0], ["LR_MONOCHROME", 1]]}]}, {"name": "MAKEINTRESOURCEA", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-makeintresourcea", "description": "Converts an integer value to a resource type compatible with the resource-management functions. This macro is used in place of a string containing the name of the resource.", "parameters": [{"name": "i", "type": "", "description": "The integer value to be converted.", "possible_constants": []}]}, {"name": "MAKEINTRESOURCEW", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-makeintresourcew", "description": "Converts an integer value to a resource type compatible with the resource-management functions. This macro is used in place of a string containing the name of the resource.", "parameters": [{"name": "i", "type": "", "description": "The integer value to be converted.", "possible_constants": []}]}, {"name": "MAKELPARAM", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-makelparam", "description": "Creates a value for use as an\nlParam parameter in a message. The macro concatenates the specified values.", "parameters": [{"name": "l", "type": "", "description": "The low-order word of the new value.", "possible_constants": []}, {"name": "h", "type": "", "description": "The high-order word of the new value.", "possible_constants": []}]}, {"name": "MAKELRESULT", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-makelresult", "description": "Creates a value for use as a return value from a window procedure. The macro concatenates the specified values.", "parameters": [{"name": "l", "type": "", "description": "The low-order word of the new value.", "possible_constants": []}, {"name": "h", "type": "", "description": "The high-order word of the new value.", "possible_constants": []}]}, {"name": "MAKEWPARAM", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-makewparam", "description": "Creates a value for use as a wParam parameter in a message. The macro concatenates the specified values.", "parameters": [{"name": "l", "type": "", "description": "The low-order word of the new value.", "possible_constants": []}, {"name": "h", "type": "", "description": "The high-order word of the new value.", "possible_constants": []}]}, {"name": "MapDialogRect", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-mapdialogrect", "description": "Converts the specified dialog box units to screen units (pixels). The function replaces the coordinates in the specified RECT structure with the converted coordinates, which allows the structure to be used to create a dialog box or position a control within a dialog box.", "parameters": [{"name": "hDlg", "type": "HWND", "description": "A handle to a dialog box. This function accepts only handles returned by one of the dialog box creation functions; handles for other windows are not valid.", "possible_constants": []}, {"name": "lpRect", "type": "LPRECT", "description": "A pointer to a RECT structure that contains the dialog box coordinates to be converted.", "possible_constants": []}]}, {"name": "MapVirtualKeyA", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-mapvirtualkeya", "description": "Translates (maps) a virtual-key code into a scan code or character value, or translates a scan code into a virtual-key code.", "parameters": [{"name": "uCode", "type": "UINT", "description": "The virtual key code or scan code for a key. How this value is interpreted depends on the value of the uMapType parameter.\nStarting with Windows Vista, the high byte of the uCode value can contain either 0xe0 or 0xe1 to specify the extended scan code.", "possible_constants": []}, {"name": "uMapType", "type": "UINT", "description": "The translation to be performed. The value of this parameter depends on the value of the uCode parameter.", "possible_constants": [["MAPVK_VK_TO_VSC", 0], ["MAPVK_VSC_TO_VK", 1], ["MAPVK_VK_TO_CHAR", 2], ["MAPVK_VSC_TO_VK_EX", 3], ["MAPVK_VK_TO_VSC_EX", 4]]}]}, {"name": "MapVirtualKeyExA", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-mapvirtualkeyexa", "description": "Translates (maps) a virtual-key code into a scan code or character value, or translates a scan code into a virtual-key code. The function translates the codes using the input language and an input locale identifier.", "parameters": [{"name": "uCode", "type": "UINT", "description": "The virtual key code or scan code for a key. How this value is interpreted depends on the value of the uMapType parameter.\nStarting with Windows Vista, the high byte of the uCode value can contain either 0xe0 or 0xe1 to specify the extended scan code.", "possible_constants": []}, {"name": "uMapType", "type": "UINT", "description": "The translation to perform. The value of this parameter depends on the value of the uCode parameter.", "possible_constants": [["MAPVK_VK_TO_VSC", 0], ["MAPVK_VSC_TO_VK", 1], ["MAPVK_VK_TO_CHAR", 2], ["MAPVK_VSC_TO_VK_EX", 3], ["MAPVK_VK_TO_VSC_EX", 4]]}, {"name": "dwhkl", "type": "HKL", "description": "Input locale identifier to use for translating the specified code. This parameter can be any input locale identifier previously returned by the LoadKeyboardLayout function.", "possible_constants": []}]}, {"name": "MapVirtualKeyExW", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-mapvirtualkeyexw", "description": "Translates (maps) a virtual-key code into a scan code or character value, or translates a scan code into a virtual-key code. The function translates the codes using the input language and an input locale identifier.", "parameters": [{"name": "uCode", "type": "UINT", "description": "The virtual key code or scan code for a key. How this value is interpreted depends on the value of the uMapType parameter.\nStarting with Windows Vista, the high byte of the uCode value can contain either 0xe0 or 0xe1 to specify the extended scan code.", "possible_constants": []}, {"name": "uMapType", "type": "UINT", "description": "The translation to perform. The value of this parameter depends on the value of the uCode parameter.", "possible_constants": [["MAPVK_VK_TO_VSC", 0], ["MAPVK_VSC_TO_VK", 1], ["MAPVK_VK_TO_CHAR", 2], ["MAPVK_VSC_TO_VK_EX", 3], ["MAPVK_VK_TO_VSC_EX", 4]]}, {"name": "dwhkl", "type": "HKL", "description": "Input locale identifier to use for translating the specified code. This parameter can be any input locale identifier previously returned by the LoadKeyboardLayout function.", "possible_constants": []}]}, {"name": "MapVirtualKeyW", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-mapvirtualkeyw", "description": "Translates (maps) a virtual-key code into a scan code or character value, or translates a scan code into a virtual-key code.", "parameters": [{"name": "uCode", "type": "UINT", "description": "The virtual key code or scan code for a key. How this value is interpreted depends on the value of the uMapType parameter.\nStarting with Windows Vista, the high byte of the uCode value can contain either 0xe0 or 0xe1 to specify the extended scan code.", "possible_constants": []}, {"name": "uMapType", "type": "UINT", "description": "The translation to be performed. The value of this parameter depends on the value of the uCode parameter.", "possible_constants": [["MAPVK_VK_TO_VSC", 0], ["MAPVK_VSC_TO_VK", 1], ["MAPVK_VK_TO_CHAR", 2], ["MAPVK_VSC_TO_VK_EX", 3], ["MAPVK_VK_TO_VSC_EX", 4]]}]}, {"name": "MapWindowPoints", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-mapwindowpoints", "description": "The MapWindowPoints function converts (maps) a set of points from a coordinate space relative to one window to a coordinate space relative to another window.", "parameters": [{"name": "hWndFrom", "type": "", "description": "A handle to the window from which points are converted. If this parameter is NULL or HWND_DESKTOP, the points are presumed to be in screen coordinates.", "possible_constants": []}, {"name": "hWndTo", "type": "", "description": "A handle to the window to which points are converted. If this parameter is NULL or HWND_DESKTOP, the points are converted to screen coordinates.", "possible_constants": []}, {"name": "lpPoints", "type": "", "description": "A pointer to an array of POINT structures that contain the set of points to be converted. The points are in device units. This parameter can also point to a RECT structure, in which case the cPoints parameter should be set to 2.", "possible_constants": []}, {"name": "cPoints", "type": "", "description": "The number of POINT structures in the array pointed to by the lpPoints parameter.", "possible_constants": []}]}, {"name": "MenuItemFromPoint", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-menuitemfrompoint", "description": "Determines which menu item, if any, is at the specified location.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window containing the menu. If this value is NULL and the hMenu parameter represents a popup menu, the function will find the menu window.", "possible_constants": []}, {"name": "hMenu", "type": "HMENU", "description": "A handle to the menu containing the menu items to hit test.", "possible_constants": []}, {"name": "ptScreen", "type": "POINT", "description": "A structure that specifies the location to test. If hMenu specifies a menu bar, this parameter is in window coordinates. Otherwise, it is in client coordinates.", "possible_constants": []}]}, {"name": "MessageBeep", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-messagebeep", "description": "Plays a waveform sound. The waveform sound for each sound type is identified by an entry in the\nregistry.", "parameters": [{"name": "uType", "type": "", "description": "The sound to be played. The sounds are set by the user through the Sound control panel application, and then\nstored in the registry.\nThis parameter can be one of the following values.", "possible_constants": [["\n0xFFFFFFFF\n", -1], ["MB_ICONASTERISK", 64], ["MB_ICONEXCLAMATION", 48], ["MB_ICONERROR", 16], ["MB_ICONHAND", 16], ["MB_ICONINFORMATION", 64], ["MB_ICONQUESTION", 32], ["MB_ICONSTOP", 16], ["MB_ICONWARNING", 48], ["MB_OK", 0]]}]}, {"name": "MessageBox", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-messagebox", "description": "Displays a modal dialog box that contains a system icon, a set of buttons, and a brief application-specific message, such as status or error information. The message box returns an integer value that indicates which button the user clicked.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the owner window of the message box to be created. If this parameter is NULL, the message box has no owner window.", "possible_constants": []}, {"name": "lpText", "type": "LPCTSTR", "description": "The message to be displayed. If the string consists of more than one line, you can separate the lines using a carriage return and/or linefeed character between each line.", "possible_constants": []}, {"name": "lpCaption", "type": "LPCTSTR", "description": "The dialog box title. If this parameter is NULL, the default title is Error.", "possible_constants": []}, {"name": "uType", "type": "UINT", "description": "The contents and behavior of the dialog box. This parameter can be a combination of flags from the following groups of flags.\nTo indicate the buttons displayed in the message box, specify one of the following values.\nTo display an icon in the message box, specify one of the following values.\nTo indicate the default button, specify one of the following values.\nTo indicate the modality of the dialog box, specify one of the following values.\nTo specify other options, use one or more of the following values.", "possible_constants": [["MB_ABORTRETRYIGNORE", 2], ["MB_CANCELTRYCONTINUE", 6], ["MB_HELP", 16384], ["MB_OK", 0], ["MB_OKCANCEL", 1], ["MB_RETRYCANCEL", 5], ["MB_YESNO", 4], ["MB_YESNOCANCEL", 3], ["MB_ICONEXCLAMATION", 48], ["MB_ICONWARNING", 48], ["MB_ICONINFORMATION", 64], ["MB_ICONASTERISK", 64], ["MB_ICONQUESTION", 32], ["MB_ICONSTOP", 16], ["MB_ICONERROR", 16], ["MB_ICONHAND", 16], ["MB_DEFBUTTON1", 0], ["MB_DEFBUTTON2", 256], ["MB_DEFBUTTON3", 512], ["MB_DEFBUTTON4", 768], ["MB_APPLMODAL", 0], ["MB_SYSTEMMODAL", 4096], ["MB_TASKMODAL", 8192], ["MB_DEFAULT_DESKTOP_ONLY", 131072], ["MB_RIGHT", 524288], ["MB_RTLREADING", 1048576], ["MB_SETFOREGROUND", 65536], ["MB_TOPMOST", 262144], ["MB_SERVICE_NOTIFICATION", 2097152]]}]}, {"name": "MessageBoxA", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-messageboxa", "description": "Displays a modal dialog box that contains a system icon, a set of buttons, and a brief application-specific message, such as status or error information. The message box returns an integer value that indicates which button the user clicked.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the owner window of the message box to be created. If this parameter is NULL, the message box has no owner window.", "possible_constants": []}, {"name": "lpText", "type": "LPCTSTR", "description": "The message to be displayed. If the string consists of more than one line, you can separate the lines using a carriage return and/or linefeed character between each line.", "possible_constants": []}, {"name": "lpCaption", "type": "LPCTSTR", "description": "The dialog box title. If this parameter is NULL, the default title is Error.", "possible_constants": []}, {"name": "uType", "type": "UINT", "description": "The contents and behavior of the dialog box. This parameter can be a combination of flags from the following groups of flags.\nTo indicate the buttons displayed in the message box, specify one of the following values.\nTo display an icon in the message box, specify one of the following values.\nTo indicate the default button, specify one of the following values.\nTo indicate the modality of the dialog box, specify one of the following values.\nTo specify other options, use one or more of the following values.", "possible_constants": [["MB_ABORTRETRYIGNORE", 2], ["MB_CANCELTRYCONTINUE", 6], ["MB_HELP", 16384], ["MB_OK", 0], ["MB_OKCANCEL", 1], ["MB_RETRYCANCEL", 5], ["MB_YESNO", 4], ["MB_YESNOCANCEL", 3], ["MB_ICONEXCLAMATION", 48], ["MB_ICONWARNING", 48], ["MB_ICONINFORMATION", 64], ["MB_ICONASTERISK", 64], ["MB_ICONQUESTION", 32], ["MB_ICONSTOP", 16], ["MB_ICONERROR", 16], ["MB_ICONHAND", 16], ["MB_DEFBUTTON1", 0], ["MB_DEFBUTTON2", 256], ["MB_DEFBUTTON3", 512], ["MB_DEFBUTTON4", 768], ["MB_APPLMODAL", 0], ["MB_SYSTEMMODAL", 4096], ["MB_TASKMODAL", 8192], ["MB_DEFAULT_DESKTOP_ONLY", 131072], ["MB_RIGHT", 524288], ["MB_RTLREADING", 1048576], ["MB_SETFOREGROUND", 65536], ["MB_TOPMOST", 262144], ["MB_SERVICE_NOTIFICATION", 2097152]]}]}, {"name": "MessageBoxExA", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-messageboxexa", "description": "Creates, displays, and operates a message box. The message box contains an application-defined message and title, plus any combination of predefined icons and push buttons. The buttons are in the language of the system user interface.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the owner window of the message box to be created. If this parameter is NULL, the message box has no owner window.", "possible_constants": []}, {"name": "lpText", "type": "LPCTSTR", "description": "The message to be displayed.", "possible_constants": []}, {"name": "lpCaption", "type": "LPCTSTR", "description": "The dialog box title. If this parameter is NULL, the default title Error is used.", "possible_constants": []}, {"name": "uType", "type": "UINT", "description": "The contents and behavior of the dialog box. For information on the supported flags, see MessageBox.", "possible_constants": []}, {"name": "wLanguageId", "type": "WORD", "description": "", "possible_constants": []}, {"name": "The language for the text displayed in the message box button(s). Specifying a value of zero (0) indicates to display the button text in the default system language. If this parameter is MAKELANGID(LANG_NEUTRAL, SUBLANG_NEUTRAL), the current language associated with the calling thread is used.", "type": "", "description": "To specify a language other than the current language, use the MAKELANGID macro to create this parameter. For more information, see MAKELANGID.", "possible_constants": []}]}, {"name": "MessageBoxExW", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-messageboxexw", "description": "Creates, displays, and operates a message box. The message box contains an application-defined message and title, plus any combination of predefined icons and push buttons. The buttons are in the language of the system user interface.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the owner window of the message box to be created. If this parameter is NULL, the message box has no owner window.", "possible_constants": []}, {"name": "lpText", "type": "LPCTSTR", "description": "The message to be displayed.", "possible_constants": []}, {"name": "lpCaption", "type": "LPCTSTR", "description": "The dialog box title. If this parameter is NULL, the default title Error is used.", "possible_constants": []}, {"name": "uType", "type": "UINT", "description": "The contents and behavior of the dialog box. For information on the supported flags, see MessageBox.", "possible_constants": []}, {"name": "wLanguageId", "type": "WORD", "description": "", "possible_constants": []}, {"name": "The language for the text displayed in the message box button(s). Specifying a value of zero (0) indicates to display the button text in the default system language. If this parameter is MAKELANGID(LANG_NEUTRAL, SUBLANG_NEUTRAL), the current language associated with the calling thread is used.", "type": "", "description": "To specify a language other than the current language, use the MAKELANGID macro to create this parameter. For more information, see MAKELANGID.", "possible_constants": []}]}, {"name": "MessageBoxIndirectA", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-messageboxindirecta", "description": "Creates, displays, and operates a message box. The message box contains application-defined message text and title, any icon, and any combination of predefined push buttons.", "parameters": [{"name": "lpmbp", "type": "const LPMSGBOXPARAMS", "description": "A pointer to a MSGBOXPARAMS structure that contains information used to display the message box.", "possible_constants": []}]}, {"name": "MessageBoxIndirectW", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-messageboxindirectw", "description": "Creates, displays, and operates a message box. The message box contains application-defined message text and title, any icon, and any combination of predefined push buttons.", "parameters": [{"name": "lpmbp", "type": "const LPMSGBOXPARAMS", "description": "A pointer to a MSGBOXPARAMS structure that contains information used to display the message box.", "possible_constants": []}]}, {"name": "MessageBoxW", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-messageboxw", "description": "Displays a modal dialog box that contains a system icon, a set of buttons, and a brief application-specific message, such as status or error information. The message box returns an integer value that indicates which button the user clicked.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the owner window of the message box to be created. If this parameter is NULL, the message box has no owner window.", "possible_constants": []}, {"name": "lpText", "type": "LPCTSTR", "description": "The message to be displayed. If the string consists of more than one line, you can separate the lines using a carriage return and/or linefeed character between each line.", "possible_constants": []}, {"name": "lpCaption", "type": "LPCTSTR", "description": "The dialog box title. If this parameter is NULL, the default title is Error.", "possible_constants": []}, {"name": "uType", "type": "UINT", "description": "The contents and behavior of the dialog box. This parameter can be a combination of flags from the following groups of flags.\nTo indicate the buttons displayed in the message box, specify one of the following values.\nTo display an icon in the message box, specify one of the following values.\nTo indicate the default button, specify one of the following values.\nTo indicate the modality of the dialog box, specify one of the following values.\nTo specify other options, use one or more of the following values.", "possible_constants": [["MB_ABORTRETRYIGNORE", 2], ["MB_CANCELTRYCONTINUE", 6], ["MB_HELP", 16384], ["MB_OK", 0], ["MB_OKCANCEL", 1], ["MB_RETRYCANCEL", 5], ["MB_YESNO", 4], ["MB_YESNOCANCEL", 3], ["MB_ICONEXCLAMATION", 48], ["MB_ICONWARNING", 48], ["MB_ICONINFORMATION", 64], ["MB_ICONASTERISK", 64], ["MB_ICONQUESTION", 32], ["MB_ICONSTOP", 16], ["MB_ICONERROR", 16], ["MB_ICONHAND", 16], ["MB_DEFBUTTON1", 0], ["MB_DEFBUTTON2", 256], ["MB_DEFBUTTON3", 512], ["MB_DEFBUTTON4", 768], ["MB_APPLMODAL", 0], ["MB_SYSTEMMODAL", 4096], ["MB_TASKMODAL", 8192], ["MB_DEFAULT_DESKTOP_ONLY", 131072], ["MB_RIGHT", 524288], ["MB_RTLREADING", 1048576], ["MB_SETFOREGROUND", 65536], ["MB_TOPMOST", 262144], ["MB_SERVICE_NOTIFICATION", 2097152]]}]}, {"name": "ModifyMenuA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-modifymenua", "description": "Changes an existing menu item. This function is used to specify the content, appearance, and behavior of the menu item.", "parameters": [{"name": "hMnu", "type": "HMENU", "description": "A handle to the menu to be changed.", "possible_constants": []}, {"name": "uPosition", "type": "UINT", "description": "The menu item to be changed, as determined by the uFlags parameter.", "possible_constants": []}, {"name": "uFlags", "type": "UINT", "description": "Controls the interpretation of the uPosition parameter and the content, appearance, and behavior of the menu item. This parameter must include one of the following required values.\nThe parameter must also include at least one of the following values.", "possible_constants": [["MF_BYCOMMAND", 0], ["MF_BYPOSITION", 1024], ["MF_BITMAP", 4], ["MF_CHECKED", 8], ["MF_DISABLED", 2], ["MF_ENABLED", 0], ["MF_GRAYED", 1], ["MF_MENUBARBREAK", 32], ["MF_MENUBREAK", 64], ["MF_OWNERDRAW", 256], ["MF_POPUP", 16], ["MF_SEPARATOR", 2048], ["MF_STRING", 0], ["MF_UNCHECKED", 0]]}, {"name": "uIDNewItem", "type": "UINT_PTR", "description": "The identifier of the modified menu item or, if the uFlags parameter has the MF_POPUP flag set, a handle to the drop-down menu or submenu.", "possible_constants": []}, {"name": "lpNewItem", "type": "LPCTSTR", "description": "The contents of the changed menu item. The interpretation of this parameter depends on whether the uFlags parameter includes the MF_BITMAP, MF_OWNERDRAW, or MF_STRING flag.", "possible_constants": [["MF_BITMAP", 4], ["MF_OWNERDRAW", 256], ["MF_STRING", 0]]}]}, {"name": "ModifyMenuW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-modifymenuw", "description": "Changes an existing menu item. This function is used to specify the content, appearance, and behavior of the menu item.", "parameters": [{"name": "hMnu", "type": "HMENU", "description": "A handle to the menu to be changed.", "possible_constants": []}, {"name": "uPosition", "type": "UINT", "description": "The menu item to be changed, as determined by the uFlags parameter.", "possible_constants": []}, {"name": "uFlags", "type": "UINT", "description": "Controls the interpretation of the uPosition parameter and the content, appearance, and behavior of the menu item. This parameter must include one of the following required values.\nThe parameter must also include at least one of the following values.", "possible_constants": [["MF_BYCOMMAND", 0], ["MF_BYPOSITION", 1024], ["MF_BITMAP", 4], ["MF_CHECKED", 8], ["MF_DISABLED", 2], ["MF_ENABLED", 0], ["MF_GRAYED", 1], ["MF_MENUBARBREAK", 32], ["MF_MENUBREAK", 64], ["MF_OWNERDRAW", 256], ["MF_POPUP", 16], ["MF_SEPARATOR", 2048], ["MF_STRING", 0], ["MF_UNCHECKED", 0]]}, {"name": "uIDNewItem", "type": "UINT_PTR", "description": "The identifier of the modified menu item or, if the uFlags parameter has the MF_POPUP flag set, a handle to the drop-down menu or submenu.", "possible_constants": []}, {"name": "lpNewItem", "type": "LPCTSTR", "description": "The contents of the changed menu item. The interpretation of this parameter depends on whether the uFlags parameter includes the MF_BITMAP, MF_OWNERDRAW, or MF_STRING flag.", "possible_constants": [["MF_BITMAP", 4], ["MF_OWNERDRAW", 256], ["MF_STRING", 0]]}]}, {"name": "MonitorFromPoint", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-monitorfrompoint", "description": "The MonitorFromPoint function retrieves a handle to the display monitor that contains a specified point.", "parameters": [{"name": "pt", "type": "", "description": "A POINT structure that specifies the point of interest in virtual-screen coordinates.", "possible_constants": []}, {"name": "dwFlags", "type": "", "description": "Determines the function's return value if the point is not contained within any display monitor.\nThis parameter can be one of the following values.", "possible_constants": [["MONITOR_DEFAULTTONEAREST", -1], ["MONITOR_DEFAULTTONULL", -1], ["MONITOR_DEFAULTTOPRIMARY", -1]]}]}, {"name": "MonitorFromRect", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-monitorfromrect", "description": "The MonitorFromRect function retrieves a handle to the display monitor that has the largest area of intersection with a specified rectangle.", "parameters": [{"name": "lprc", "type": "", "description": "A pointer to a RECT structure that specifies the rectangle of interest in virtual-screen coordinates.", "possible_constants": []}, {"name": "dwFlags", "type": "", "description": "Determines the function's return value if the rectangle does not intersect any display monitor.\nThis parameter can be one of the following values.", "possible_constants": [["MONITOR_DEFAULTTONEAREST", -1], ["MONITOR_DEFAULTTONULL", -1], ["MONITOR_DEFAULTTOPRIMARY", -1]]}]}, {"name": "MonitorFromWindow", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-monitorfromwindow", "description": "The MonitorFromWindow function retrieves a handle to the display monitor that has the largest area of intersection with the bounding rectangle of a specified window.", "parameters": [{"name": "hwnd", "type": "", "description": "A handle to the window of interest.", "possible_constants": []}, {"name": "dwFlags", "type": "", "description": "Determines the function's return value if the window does not intersect any display monitor.\nThis parameter can be one of the following values.", "possible_constants": [["MONITOR_DEFAULTTONEAREST", -1], ["MONITOR_DEFAULTTONULL", -1], ["MONITOR_DEFAULTTOPRIMARY", -1]]}]}, {"name": "mouse_event", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-mouse_event", "description": "The mouse_event function synthesizes mouse motion and button clicks.", "parameters": [{"name": "dwFlags", "type": "DWORD", "description": "Controls various aspects of mouse motion and button clicking. This parameter can be certain combinations of the following values.\nThe values that specify mouse button status are set to indicate changes in status, not ongoing conditions. For example, if the left mouse button is pressed and held down, MOUSEEVENTF_LEFTDOWN is set when the left button is first pressed, but not for subsequent motions. Similarly, MOUSEEVENTF_LEFTUP is set only when the button is first released.\nYou cannot specify both MOUSEEVENTF_WHEEL and either MOUSEEVENTF_XDOWN or MOUSEEVENTF_XUP simultaneously in the\ndwFlags parameter, because they both require use of the\ndwData field.", "possible_constants": [["MOUSEEVENTF_ABSOLUTE", 32768], ["MOUSEEVENTF_LEFTDOWN", 2], ["MOUSEEVENTF_LEFTUP", 4], ["MOUSEEVENTF_MIDDLEDOWN", 32], ["MOUSEEVENTF_MIDDLEUP", 64], ["MOUSEEVENTF_MOVE", 1], ["MOUSEEVENTF_RIGHTDOWN", 8], ["MOUSEEVENTF_RIGHTUP", 16], ["MOUSEEVENTF_WHEEL", 2048], ["MOUSEEVENTF_XDOWN", 128], ["MOUSEEVENTF_XUP", 256], ["MOUSEEVENTF_WHEEL", 2048], ["MOUSEEVENTF_HWHEEL", 4096]]}, {"name": "dx", "type": "DWORD", "description": "The mouse's absolute position along the x-axis or its amount of motion since the last mouse event was generated, depending on the setting of MOUSEEVENTF_ABSOLUTE. Absolute data is specified as the mouse's actual x-coordinate; relative data is specified as the number of mickeys moved. A\nmickey is the amount that a mouse has to move for it to report that it has moved.", "possible_constants": []}, {"name": "dy", "type": "DWORD", "description": "The mouse's absolute position along the y-axis or its amount of motion since the last mouse event was generated, depending on the setting of MOUSEEVENTF_ABSOLUTE. Absolute data is specified as the mouse's actual y-coordinate; relative data is specified as the number of mickeys moved.", "possible_constants": []}, {"name": "dwData", "type": "DWORD", "description": "If\ndwFlags contains MOUSEEVENTF_WHEEL, then\ndwData specifies the amount of wheel movement. A positive value indicates that the wheel was rotated forward, away from the user; a negative value indicates that the wheel was rotated backward, toward the user. One wheel click is defined as WHEEL_DELTA, which is 120.\nIf dwFlags contains MOUSEEVENTF_HWHEEL, then\ndwData specifies the amount of wheel movement. A positive value indicates that the wheel was tilted to the right; a negative value indicates that the wheel was tilted to the left.\nIf\ndwFlags contains MOUSEEVENTF_XDOWN or MOUSEEVENTF_XUP, then\ndwData specifies which X buttons were pressed or released. This value may be any combination of the following flags.\nIf\ndwFlags is not MOUSEEVENTF_WHEEL, MOUSEEVENTF_XDOWN, or MOUSEEVENTF_XUP, then\ndwData should be zero.", "possible_constants": [["XBUTTON1", 1], ["XBUTTON2", 2]]}, {"name": "dwExtraInfo", "type": "ULONG_PTR", "description": "An additional value associated with the mouse event. An application calls GetMessageExtraInfo to obtain this extra information.", "possible_constants": []}]}, {"name": "MoveWindow", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-movewindow", "description": "Changes the position and dimensions of the specified window. For a top-level window, the position and dimensions are relative to the upper-left corner of the screen. For a child window, they are relative to the upper-left corner of the parent window's client area.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window.", "possible_constants": []}, {"name": "X", "type": "int", "description": "The new position of the left side of the window.", "possible_constants": []}, {"name": "Y", "type": "int", "description": "The new position of the top of the window.", "possible_constants": []}, {"name": "nWidth", "type": "int", "description": "The new width of the window.", "possible_constants": []}, {"name": "nHeight", "type": "int", "description": "The new height of the window.", "possible_constants": []}, {"name": "bRepaint", "type": "BOOL", "description": "Indicates whether the window is to be repainted. If this parameter is TRUE, the window receives a  message. If the parameter is FALSE, no repainting of any kind occurs. This applies to the client area, the nonclient area (including the title bar and scroll bars), and any part of the parent window uncovered as a result of moving a child window.", "possible_constants": []}]}, {"name": "MsgWaitForMultipleObjects", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-msgwaitformultipleobjects", "description": "Waits until one or all of the specified objects are in the signaled state or the time-out interval elapses. The objects can include input event objects, which you specify using the dwWakeMask parameter.", "parameters": [{"name": "nCount", "type": "", "description": "The number of object handles in the array pointed to by pHandles. The maximum number of object handles is MAXIMUM_WAIT_OBJECTS minus one. If this parameter has the value zero, then the function waits only for an input event.", "possible_constants": []}, {"name": "pHandles", "type": "", "description": "An array of object handles. For a list of the object types whose handles can be specified, see the following Remarks section. The array can contain handles of objects of different types. It may not contain multiple copies of the same handle.\nIf one of these handles is closed while the wait is still pending, the function's behavior is undefined.\nThe handles must have the SYNCHRONIZE access right. For more information, see\nStandard Access Rights.", "possible_constants": []}, {"name": "fWaitAll", "type": "", "description": "If this parameter is TRUE, the function returns when the states of all objects in the pHandles array have been set to signaled and an input event has been received. If this parameter is FALSE, the function returns when the state of any one of the objects is set to signaled or an input event has been received. In this case, the return value indicates the object whose state caused the function to return.", "possible_constants": []}, {"name": "dwMilliseconds", "type": "", "description": "The time-out interval, in milliseconds. If a nonzero value is specified, the function waits until the specified objects are signaled or the interval elapses. If dwMilliseconds is zero, the function does not enter a wait state if the specified objects are not signaled; it always returns immediately. If dwMilliseconds is INFINITE, the function will return only when the specified objects are signaled.\nWindows\u00c2\u00a0XP, Windows Server\u00c2\u00a02003, Windows\u00c2\u00a0Vista, Windows\u00c2\u00a07, Windows Server\u00c2\u00a02008 and Windows Server\u00c2\u00a02008\u00c2\u00a0R2:\u00c2\u00a0\u00c2\u00a0The dwMilliseconds value does include time spent in low-power states. For example, the timeout does keep counting down while the computer is asleep.\nWindows\u00c2\u00a08, Windows Server\u00c2\u00a02012, Windows\u00c2\u00a08.1, Windows Server\u00c2\u00a02012\u00c2\u00a0R2, Windows\u00c2\u00a010 and Windows Server\u00c2\u00a02016:\u00c2\u00a0\u00c2\u00a0The dwMilliseconds value does not include time spent in low-power states. For example, the timeout does not keep counting down while the computer is asleep.", "possible_constants": []}, {"name": "dwWakeMask", "type": "", "description": "The input types for which an input event object handle will be added to the array of object handles. This parameter can be any combination of the following values.", "possible_constants": [["QS_ALLEVENTS", 1215], ["QS_ALLINPUT", 1279], ["QS_ALLPOSTMESSAGE", 256], ["QS_HOTKEY", 128], ["QS_INPUT", 1031], ["QS_KEY", 1], ["QS_MOUSE", 6], ["QS_MOUSEBUTTON", 4], ["QS_MOUSEMOVE", 2], ["QS_PAINT", 32], ["QS_POSTMESSAGE", 8], ["QS_RAWINPUT", 1024], ["QS_SENDMESSAGE", 64], ["QS_TIMER", 16]]}]}, {"name": "MsgWaitForMultipleObjectsEx", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-msgwaitformultipleobjectsex", "description": "Waits until one or all of the specified objects are in the signaled state, an I/O completion routine or asynchronous procedure call (APC) is queued to the thread, or the time-out interval elapses. The array of objects can include input event objects, which you specify using the dwWakeMask parameter.", "parameters": [{"name": "nCount", "type": "", "description": "The number of object handles in the array pointed to by pHandles. The maximum number of object handles is MAXIMUM_WAIT_OBJECTS minus one. If this parameter has the value zero, then the function waits only for an input event.", "possible_constants": []}, {"name": "pHandles", "type": "", "description": "An array of object handles. For a list of the object types whose handles you can specify, see the Remarks section later in this topic. The array can contain handles to multiple types of objects. It may not contain multiple copies of the same handle.\nIf one of these handles is closed while the wait is still pending, the function's behavior is undefined.\nThe handles must have the SYNCHRONIZE access right. For more information, see\nStandard Access Rights.", "possible_constants": []}, {"name": "dwMilliseconds", "type": "", "description": "The time-out interval, in milliseconds. If a nonzero value is specified, the function waits until the specified objects are signaled, an I/O completion routine or APC is queued, or the interval elapses. If dwMilliseconds is zero, the function does not enter a wait state if the criteria is not met; it always returns immediately. If dwMilliseconds is INFINITE, the function will return only when the specified objects are signaled or an I/O completion routine or APC is queued.\nWindows\u00c2\u00a0XP, Windows Server\u00c2\u00a02003, Windows\u00c2\u00a0Vista, Windows\u00c2\u00a07, Windows Server\u00c2\u00a02008 and Windows Server\u00c2\u00a02008\u00c2\u00a0R2:\u00c2\u00a0\u00c2\u00a0The dwMilliseconds value does include time spent in low-power states. For example, the timeout does keep counting down while the computer is asleep.\nWindows\u00c2\u00a08, Windows Server\u00c2\u00a02012, Windows\u00c2\u00a08.1, Windows Server\u00c2\u00a02012\u00c2\u00a0R2, Windows\u00c2\u00a010 and Windows Server\u00c2\u00a02016:\u00c2\u00a0\u00c2\u00a0The dwMilliseconds value does not include time spent in low-power states. For example, the timeout does not keep counting down while the computer is asleep.", "possible_constants": []}, {"name": "dwWakeMask", "type": "", "description": "The input types for which an input event object handle will be added to the array of object handles. This parameter can be one or more of the following values.", "possible_constants": [["QS_ALLEVENTS", 1215], ["QS_ALLINPUT", 1279], ["QS_ALLPOSTMESSAGE", 256], ["QS_HOTKEY", 128], ["QS_INPUT", 1031], ["QS_KEY", 1], ["QS_MOUSE", 6], ["QS_MOUSEBUTTON", 4], ["QS_MOUSEMOVE", 2], ["QS_PAINT", 32], ["QS_POSTMESSAGE", 8], ["QS_RAWINPUT", 1024], ["QS_SENDMESSAGE", 64], ["QS_TIMER", 16]]}, {"name": "dwFlags", "type": "", "description": "The wait type. This parameter can be one or more of the following values.", "possible_constants": [["0", -1], ["MWMO_ALERTABLE", 2], ["MWMO_INPUTAVAILABLE", 4], ["MWMO_WAITALL", 1]]}]}, {"name": "NEXTRAWINPUTBLOCK", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-nextrawinputblock", "description": "Retrieves the location of the next structure in an array of RAWINPUT structures.", "parameters": [{"name": "ptr", "type": "", "description": "A pointer to a structure in an array of RAWINPUT structures.", "possible_constants": []}]}, {"name": "NotifyWinEvent", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-notifywinevent", "description": "Signals the system that a predefined event occurred. If any client applications have registered a hook function for the event, the system calls the client's hook function.", "parameters": [{"name": "event", "type": "DWORD", "description": "Specifies the event that occurred. This value must be one of the event constants.", "possible_constants": []}, {"name": "hwnd", "type": "HWND", "description": "Handle to the window that contains the object that generated the event.", "possible_constants": []}, {"name": "idObject", "type": "LONG", "description": "Identifies the object that generated the event. This value is either one of the predefined object identifiers or a custom object ID value.", "possible_constants": []}, {"name": "idChild", "type": "LONG", "description": "Identifies whether the event was generated by an object or by a child element of the object. If this value is CHILDID_SELF, the event was generated by the object itself. If not CHILDID_SELF, this value is the child ID of the element that generated the event.", "possible_constants": []}]}, {"name": "OemKeyScan", "return_type": "DWORD", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-oemkeyscan", "description": "Maps OEMASCII codes 0 through 0x0FF into the OEM scan codes and shift states. The function provides information that allows a program to send OEM text to another program by simulating keyboard input.", "parameters": [{"name": "wOemChar", "type": "WORD", "description": "The ASCII value of the OEM character.", "possible_constants": []}]}, {"name": "OemToCharA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-oemtochara", "description": "Translates a string from the OEM-defined character set into either an ANSI or a wide-character string.", "parameters": [{"name": "pSrc", "type": "LPCSTR", "description": "A null-terminated string of characters from the OEM-defined character set.", "possible_constants": []}, {"name": "pDst", "type": "LPTSTR", "description": "The destination buffer, which receives the translated string. If the OemToChar function is being used as an ANSI function, the string can be translated in place by setting the\nlpszDst parameter to the same address as the\nlpszSrc parameter. This cannot be done if OemToChar is being used as a wide-character function.", "possible_constants": []}]}, {"name": "OemToCharBuffA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-oemtocharbuffa", "description": "Translates a specified number of characters in a string from the OEM-defined character set into either an ANSI or a wide-character string.", "parameters": [{"name": "lpszSrc", "type": "LPCSTR", "description": "One or more characters from the OEM-defined character set.", "possible_constants": []}, {"name": "lpszDst", "type": "LPTSTR", "description": "The destination buffer, which receives the translated string. If the OemToCharBuff function is being used as an ANSI function, the string can be translated in place by setting the\nlpszDst parameter to the same address as the\nlpszSrc parameter. This cannot be done if the OemToCharBuff function is being used as a wide-character function.", "possible_constants": []}, {"name": "cchDstLength", "type": "DWORD", "description": "The number of\ncharacters to be translated in the buffer identified by the\nlpszSrc parameter.", "possible_constants": []}]}, {"name": "OemToCharBuffW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-oemtocharbuffw", "description": "Translates a specified number of characters in a string from the OEM-defined character set into either an ANSI or a wide-character string.", "parameters": [{"name": "lpszSrc", "type": "LPCSTR", "description": "One or more characters from the OEM-defined character set.", "possible_constants": []}, {"name": "lpszDst", "type": "LPTSTR", "description": "The destination buffer, which receives the translated string. If the OemToCharBuff function is being used as an ANSI function, the string can be translated in place by setting the\nlpszDst parameter to the same address as the\nlpszSrc parameter. This cannot be done if the OemToCharBuff function is being used as a wide-character function.", "possible_constants": []}, {"name": "cchDstLength", "type": "DWORD", "description": "The number of\ncharacters to be translated in the buffer identified by the\nlpszSrc parameter.", "possible_constants": []}]}, {"name": "OemToCharW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-oemtocharw", "description": "Translates a string from the OEM-defined character set into either an ANSI or a wide-character string.", "parameters": [{"name": "pSrc", "type": "LPCSTR", "description": "A null-terminated string of characters from the OEM-defined character set.", "possible_constants": []}, {"name": "pDst", "type": "LPTSTR", "description": "The destination buffer, which receives the translated string. If the OemToChar function is being used as an ANSI function, the string can be translated in place by setting the\nlpszDst parameter to the same address as the\nlpszSrc parameter. This cannot be done if OemToChar is being used as a wide-character function.", "possible_constants": []}]}, {"name": "OffsetRect", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-offsetrect", "description": "The OffsetRect function moves the specified rectangle by the specified offsets.", "parameters": [{"name": "lprc", "type": "", "description": "Pointer to a RECT structure that contains the logical coordinates of the rectangle to be moved.", "possible_constants": []}, {"name": "dx", "type": "", "description": "Specifies the amount to move the rectangle left or right. This parameter must be a negative value to move the rectangle to the left.", "possible_constants": []}, {"name": "dy", "type": "", "description": "Specifies the amount to move the rectangle up or down. This parameter must be a negative value to move the rectangle up.", "possible_constants": []}]}, {"name": "OpenClipboard", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-openclipboard", "description": "Opens the clipboard for examination and prevents other applications from modifying the clipboard content.", "parameters": [{"name": "hWndNewOwner", "type": "HWND", "description": "A handle to the window to be associated with the open clipboard. If this parameter is NULL, the open clipboard is associated with the current task.", "possible_constants": []}]}, {"name": "OpenDesktopA", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-opendesktopa", "description": "Opens the specified desktop object.", "parameters": [{"name": "lpszDesktop", "type": "", "description": "The name of the desktop to be opened. Desktop names are case-insensitive.\nThis desktop must belong to the current window station.", "possible_constants": []}, {"name": "dwFlags", "type": "", "description": "This parameter can be zero or the following value.", "possible_constants": [["DF_ALLOWOTHERACCOUNTHOOK", 1]]}, {"name": "fInherit", "type": "", "description": "If this value is TRUE, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.", "possible_constants": []}, {"name": "dwDesiredAccess", "type": "", "description": "The access to the desktop. For a list of access rights, see\nDesktop Security and Access Rights.", "possible_constants": []}]}, {"name": "OpenDesktopW", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-opendesktopw", "description": "Opens the specified desktop object.", "parameters": [{"name": "lpszDesktop", "type": "", "description": "The name of the desktop to be opened. Desktop names are case-insensitive.\nThis desktop must belong to the current window station.", "possible_constants": []}, {"name": "dwFlags", "type": "", "description": "This parameter can be zero or the following value.", "possible_constants": [["DF_ALLOWOTHERACCOUNTHOOK", 1]]}, {"name": "fInherit", "type": "", "description": "If this value is TRUE, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.", "possible_constants": []}, {"name": "dwDesiredAccess", "type": "", "description": "The access to the desktop. For a list of access rights, see\nDesktop Security and Access Rights.", "possible_constants": []}]}, {"name": "OpenIcon", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-openicon", "description": "Restores a minimized (iconic) window to its previous size and position; it then activates the window.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window to be restored and activated.", "possible_constants": []}]}, {"name": "OpenInputDesktop", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-openinputdesktop", "description": "Opens the desktop that receives user input.", "parameters": [{"name": "dwFlags", "type": "", "description": "This parameter can be zero or the following value.", "possible_constants": [["DF_ALLOWOTHERACCOUNTHOOK", 1]]}, {"name": "fInherit", "type": "", "description": "If this value is TRUE, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.", "possible_constants": []}, {"name": "dwDesiredAccess", "type": "", "description": "The access to the desktop. For a list of access rights, see\nDesktop Security and Access Rights.", "possible_constants": []}]}, {"name": "OpenWindowStationA", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-openwindowstationa", "description": "Opens the specified window station.", "parameters": [{"name": "lpszWinSta", "type": "", "description": "The name of the window station to be opened. Window station names are case-insensitive.\nThis window station must belong to the current session.", "possible_constants": []}, {"name": "fInherit", "type": "", "description": "If this value is TRUE, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.", "possible_constants": []}, {"name": "dwDesiredAccess", "type": "", "description": "The access to the window station. For a list of access rights, see\nWindow Station Security and Access Rights.", "possible_constants": []}]}, {"name": "OpenWindowStationW", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-openwindowstationw", "description": "Opens the specified window station.", "parameters": [{"name": "lpszWinSta", "type": "", "description": "The name of the window station to be opened. Window station names are case-insensitive.\nThis window station must belong to the current session.", "possible_constants": []}, {"name": "fInherit", "type": "", "description": "If this value is TRUE, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.", "possible_constants": []}, {"name": "dwDesiredAccess", "type": "", "description": "The access to the window station. For a list of access rights, see\nWindow Station Security and Access Rights.", "possible_constants": []}]}, {"name": "PackTouchHitTestingProximityEvaluation", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-packtouchhittestingproximityevaluation", "description": "Returns the proximity evaluation score and the adjusted touch-point coordinates as a packed value for the WM_TOUCHHITTESTING callback.", "parameters": [{"name": "pHitTestingInput", "type": "", "description": "The TOUCH_HIT_TESTING_INPUT structure that holds the data for the touch contact area.", "possible_constants": []}, {"name": "pProximityEval", "type": "", "description": "The TOUCH_HIT_TESTING_PROXIMITY_EVALUATION structure that holds the score and adjusted touch-point data that the EvaluateProximityToPolygon or EvaluateProximityToRect function returns.", "possible_constants": []}]}, {"name": "PaintDesktop", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-paintdesktop", "description": "The PaintDesktop function fills the clipping region in the specified device context with the desktop pattern or wallpaper. The function is provided primarily for shell desktops.", "parameters": [{"name": "hdc", "type": "", "description": "Handle to the device context.", "possible_constants": []}]}, {"name": "PeekMessageA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-peekmessagea", "description": "Dispatches incoming sent messages, checks the thread message queue for a posted message, and retrieves the message (if any exist).", "parameters": [{"name": "lpMsg", "type": "LPMSG", "description": "A pointer to an MSG structure that receives message information.", "possible_constants": []}, {"name": "hWnd", "type": "HWND", "description": "A handle to the window whose messages are to be retrieved. The window must belong to the current thread.\nIf hWnd is NULL, PeekMessage retrieves messages for any window that belongs to the current thread, and any messages on the current thread's message queue whose hwnd value is NULL (see the MSG structure). Therefore if hWnd is NULL, both window messages and thread messages are processed.\nIf hWnd is -1, PeekMessage retrieves only messages on the current thread's message queue whose hwnd value is NULL, that is, thread messages as posted by  PostMessage (when the hWnd parameter is NULL) or PostThreadMessage.", "possible_constants": []}, {"name": "wMsgFilterMin", "type": "UINT", "description": "The value of the first message in the range of messages to be examined. Use WM_KEYFIRST (0x0100) to specify the first keyboard message or WM_MOUSEFIRST (0x0200) to specify the first mouse message.\nIf wMsgFilterMin and wMsgFilterMax are both zero, PeekMessage returns all available messages (that is, no range filtering is performed).", "possible_constants": []}, {"name": "wMsgFilterMax", "type": "UINT", "description": "The value of the last message in the range of messages to be examined. Use WM_KEYLAST to specify the last keyboard message or WM_MOUSELAST to specify the last mouse message.\nIf wMsgFilterMin and wMsgFilterMax are both zero, PeekMessage returns all available messages (that is, no range filtering is performed).", "possible_constants": []}, {"name": "wRemoveMsg", "type": "UINT", "description": "Specifies how messages are to be handled. This parameter can be one or more of the following values.\nBy default, all message types are processed. To specify that only certain message should be processed, specify one or more of the following values.", "possible_constants": [["PM_NOREMOVE", 0], ["PM_REMOVE", 1], ["PM_NOYIELD", 2], ["PM_QS_INPUT", -1], ["PM_QS_PAINT", -1], ["PM_QS_POSTMESSAGE", -1], ["PM_QS_SENDMESSAGE", -1]]}]}, {"name": "PeekMessageW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-peekmessagew", "description": "Dispatches incoming sent messages, checks the thread message queue for a posted message, and retrieves the message (if any exist).", "parameters": [{"name": "lpMsg", "type": "LPMSG", "description": "A pointer to an MSG structure that receives message information.", "possible_constants": []}, {"name": "hWnd", "type": "HWND", "description": "A handle to the window whose messages are to be retrieved. The window must belong to the current thread.\nIf hWnd is NULL, PeekMessage retrieves messages for any window that belongs to the current thread, and any messages on the current thread's message queue whose hwnd value is NULL (see the MSG structure). Therefore if hWnd is NULL, both window messages and thread messages are processed.\nIf hWnd is -1, PeekMessage retrieves only messages on the current thread's message queue whose hwnd value is NULL, that is, thread messages as posted by  PostMessage (when the hWnd parameter is NULL) or PostThreadMessage.", "possible_constants": []}, {"name": "wMsgFilterMin", "type": "UINT", "description": "The value of the first message in the range of messages to be examined. Use WM_KEYFIRST (0x0100) to specify the first keyboard message or WM_MOUSEFIRST (0x0200) to specify the first mouse message.\nIf wMsgFilterMin and wMsgFilterMax are both zero, PeekMessage returns all available messages (that is, no range filtering is performed).", "possible_constants": []}, {"name": "wMsgFilterMax", "type": "UINT", "description": "The value of the last message in the range of messages to be examined. Use WM_KEYLAST to specify the last keyboard message or WM_MOUSELAST to specify the last mouse message.\nIf wMsgFilterMin and wMsgFilterMax are both zero, PeekMessage returns all available messages (that is, no range filtering is performed).", "possible_constants": []}, {"name": "wRemoveMsg", "type": "UINT", "description": "Specifies how messages are to be handled. This parameter can be one or more of the following values.\nBy default, all message types are processed. To specify that only certain message should be processed, specify one or more of the following values.", "possible_constants": [["PM_NOREMOVE", 0], ["PM_REMOVE", 1], ["PM_NOYIELD", 2], ["PM_QS_INPUT", -1], ["PM_QS_PAINT", -1], ["PM_QS_POSTMESSAGE", -1], ["PM_QS_SENDMESSAGE", -1]]}]}, {"name": "PhysicalToLogicalPoint", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-physicaltologicalpoint", "description": "Converts the physical coordinates of a point in a window to logical coordinates.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window whose transform is used for the conversion. Top level windows are fully supported. In the case of child windows, only the area of overlap between the parent and the child window is converted.", "possible_constants": []}, {"name": "lpPoint", "type": "LPPOINT", "description": "A pointer to a POINT structure that specifies the physical/screen coordinates to be converted. The new logical coordinates are copied into this structure if the function succeeds.", "possible_constants": []}]}, {"name": "PhysicalToLogicalPointForPerMonitorDPI", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-physicaltologicalpointforpermonitordpi", "description": "Converts a point in a window from physical coordinates into logical coordinates, regardless of the dots per inch (dpi) awareness of the caller. For more information about DPI awareness levels, see PROCESS_DPI_AWARENESS.", "parameters": [{"name": "hWnd", "type": "", "description": "A handle to the window whose transform is used for the conversion.", "possible_constants": []}, {"name": "lpPoint", "type": "", "description": "A pointer to a POINT structure that specifies the physical/screen coordinates to be converted. The new logical coordinates are copied into this structure if the function succeeds.", "possible_constants": []}]}, {"name": "POINTSTOPOINT", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-pointstopoint", "description": "The POINTSTOPOINT macro copies the contents of a POINTS structure into a POINT structure.", "parameters": [{"name": "pt", "type": "", "description": "The POINT structure to receive the contents of the POINTS structure.", "possible_constants": []}, {"name": "pts", "type": "", "description": "The POINTS structure to copy.", "possible_constants": []}]}, {"name": "POINTTOPOINTS", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-pointtopoints", "description": "The POINTTOPOINTS macro converts a POINT structure to a POINTS structure.", "parameters": [{"name": "pt", "type": "", "description": "The POINT structure to convert.", "possible_constants": []}]}, {"name": "PostMessageA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-postmessagea", "description": "Places (posts) a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window whose window procedure is to receive the message. The following values have special meanings.\nStarting with Windows Vista, message posting is subject to UIPI. The thread of a process can post messages only to message queues of threads in processes of lesser or equal integrity level.", "possible_constants": [["HWND_BROADCAST", -1], ["NULL", -1]]}, {"name": "Msg", "type": "UINT", "description": "The message to be posted.\nFor lists of the system-provided messages, see System-Defined Messages.", "possible_constants": []}, {"name": "wParam", "type": "WPARAM", "description": "Additional message-specific information.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "Additional message-specific information.", "possible_constants": []}]}, {"name": "PostMessageW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-postmessagew", "description": "Places (posts) a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window whose window procedure is to receive the message. The following values have special meanings.\nStarting with Windows Vista, message posting is subject to UIPI. The thread of a process can post messages only to message queues of threads in processes of lesser or equal integrity level.", "possible_constants": [["HWND_BROADCAST", -1], ["NULL", -1]]}, {"name": "Msg", "type": "UINT", "description": "The message to be posted.\nFor lists of the system-provided messages, see System-Defined Messages.", "possible_constants": []}, {"name": "wParam", "type": "WPARAM", "description": "Additional message-specific information.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "Additional message-specific information.", "possible_constants": []}]}, {"name": "PostQuitMessage", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-postquitmessage", "description": "Indicates to the system that a thread has made a request to terminate (quit). It is typically used in response to a WM_DESTROY message.", "parameters": [{"name": "nExitCode", "type": "int", "description": "The application exit code. This value is used as the wParam parameter of the WM_QUIT message.", "possible_constants": []}]}, {"name": "PostThreadMessageA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-postthreadmessagea", "description": "Posts a message to the message queue of the specified thread. It returns without waiting for the thread to process the message.", "parameters": [{"name": "idThread", "type": "DWORD", "description": "The identifier of the thread to which the message is to be posted.\nThe function fails if the specified thread does not have a message queue. The system creates a thread's message queue when the thread makes its first call to one of the User or GDI functions. For more information, see the Remarks section.\nMessage posting is subject to UIPI. The thread of a process can post messages only to posted-message queues of threads in processes of lesser or equal integrity level.\nThis thread must have the SE_TCB_NAME privilege to post a message to a thread that belongs to a process with the same locally unique identifier (LUID) but is in a different desktop. Otherwise, the function fails and returns ERROR_INVALID_THREAD_ID.\nThis thread must either belong to the same desktop as the calling thread or to a process with the same LUID. Otherwise, the function fails and returns ERROR_INVALID_THREAD_ID.", "possible_constants": []}, {"name": "Msg", "type": "UINT", "description": "The type of message to be posted.", "possible_constants": []}, {"name": "wParam", "type": "WPARAM", "description": "Additional message-specific information.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "Additional message-specific information.", "possible_constants": []}]}, {"name": "PostThreadMessageW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-postthreadmessagew", "description": "Posts a message to the message queue of the specified thread. It returns without waiting for the thread to process the message.", "parameters": [{"name": "idThread", "type": "DWORD", "description": "The identifier of the thread to which the message is to be posted.\nThe function fails if the specified thread does not have a message queue. The system creates a thread's message queue when the thread makes its first call to one of the User or GDI functions. For more information, see the Remarks section.\nMessage posting is subject to UIPI. The thread of a process can post messages only to posted-message queues of threads in processes of lesser or equal integrity level.\nThis thread must have the SE_TCB_NAME privilege to post a message to a thread that belongs to a process with the same locally unique identifier (LUID) but is in a different desktop. Otherwise, the function fails and returns ERROR_INVALID_THREAD_ID.\nThis thread must either belong to the same desktop as the calling thread or to a process with the same LUID. Otherwise, the function fails and returns ERROR_INVALID_THREAD_ID.", "possible_constants": []}, {"name": "Msg", "type": "UINT", "description": "The type of message to be posted.", "possible_constants": []}, {"name": "wParam", "type": "WPARAM", "description": "Additional message-specific information.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "Additional message-specific information.", "possible_constants": []}]}, {"name": "PrintWindow", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-printwindow", "description": "The PrintWindow function copies a visual window into the specified device context (DC), typically a printer DC.", "parameters": [{"name": "hwnd", "type": "", "description": "A handle to the window that will be copied.", "possible_constants": []}, {"name": "hdcBlt", "type": "", "description": "A handle to the device context.", "possible_constants": []}, {"name": "nFlags", "type": "", "description": "The drawing options. It can be one of the following values.", "possible_constants": [["PW_CLIENTONLY", -1]]}]}, {"name": "PrivateExtractIconsA", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-privateextracticonsa", "description": "[This function is not intended for general\n      use. It may\n      be altered or unavailable in subsequent versions of Windows.]\nCreates an array of handles to icons that are extracted from a specified file.\nSyntax\nUINT PrivateExtractIconsA(\n  LPCSTR szFileName,\n  int    nIconIndex,\n  int    cxIcon,\n  int    cyIcon,\n  HICON  *phicon,\n  UINT   *piconid,\n  UINT   nIcons,\n  UINT   flags\n);\n\nParameters\nszFileName\nType: LPCTSTR\nThe path and name of the file\nfrom which the icon(s) are to be extracted.\nnIconIndex\nType: int\nThe zero-based index of the first icon to extract. For example,\nif this value is zero, the function extracts the first icon in the specified\nfile.\ncxIcon\nType: int\nThe horizontal icon size wanted. See Remarks.\ncyIcon\nType: int\nThe vertical icon size wanted. See Remarks.\nphicon\nType: HICON*\nA pointer to the returned array of icon handles.\npiconid\nType: UINT*\nA pointer to a returned resource identifier for the icon that best\nfits the current display device.  The returned identifier is 0xFFFFFFFF if the\nidentifier is not available for this format.  The returned identifier is 0 if\nthe identifier cannot otherwise be obtained.\nnIcons\nType: UINT\nThe number of icons to extract from the file. This parameter\nis only valid when extracting from .exe and .dll files.\nflags\nType: UINT\nSpecifies flags that control this function.  These flags are the LR_*\nflags used by the LoadImage function.\nReturn value\nType: UINT\nIf the phiconparameter is NULL and this function succeeds, then the return\nvalue is the number of icons in the file.  If the function fails then the\nreturn value is 0.\nIf the phicon parameter is\nnot NULL and the function succeeds, then the return value is the\nnumber of icons extracted.  Otherwise, the return value is 0xFFFFFFFF if the file\nis not found.\nRemarks\nThis function extracts from executable (.exe), DLL (.dll),\nicon (.ico), cursor (.cur), animated cursor (.ani), and bitmap (.bmp) files.\nExtractions from Windows 3.x 16-bit executables (.exe or .dll) are\nalso supported.\nThe cxIcon and\ncyIcon parameters specify the\nsize of the icons to extract.  Two sizes can be extracted by putting the\nfirst size in the LOWORD of the parameter and the second size in the HIWORD.\nFor example, MAKELONG(24, 48) for both the cxIcon and cyIcon parameters would extract\nboth 24 and 48 size icons.\nYou must destroy all icons extracted by PrivateExtractIconsby calling the DestroyIcon function.\nThis function was not included in the SDK headers and libraries until Windows\u00c2\u00a0XP\u00c2\u00a0Service Pack\u00c2\u00a01 (SP1) and Windows Server\u00c2\u00a02003. If you do not have a header file and import library for this function, you can call the function using LoadLibrary and GetProcAddress.\n\nNote\nThe winuser.h header defines PrivateExtractIcons as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see Conventions for Function Prototypes.\n\nRequirements\n\n\n\n\u00c2\u00a0\n\u00c2\u00a0\n\n\n\n\nMinimum supported client\nWindows\u00c2\u00a02000 Professional [desktop apps only]\n\n\nMinimum supported server\nWindows\u00c2\u00a02000 Server [desktop apps only]\n\n\nTarget Platform\nWindows\n\n\nHeader\nwinuser.h\n\n\nLibrary\nUser32.lib\n\n\nDLL\nUser32.dll\n\n\nAPI set\next-ms-win-ntuser-misc-l1-5-1 (introduced in Windows 10, version 10.0.14393)\n\n\n\nSee also\nConceptual\nDestroyIcon\nExtractIcon\nExtractIconEx\nIcons\nReference", "parameters": [{"name": "szFileName", "type": "LPCTSTR", "description": "The path and name of the file\nfrom which the icon(s) are to be extracted.", "possible_constants": []}, {"name": "nIconIndex", "type": "int", "description": "The zero-based index of the first icon to extract. For example,\nif this value is zero, the function extracts the first icon in the specified\nfile.", "possible_constants": []}, {"name": "cxIcon", "type": "int", "description": "The horizontal icon size wanted. See Remarks.", "possible_constants": []}, {"name": "cyIcon", "type": "int", "description": "The vertical icon size wanted. See Remarks.", "possible_constants": []}, {"name": "phicon", "type": "HICON*", "description": "A pointer to the returned array of icon handles.", "possible_constants": []}, {"name": "piconid", "type": "UINT*", "description": "A pointer to a returned resource identifier for the icon that best\nfits the current display device.  The returned identifier is 0xFFFFFFFF if the\nidentifier is not available for this format.  The returned identifier is 0 if\nthe identifier cannot otherwise be obtained.", "possible_constants": []}, {"name": "nIcons", "type": "UINT", "description": "The number of icons to extract from the file. This parameter\nis only valid when extracting from .exe and .dll files.", "possible_constants": []}, {"name": "flags", "type": "UINT", "description": "Specifies flags that control this function.  These flags are the LR_*\nflags used by the LoadImage function.", "possible_constants": []}]}, {"name": "PrivateExtractIconsW", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-privateextracticonsw", "description": "[This function is not intended for general\n      use. It may\n      be altered or unavailable in subsequent versions of Windows.]\nCreates an array of handles to icons that are extracted from a specified file.\nSyntax\nUINT PrivateExtractIconsW(\n  LPCWSTR szFileName,\n  int     nIconIndex,\n  int     cxIcon,\n  int     cyIcon,\n  HICON   *phicon,\n  UINT    *piconid,\n  UINT    nIcons,\n  UINT    flags\n);\n\nParameters\nszFileName\nType: LPCTSTR\nThe path and name of the file\nfrom which the icon(s) are to be extracted.\nnIconIndex\nType: int\nThe zero-based index of the first icon to extract. For example,\nif this value is zero, the function extracts the first icon in the specified\nfile.\ncxIcon\nType: int\nThe horizontal icon size wanted. See Remarks.\ncyIcon\nType: int\nThe vertical icon size wanted. See Remarks.\nphicon\nType: HICON*\nA pointer to the returned array of icon handles.\npiconid\nType: UINT*\nA pointer to a returned resource identifier for the icon that best\nfits the current display device.  The returned identifier is 0xFFFFFFFF if the\nidentifier is not available for this format.  The returned identifier is 0 if\nthe identifier cannot otherwise be obtained.\nnIcons\nType: UINT\nThe number of icons to extract from the file. This parameter\nis only valid when extracting from .exe and .dll files.\nflags\nType: UINT\nSpecifies flags that control this function.  These flags are the LR_*\nflags used by the LoadImage function.\nReturn value\nType: UINT\nIf the phiconparameter is NULL and this function succeeds, then the return\nvalue is the number of icons in the file.  If the function fails then the\nreturn value is 0.\nIf the phicon parameter is\nnot NULL and the function succeeds, then the return value is the\nnumber of icons extracted.  Otherwise, the return value is 0xFFFFFFFF if the file\nis not found.\nRemarks\nThis function extracts from executable (.exe), DLL (.dll),\nicon (.ico), cursor (.cur), animated cursor (.ani), and bitmap (.bmp) files.\nExtractions from Windows 3.x 16-bit executables (.exe or .dll) are\nalso supported.\nThe cxIcon and\ncyIcon parameters specify the\nsize of the icons to extract.  Two sizes can be extracted by putting the\nfirst size in the LOWORD of the parameter and the second size in the HIWORD.\nFor example, MAKELONG(24, 48) for both the cxIcon and cyIcon parameters would extract\nboth 24 and 48 size icons.\nYou must destroy all icons extracted by PrivateExtractIconsby calling the DestroyIcon function.\nThis function was not included in the SDK headers and libraries until Windows\u00c2\u00a0XP\u00c2\u00a0Service Pack\u00c2\u00a01 (SP1) and Windows Server\u00c2\u00a02003. If you do not have a header file and import library for this function, you can call the function using LoadLibrary and GetProcAddress.\n\nNote\nThe winuser.h header defines PrivateExtractIcons as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see Conventions for Function Prototypes.\n\nRequirements\n\n\n\n\u00c2\u00a0\n\u00c2\u00a0\n\n\n\n\nMinimum supported client\nWindows\u00c2\u00a02000 Professional [desktop apps only]\n\n\nMinimum supported server\nWindows\u00c2\u00a02000 Server [desktop apps only]\n\n\nTarget Platform\nWindows\n\n\nHeader\nwinuser.h\n\n\nLibrary\nUser32.lib\n\n\nDLL\nUser32.dll\n\n\nAPI set\next-ms-win-ntuser-misc-l1-5-1 (introduced in Windows 10, version 10.0.14393)\n\n\n\nSee also\nConceptual\nDestroyIcon\nExtractIcon\nExtractIconEx\nIcons\nReference", "parameters": [{"name": "szFileName", "type": "LPCTSTR", "description": "The path and name of the file\nfrom which the icon(s) are to be extracted.", "possible_constants": []}, {"name": "nIconIndex", "type": "int", "description": "The zero-based index of the first icon to extract. For example,\nif this value is zero, the function extracts the first icon in the specified\nfile.", "possible_constants": []}, {"name": "cxIcon", "type": "int", "description": "The horizontal icon size wanted. See Remarks.", "possible_constants": []}, {"name": "cyIcon", "type": "int", "description": "The vertical icon size wanted. See Remarks.", "possible_constants": []}, {"name": "phicon", "type": "HICON*", "description": "A pointer to the returned array of icon handles.", "possible_constants": []}, {"name": "piconid", "type": "UINT*", "description": "A pointer to a returned resource identifier for the icon that best\nfits the current display device.  The returned identifier is 0xFFFFFFFF if the\nidentifier is not available for this format.  The returned identifier is 0 if\nthe identifier cannot otherwise be obtained.", "possible_constants": []}, {"name": "nIcons", "type": "UINT", "description": "The number of icons to extract from the file. This parameter\nis only valid when extracting from .exe and .dll files.", "possible_constants": []}, {"name": "flags", "type": "UINT", "description": "Specifies flags that control this function.  These flags are the LR_*\nflags used by the LoadImage function.", "possible_constants": []}]}, {"name": "PtInRect", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-ptinrect", "description": "The PtInRect function determines whether the specified point lies within the specified rectangle. A point is within a rectangle if it lies on the left or top side or is within all four sides. A point on the right or bottom side is considered outside the rectangle.", "parameters": [{"name": "lprc", "type": "", "description": "A pointer to a RECT structure that contains the specified rectangle.", "possible_constants": []}, {"name": "pt", "type": "", "description": "A POINT structure that contains the specified point.", "possible_constants": []}]}, {"name": "QueryDisplayConfig", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-querydisplayconfig", "description": "The QueryDisplayConfig function retrieves information about all possible display paths for all display devices, or views, in the current setting.", "parameters": [{"name": "flags", "type": "", "description": "The type of information to retrieve. The value for the Flags parameter must be one of the following values.", "possible_constants": []}]}, {"name": "RealChildWindowFromPoint", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-realchildwindowfrompoint", "description": "Retrieves a handle to the child window at the specified point. The search is restricted to immediate child windows; grandchildren and deeper descendant windows are not searched.", "parameters": [{"name": "hwndParent", "type": "HWND", "description": "A handle to the window whose child is to be retrieved.", "possible_constants": []}, {"name": "ptParentClientCoords", "type": "POINT", "description": "A POINT structure that defines the client coordinates of the point to be checked.", "possible_constants": []}]}, {"name": "RealGetWindowClassA", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-realgetwindowclassa", "description": "Retrieves a string that specifies the window type.", "parameters": [{"name": "hwnd", "type": "HWND", "description": "A handle to the window whose type will be retrieved.", "possible_constants": []}, {"name": "ptszClassName", "type": "LPTSTR", "description": "A pointer to a string that receives the window type.", "possible_constants": []}, {"name": "cchClassNameMax", "type": "UINT", "description": "The length, in characters, of the buffer pointed to by the pszType parameter.", "possible_constants": []}]}, {"name": "RealGetWindowClassW", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-realgetwindowclassw", "description": "Retrieves a string that specifies the window type.", "parameters": [{"name": "hwnd", "type": "HWND", "description": "A handle to the window whose type will be retrieved.", "possible_constants": []}, {"name": "ptszClassName", "type": "LPTSTR", "description": "A pointer to a string that receives the window type.", "possible_constants": []}, {"name": "cchClassNameMax", "type": "UINT", "description": "The length, in characters, of the buffer pointed to by the pszType parameter.", "possible_constants": []}]}, {"name": "RedrawWindow", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-redrawwindow", "description": "The RedrawWindow function updates the specified rectangle or region in a window's client area.", "parameters": [{"name": "hWnd", "type": "", "description": "A handle to the window to be redrawn. If this parameter is NULL, the desktop window is updated.", "possible_constants": []}, {"name": "lprcUpdate", "type": "", "description": "A pointer to a RECT structure containing the coordinates, in device units, of the update rectangle. This parameter is ignored if the hrgnUpdate parameter identifies a region.", "possible_constants": []}, {"name": "hrgnUpdate", "type": "", "description": "A handle to the update region. If both the hrgnUpdate and lprcUpdate parameters are NULL, the entire client area is added to the update region.", "possible_constants": []}, {"name": "flags", "type": "", "description": "One or more redraw flags. This parameter can be used to invalidate or validate a window, control repainting, and control which windows are affected by RedrawWindow.\nThe following flags are used to invalidate the window.\nThe following flags are used to validate the window.\nThe following flags control when repainting occurs. RedrawWindow will not repaint unless one of these flags is specified.\nBy default, the windows affected by RedrawWindow depend on whether the specified window has the WS_CLIPCHILDREN style. Child windows that are not the WS_CLIPCHILDREN style are unaffected; non-WS_CLIPCHILDREN windows are recursively validated or invalidated until a WS_CLIPCHILDREN window is encountered. The following flags control which windows are affected by the RedrawWindow function.", "possible_constants": []}]}, {"name": "RegisterClassA", "return_type": "ATOM", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerclassa", "description": "Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function.", "parameters": [{"name": "lpWndClass", "type": "const WNDCLASS*", "description": "A pointer to a WNDCLASS structure. You must fill the structure with the appropriate class attributes before passing it to the function.", "possible_constants": []}]}, {"name": "RegisterClassExA", "return_type": "ATOM", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerclassexa", "description": "Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function.", "parameters": [{"name": "unnamedParam1", "type": "const WNDCLASSEX*", "description": "A pointer to a WNDCLASSEX structure. You must fill the structure with the appropriate class attributes before passing it to the function.", "possible_constants": []}]}, {"name": "RegisterClassExW", "return_type": "ATOM", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerclassexw", "description": "Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function.", "parameters": [{"name": "unnamedParam1", "type": "const WNDCLASSEX*", "description": "A pointer to a WNDCLASSEX structure. You must fill the structure with the appropriate class attributes before passing it to the function.", "possible_constants": []}]}, {"name": "RegisterClassW", "return_type": "ATOM", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerclassw", "description": "Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function.", "parameters": [{"name": "lpWndClass", "type": "const WNDCLASS*", "description": "A pointer to a WNDCLASS structure. You must fill the structure with the appropriate class attributes before passing it to the function.", "possible_constants": []}]}, {"name": "RegisterClipboardFormatA", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerclipboardformata", "description": "Registers a new clipboard format. This format can then be used as a valid clipboard format.", "parameters": [{"name": "lpszFormat", "type": "LPCTSTR", "description": "The name of the new format.", "possible_constants": []}]}, {"name": "RegisterClipboardFormatW", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerclipboardformatw", "description": "Registers a new clipboard format. This format can then be used as a valid clipboard format.", "parameters": [{"name": "lpszFormat", "type": "LPCTSTR", "description": "The name of the new format.", "possible_constants": []}]}, {"name": "RegisterDeviceNotificationA", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerdevicenotificationa", "description": "Registers the device or type of device for which a window will receive notifications.", "parameters": [{"name": "hRecipient", "type": "", "description": "A handle to the window or service that will receive device events for the devices specified in the\nNotificationFilter parameter. The same window handle can be used in multiple calls to\nRegisterDeviceNotification.\nServices can specify either a window handle or service status handle.", "possible_constants": []}, {"name": "NotificationFilter", "type": "", "description": "A pointer to a block of data that specifies the type of device for which notifications should be sent. This\nblock always begins with the DEV_BROADCAST_HDR\nstructure. The data following this header is dependent on the value of the\ndbch_devicetype member, which can be\nDBT_DEVTYP_DEVICEINTERFACE or DBT_DEVTYP_HANDLE. For more\ninformation, see Remarks.", "possible_constants": []}, {"name": "Flags", "type": "", "description": "This parameter can be one of the following values.\nIn addition, you can specify the following value.", "possible_constants": [["DEVICE_NOTIFY_WINDOW_HANDLE", 0], ["DEVICE_NOTIFY_SERVICE_HANDLE", 1], ["DEVICE_NOTIFY_ALL_INTERFACE_CLASSES", 4]]}]}, {"name": "RegisterDeviceNotificationW", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerdevicenotificationw", "description": "Registers the device or type of device for which a window will receive notifications.", "parameters": [{"name": "hRecipient", "type": "", "description": "A handle to the window or service that will receive device events for the devices specified in the\nNotificationFilter parameter. The same window handle can be used in multiple calls to\nRegisterDeviceNotification.\nServices can specify either a window handle or service status handle.", "possible_constants": []}, {"name": "NotificationFilter", "type": "", "description": "A pointer to a block of data that specifies the type of device for which notifications should be sent. This\nblock always begins with the DEV_BROADCAST_HDR\nstructure. The data following this header is dependent on the value of the\ndbch_devicetype member, which can be\nDBT_DEVTYP_DEVICEINTERFACE or DBT_DEVTYP_HANDLE. For more\ninformation, see Remarks.", "possible_constants": []}, {"name": "Flags", "type": "", "description": "This parameter can be one of the following values.\nIn addition, you can specify the following value.", "possible_constants": [["DEVICE_NOTIFY_WINDOW_HANDLE", 0], ["DEVICE_NOTIFY_SERVICE_HANDLE", 1], ["DEVICE_NOTIFY_ALL_INTERFACE_CLASSES", 4]]}]}, {"name": "RegisterHotKey", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerhotkey", "description": "Defines a system-wide hot key.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window that will receive WM_HOTKEY messages generated by the hot key. If this parameter is NULL, WM_HOTKEY messages are posted to the message queue of the calling thread and must be processed in the message loop.", "possible_constants": []}, {"name": "id", "type": "int", "description": "The identifier of the hot key.  If the hWnd parameter is NULL, then the hot key is associated with the current thread rather than with a particular window. If a hot key already exists with the same hWnd and id parameters, see Remarks for the action taken.", "possible_constants": []}, {"name": "fsModifiers", "type": "UINT", "description": "The keys that must be pressed in combination with the key specified by the\nuVirtKey parameter in order to generate the WM_HOTKEY message. The fsModifiers parameter can be a combination of the following values.", "possible_constants": [["MOD_ALT", 1], ["MOD_CONTROL", 2], ["MOD_NOREPEAT", 16384], ["MOD_SHIFT", 4], ["MOD_WIN", 8]]}, {"name": "vk", "type": "UINT", "description": "The virtual-key code of the hot key. See Virtual Key Codes.", "possible_constants": []}]}, {"name": "RegisterPointerDeviceNotifications", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerpointerdevicenotifications", "description": "Registers a window to process the WM_POINTERDEVICECHANGE,\nWM_POINTERDEVICEINRANGE, and\nWM_POINTERDEVICEOUTOFRANGE pointer device notifications.", "parameters": [{"name": "window", "type": "", "description": "The window that receives WM_POINTERDEVICECHANGE,\nWM_POINTERDEVICEINRANGE, and\nWM_POINTERDEVICEOUTOFRANGE notifications.", "possible_constants": []}, {"name": "notifyRange", "type": "", "description": "If set to TRUE, process the WM_POINTERDEVICEINRANGE and\nWM_POINTERDEVICEOUTOFRANGE messages. If set to FALSE, these messages aren't processed.", "possible_constants": []}]}, {"name": "RegisterPointerInputTarget", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerpointerinputtarget", "description": "Allows the caller to register a target window to which all pointer input of the specified type is redirected.", "parameters": [{"name": "hwnd", "type": "", "description": "The window to register as a global redirection target.\nRedirection can cause the foreground window to lose activation (focus). To avoid this, ensure the window is a message-only window or has the WS_EX_NOACTIVATE style set.", "possible_constants": []}, {"name": "pointerType", "type": "", "description": "Type of pointer input to be redirected to the specified  window. This is any valid and supported value from the POINTER_INPUT_TYPE enumeration. Note that the generic PT_POINTER type and the PT_MOUSE type are not valid in this parameter.", "possible_constants": []}]}, {"name": "RegisterPointerInputTargetEx", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerpointerinputtargetex", "description": "[RegisterPointerInputTargetEx is not supported and may be altered or unavailable in the future. Instead, use RegisterPointerInputTarget.]\nRegisterPointerInputTargetEx may be altered or unavailable. Instead, use RegisterPointerInputTarget.\nSyntax\nBOOL RegisterPointerInputTargetEx(\n  HWND               hwnd,\n  POINTER_INPUT_TYPE pointerType,\n  BOOL               fObserve\n);\n\nParameters\nhwnd\nNot supported.\npointerType\nNot supported.\nfObserve\nNot supported.\nReturn value\nNot supported.\nRequirements\n\n\n\n\u00c2\u00a0\n\u00c2\u00a0\n\n\n\n\nMinimum supported client\nWindows\u00c2\u00a010 [desktop apps only]\n\n\nMinimum supported server\nWindows Server\u00c2\u00a02016 [desktop apps only]\n\n\nTarget Platform\nWindows\n\n\nHeader\nwinuser.h\n\n\nLibrary\nUser32.lib\n\n\nDLL\nUser32.dll\n\n\n\nSee also\nRegisterPointerInputTarget", "parameters": [{"name": "hwnd", "type": "", "description": "Not supported.", "possible_constants": []}, {"name": "pointerType", "type": "", "description": "Not supported.", "possible_constants": []}, {"name": "fObserve", "type": "", "description": "Not supported.", "possible_constants": []}]}, {"name": "RegisterPowerSettingNotification", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerpowersettingnotification", "description": "Registers the application to receive power setting notifications for the specific power setting event.", "parameters": [{"name": "hRecipient", "type": "", "description": "Handle indicating where the power setting notifications are to be sent. For interactive applications, the\nFlags parameter should be zero, and the hRecipient parameter\nshould be a window handle. For services, the Flags parameter should be one, and the\nhRecipient parameter should be a SERVICE_STATUS_HANDLE\nas returned from\nRegisterServiceCtrlHandlerEx.", "possible_constants": []}, {"name": "PowerSettingGuid", "type": "", "description": "The GUID of the power setting for which notifications are to be sent. For more information see Registering for Power\nEvents.", "possible_constants": []}, {"name": "Flags", "type": "", "description": "", "possible_constants": [["DEVICE_NOTIFY_WINDOW_HANDLE", -1], ["DEVICE_NOTIFY_SERVICE_HANDLE", -1]]}]}, {"name": "RegisterRawInputDevices", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerrawinputdevices", "description": "Registers the devices that supply the raw input data.", "parameters": [{"name": "pRawInputDevices", "type": "PCRAWINPUTDEVICE", "description": "An array of RAWINPUTDEVICE structures that represent the devices that supply the raw input.", "possible_constants": []}, {"name": "uiNumDevices", "type": "UINT", "description": "The number of RAWINPUTDEVICE structures pointed to by pRawInputDevices.", "possible_constants": []}, {"name": "cbSize", "type": "UINT", "description": "The size, in bytes, of a RAWINPUTDEVICE structure.", "possible_constants": []}]}, {"name": "RegisterShellHookWindow", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registershellhookwindow", "description": "[This function is not intended for general\n      use. It may\n      be altered or unavailable in subsequent versions of Windows.]\nRegisters a specified Shell window to receive certain messages for events or notifications that are useful to Shell applications.\nThe event messages received are only those sent to the Shell window associated with the specified window's desktop. Many of the messages    are the same as those that can be received after calling the SetWindowsHookEx function and specifying WH_SHELL for the hook type. The difference with RegisterShellHookWindow is that the messages are received through the specified window's WindowProc and not through a call back procedure.\nSyntax\nBOOL RegisterShellHookWindow(\n  HWND hwnd\n);\n\nParameters\nhwnd\nType: HWND\nA handle to the window to register for Shell hook messages.\nReturn value\nType: BOOL\nTRUE if the function succeeds; otherwise, FALSE.\nRemarks\nAs with normal window messages, the second parameter of the window procedure identifies the message as a WM_SHELLHOOKMESSAGE. However, for these Shell hook messages, the message value is not a pre-defined constant like other message IDs such as WM_COMMAND. The value must be obtained dynamically using a call to RegisterWindowMessage as shown here:\nRegisterWindowMessage(TEXT(\"SHELLHOOK\"));\nThis precludes handling these messages using a traditional switch statement which requires  ID values that are known at compile time.  For handling Shell hook messages, the normal practice is to code an If statement in the default section of your switch statement and then handle the message if the value of the message ID is the same as the value\nobtained from the RegisterWindowMessage call.\nThe following table describes the wParam and lParam parameter values passed to the window procedure for the Shell hook messages.\n\n\nwParam\nlParam\n\n\nHSHELL_GETMINRECT\nA pointer to a SHELLHOOKINFO structure.\n\n\nHSHELL_WINDOWACTIVATED\nA handle to the activated window.\n\n\nHSHELL_RUDEAPPACTIVATED\nA handle to the activated window.\n\n\nHSHELL_WINDOWREPLACING\nA handle to the window replacing the top-level window.\n\n\nHSHELL_WINDOWREPLACED\nA handle to the window being replaced.\n\n\nHSHELL_WINDOWCREATED\nA handle to the window being created.\n\n\nHSHELL_WINDOWDESTROYED\nA handle to the top-level window being destroyed.\n\n\nHSHELL_ACTIVATESHELLWINDOW\nNot used.\n\n\nHSHELL_TASKMAN\nCan be ignored.\n\n\nHSHELL_REDRAW\nA handle to the window that needs to be redrawn.\n\n\nHSHELL_FLASH\nA handle to the window that needs to be flashed.\n\n\nHSHELL_ENDTASK\nA handle to the window that should be forced to exit.\n\n\nHSHELL_APPCOMMAND\nThe APPCOMMAND which has been unhandled by the application or other hooks. See WM_APPCOMMAND and use the GET_APPCOMMAND_LPARAM macro to retrieve this parameter.\n\n\nHSHELL_MONITORCHANGED                     \nA handle to the window that moved to a different monitor.\n\n\n\u00c2\u00a0\nThis function was not included in the SDK headers and libraries until Windows\u00c2\u00a0XP with Service Pack\u00c2\u00a01 (SP1) and Windows Server\u00c2\u00a02003. If you do not have a header file and import library for this function, you can call the function using LoadLibrary and GetProcAddress.\nRequirements\n\n\n\n\u00c2\u00a0\n\u00c2\u00a0\n\n\n\n\nMinimum supported client\nWindows\u00c2\u00a02000 Professional [desktop apps only]\n\n\nMinimum supported server\nWindows\u00c2\u00a02000 Server [desktop apps only]\n\n\nTarget Platform\nWindows\n\n\nHeader\nwinuser.h (include Windows.h)\n\n\nLibrary\nUser32.lib\n\n\nDLL\nUser32.dll\n\n\n\nSee also\nConceptual\nDeregisterShellHookWindow\nOther Resources\nReference\nSetWindowsHookEx\nShellProc\nUsing Messages and Message Queues\nWinEvents\nWindowProc\nWindows", "parameters": [{"name": "hwnd", "type": "HWND", "description": "A handle to the window to register for Shell hook messages.", "possible_constants": []}]}, {"name": "RegisterSuspendResumeNotification", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registersuspendresumenotification", "description": "Registers to receive notification when the system is suspended or resumed. Similar to PowerRegisterSuspendResumeNotification, but operates in user mode and can take a window handle.", "parameters": [{"name": "hRecipient", "type": "", "description": "This parameter contains parameters for subscribing to a power notification or a window handle representing the subscribing process.\nIf Flags is DEVICE_NOTIFY_CALLBACK, hRecipient is interpreted as a pointer to a DEVICE_NOTIFY_SUBSCRIBE_PARAMETERS structure. In this case, the callback function is DeviceNotifyCallbackRoutine. When the Callback function executes, the  Type parameter is set indicating the type of event that occurred. Possible values include PBT_APMSUSPEND, PBT_APMRESUMESUSPEND, and PBT_APMRESUMEAUTOMATIC - see  Power Management Events for more info. The Setting parameter is not used with suspend/resume notifications.\nIf Flags is DEVICE_NOTIFY_WINDOW_HANDLE, hRecipient is a handle to the window to deliver events to.", "possible_constants": []}, {"name": "Flags", "type": "", "description": "This parameter can be DEVICE_NOTIFY_WINDOW_HANDLE or DEVICE_NOTIFY_CALLBACK.", "possible_constants": []}]}, {"name": "RegisterTouchHitTestingWindow", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registertouchhittestingwindow", "description": "Registers a window to process the", "parameters": [{"name": "hwnd", "type": "", "description": "The window that receives the WM_TOUCHHITTESTING  notification.", "possible_constants": []}, {"name": "value", "type": "", "description": "One of the following values:", "possible_constants": []}]}, {"name": "RegisterTouchWindow", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registertouchwindow", "description": "Registers a window as being touch-capable.", "parameters": [{"name": "hwnd", "type": "", "description": "The handle of the window being registered. The function fails with ERROR_ACCESS_DENIED if the calling thread does not own the specified window.", "possible_constants": []}, {"name": "ulFlags", "type": "", "description": "A set of bit flags that specify optional modifications. This field may contain 0 or one of the following values.", "possible_constants": [["TWF_FINETOUCH", -1], ["TWF_WANTPALM", -1]]}]}, {"name": "RegisterWindowMessageA", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerwindowmessagea", "description": "Defines a new window message that is guaranteed to be unique throughout the system. The message value can be used when sending or posting messages.", "parameters": [{"name": "lpString", "type": "LPCTSTR", "description": "The message to be registered.", "possible_constants": []}]}, {"name": "RegisterWindowMessageW", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerwindowmessagew", "description": "Defines a new window message that is guaranteed to be unique throughout the system. The message value can be used when sending or posting messages.", "parameters": [{"name": "lpString", "type": "LPCTSTR", "description": "The message to be registered.", "possible_constants": []}]}, {"name": "ReleaseCapture", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-releasecapture", "description": "Releases the mouse capture from a window in the current thread and restores normal mouse input processing. A window that has captured the mouse receives all mouse input, regardless of the position of the cursor, except when a mouse button is clicked while the cursor hot spot is in the window of another thread.", "parameters": []}, {"name": "ReleaseDC", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-releasedc", "description": "The ReleaseDC function releases a device context (DC), freeing it for use by other applications. The effect of the ReleaseDC function depends on the type of DC. It frees only common and window DCs. It has no effect on class or private DCs.", "parameters": [{"name": "hWnd", "type": "", "description": "A handle to the window whose DC is to be released.", "possible_constants": []}, {"name": "hDC", "type": "", "description": "A handle to the DC to be released.", "possible_constants": []}]}, {"name": "RemoveClipboardFormatListener", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-removeclipboardformatlistener", "description": "Removes the given window from the system-maintained clipboard format listener list.", "parameters": [{"name": "hwnd", "type": "HWND", "description": "A handle to the window to remove from the clipboard format listener list.", "possible_constants": []}]}, {"name": "RemoveMenu", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-removemenu", "description": "Deletes a menu item or detaches a submenu from the specified menu. If the menu item opens a drop-down menu or submenu, RemoveMenu does not destroy the menu or its handle, allowing the menu to be reused. Before this function is called, the GetSubMenu function should retrieve a handle to the drop-down menu or submenu.", "parameters": [{"name": "hMenu", "type": "HMENU", "description": "A handle to the menu to be changed.", "possible_constants": []}, {"name": "uPosition", "type": "UINT", "description": "The menu item to be deleted, as determined by the uFlags parameter.", "possible_constants": []}, {"name": "uFlags", "type": "UINT", "description": "Indicates how the uPosition parameter is interpreted. This parameter must be one of the following values.", "possible_constants": [["MF_BYCOMMAND", 0], ["MF_BYPOSITION", 1024]]}]}, {"name": "RemovePropA", "return_type": "HANDLE", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-removepropa", "description": "Removes an entry from the property list of the specified window. The specified character string identifies the entry to be removed.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window whose property list is to be changed.", "possible_constants": []}, {"name": "lpString", "type": "LPCTSTR", "description": "A null-terminated character string or an atom that identifies a string. If this parameter is an atom, it must have been created using the GlobalAddAtom function. The atom, a 16-bit value, must be placed in the low-order word of lpString; the high-order word must be zero.", "possible_constants": []}]}, {"name": "RemovePropW", "return_type": "HANDLE", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-removepropw", "description": "Removes an entry from the property list of the specified window. The specified character string identifies the entry to be removed.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window whose property list is to be changed.", "possible_constants": []}, {"name": "lpString", "type": "LPCTSTR", "description": "A null-terminated character string or an atom that identifies a string. If this parameter is an atom, it must have been created using the GlobalAddAtom function. The atom, a 16-bit value, must be placed in the low-order word of lpString; the high-order word must be zero.", "possible_constants": []}]}, {"name": "ReplyMessage", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-replymessage", "description": "Replies to a message sent from another thread by the SendMessage function.", "parameters": [{"name": "lResult", "type": "LRESULT", "description": "The result of the message processing. The possible values are based on the message sent.", "possible_constants": []}]}, {"name": "ScreenToClient", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-screentoclient", "description": "The ScreenToClient function converts the screen coordinates of a specified point on the screen to client-area coordinates.", "parameters": [{"name": "hWnd", "type": "", "description": "A handle to the window whose client area will be used for the conversion.", "possible_constants": []}, {"name": "lpPoint", "type": "", "description": "A pointer to a POINT structure that specifies the screen coordinates to be converted.", "possible_constants": []}]}, {"name": "ScrollDC", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-scrolldc", "description": "The ScrollDC function scrolls a rectangle of bits horizontally and vertically.", "parameters": [{"name": "hDC", "type": "HDC", "description": "Handle to the device context that contains the bits to be scrolled.", "possible_constants": []}, {"name": "dx", "type": "int", "description": "Specifies the amount, in device units, of horizontal scrolling. This parameter must be a negative value to scroll to the left.", "possible_constants": []}, {"name": "dy", "type": "int", "description": "Specifies the amount, in device units, of vertical scrolling. This parameter must be a negative value to scroll up.", "possible_constants": []}, {"name": "lprcScroll", "type": "const RECT*", "description": "Pointer to a RECT structure containing the coordinates of the bits to be scrolled. The only bits affected by the scroll operation are bits in the intersection of this rectangle and the rectangle specified by\nlprcClip. If\nlprcScroll is NULL, the entire client area is used.", "possible_constants": []}, {"name": "lprcClip", "type": "const RECT*", "description": "Pointer to a\nRECT structure containing the coordinates of the clipping rectangle. The only bits that will be painted are the bits that remain inside this rectangle after the scroll operation has been completed. If\nlprcClip is NULL, the entire client area is used.", "possible_constants": []}, {"name": "hrgnUpdate", "type": "HRGN", "description": "Handle to the region uncovered by the scrolling process. ScrollDC defines this region; it is not necessarily a rectangle.", "possible_constants": []}, {"name": "lprcUpdate", "type": "LPRECT", "description": "Pointer to a RECT structure that receives the coordinates of the rectangle bounding the scrolling update region. This is the largest rectangular area that requires repainting. When the function returns, the values in the structure are in client coordinates, regardless of the mapping mode for the specified device context. This allows applications to use the update region in a call to the InvalidateRgn function, if required.", "possible_constants": []}]}, {"name": "ScrollWindow", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-scrollwindow", "description": "The ScrollWindow function scrolls the contents of the specified window's client area.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "Handle to the window where the client area is to be scrolled.", "possible_constants": []}, {"name": "XAmount", "type": "int", "description": "Specifies the amount, in device units, of horizontal scrolling. If the window being scrolled has the CS_OWNDC or CS_CLASSDC style, then this parameter uses logical units rather than device units. This parameter must be a negative value to scroll the content of the window to the left.", "possible_constants": []}, {"name": "YAmount", "type": "int", "description": "Specifies the amount, in device units, of vertical scrolling. If the window being scrolled has the CS_OWNDC or CS_CLASSDC style, then this parameter uses logical units rather than device units. This parameter must be a negative value to scroll the content of the window up.", "possible_constants": []}, {"name": "lpRect", "type": "const RECT*", "description": "Pointer to the RECT structure specifying the portion of the client area to be scrolled. If this parameter is NULL, the entire client area is scrolled.", "possible_constants": []}, {"name": "lpClipRect", "type": "const RECT*", "description": "Pointer to the\nRECT structure containing the coordinates of the clipping rectangle. Only device bits within the clipping rectangle are affected. Bits scrolled from the outside of the rectangle to the inside are painted; bits scrolled from the inside of the rectangle to the outside are not painted.", "possible_constants": []}]}, {"name": "ScrollWindowEx", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-scrollwindowex", "description": "The ScrollWindowEx function scrolls the contents of the specified window's client area.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "Handle to the window where the client area is to be scrolled.", "possible_constants": []}, {"name": "dx", "type": "int", "description": "Specifies the amount, in device units, of horizontal scrolling. This parameter must be a negative value to scroll to the left.", "possible_constants": []}, {"name": "dy", "type": "int", "description": "Specifies the amount, in device units, of vertical scrolling. This parameter must be a negative value to scroll up.", "possible_constants": []}, {"name": "prcScroll", "type": "const RECT*", "description": "Pointer to a RECT structure that specifies the portion of the client area to be scrolled. If this parameter is NULL, the entire client area is scrolled.", "possible_constants": []}, {"name": "prcClip", "type": "const RECT*", "description": "Pointer to a\nRECT structure that contains the coordinates of the clipping rectangle. Only device bits within the clipping rectangle are affected. Bits scrolled from the outside of the rectangle to the inside are painted; bits scrolled from the inside of the rectangle to the outside are not painted. This parameter may be NULL.", "possible_constants": []}, {"name": "hrgnUpdate", "type": "HRGN", "description": "Handle to the region that is modified to hold the region invalidated by scrolling. This parameter may be NULL.", "possible_constants": []}, {"name": "prcUpdate", "type": "LPRECT", "description": "Pointer to a RECT structure that receives the boundaries of the rectangle invalidated by scrolling. This parameter may be NULL.", "possible_constants": []}, {"name": "flags", "type": "UINT", "description": "Specifies flags that control scrolling. This parameter can be a combination of the following values.", "possible_constants": [["SW_ERASE", -1], ["SW_INVALIDATE", -1], ["SW_SCROLLCHILDREN", -1], ["SW_SMOOTHSCROLL", -1]]}]}, {"name": "SendDlgItemMessageA", "return_type": "LRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-senddlgitemmessagea", "description": "Sends a message to the specified control in a dialog box.", "parameters": [{"name": "hDlg", "type": "HWND", "description": "A handle to the dialog box that contains the control.", "possible_constants": []}, {"name": "nIDDlgItem", "type": "int", "description": "The identifier of the control that receives the message.", "possible_constants": []}, {"name": "Msg", "type": "UINT", "description": "The message to be sent.\nFor lists of the system-provided messages, see System-Defined Messages.", "possible_constants": []}, {"name": "wParam", "type": "WPARAM", "description": "Additional message-specific information.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "Additional message-specific information.", "possible_constants": []}]}, {"name": "SendDlgItemMessageW", "return_type": "LRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-senddlgitemmessagew", "description": "Sends a message to the specified control in a dialog box.", "parameters": [{"name": "hDlg", "type": "HWND", "description": "A handle to the dialog box that contains the control.", "possible_constants": []}, {"name": "nIDDlgItem", "type": "int", "description": "The identifier of the control that receives the message.", "possible_constants": []}, {"name": "Msg", "type": "UINT", "description": "The message to be sent.\nFor lists of the system-provided messages, see System-Defined Messages.", "possible_constants": []}, {"name": "wParam", "type": "WPARAM", "description": "Additional message-specific information.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "Additional message-specific information.", "possible_constants": []}]}, {"name": "SendInput", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-sendinput", "description": "Synthesizes keystrokes, mouse motions, and button clicks.", "parameters": [{"name": "cInputs", "type": "UINT", "description": "The number of structures in the pInputs array.", "possible_constants": []}, {"name": "pInputs", "type": "LPINPUT", "description": "An array of INPUT structures. Each structure represents an event to be inserted into the keyboard or mouse input stream.", "possible_constants": []}, {"name": "cbSize", "type": "int", "description": "The size, in bytes, of an INPUT structure. If cbSize is not the size of an INPUT structure, the function fails.", "possible_constants": []}]}, {"name": "SendMessage", "return_type": "LRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-sendmessage", "description": "Sends the specified message to a window or windows. The SendMessage function calls the window procedure for the specified window and does not return until the window procedure has processed the message.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.\nMessage sending is subject to UIPI. The thread of a process can send messages only to message queues of threads in processes of lesser or equal integrity level.", "possible_constants": []}, {"name": "Msg", "type": "UINT", "description": "The message to be sent.\nFor lists of the system-provided messages, see System-Defined Messages.", "possible_constants": []}, {"name": "wParam", "type": "WPARAM", "description": "Additional message-specific information.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "Additional message-specific information.", "possible_constants": []}]}, {"name": "SendMessageA", "return_type": "LRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-sendmessagea", "description": "Sends the specified message to a window or windows. The SendMessage function calls the window procedure for the specified window and does not return until the window procedure has processed the message.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.\nMessage sending is subject to UIPI. The thread of a process can send messages only to message queues of threads in processes of lesser or equal integrity level.", "possible_constants": []}, {"name": "Msg", "type": "UINT", "description": "The message to be sent.\nFor lists of the system-provided messages, see System-Defined Messages.", "possible_constants": []}, {"name": "wParam", "type": "WPARAM", "description": "Additional message-specific information.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "Additional message-specific information.", "possible_constants": []}]}, {"name": "SendMessageCallbackA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-sendmessagecallbacka", "description": "Sends the specified message to a window or windows. It calls the window procedure for the specified window and returns immediately if the window belongs to another thread. After the window procedure processes the message, the system calls the specified callback function, passing the result of the message processing and an application-defined value to the callback function.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.", "possible_constants": []}, {"name": "Msg", "type": "UINT", "description": "The message to be sent.\nFor lists of the system-provided messages, see System-Defined Messages.", "possible_constants": []}, {"name": "wParam", "type": "WPARAM", "description": "Additional message-specific information.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "Additional message-specific information.", "possible_constants": []}, {"name": "lpResultCallBack", "type": "SENDASYNCPROC", "description": "A pointer to a callback function that the system calls after the window procedure processes the message. For more information, see SendAsyncProc.\nIf hWnd is HWND_BROADCAST ((HWND)0xffff), the system calls the SendAsyncProc callback function once for each top-level window.", "possible_constants": []}, {"name": "dwData", "type": "ULONG_PTR", "description": "An application-defined value to be sent to the callback function pointed to by the lpCallBack parameter.", "possible_constants": []}]}, {"name": "SendMessageCallbackW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-sendmessagecallbackw", "description": "Sends the specified message to a window or windows. It calls the window procedure for the specified window and returns immediately if the window belongs to another thread. After the window procedure processes the message, the system calls the specified callback function, passing the result of the message processing and an application-defined value to the callback function.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.", "possible_constants": []}, {"name": "Msg", "type": "UINT", "description": "The message to be sent.\nFor lists of the system-provided messages, see System-Defined Messages.", "possible_constants": []}, {"name": "wParam", "type": "WPARAM", "description": "Additional message-specific information.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "Additional message-specific information.", "possible_constants": []}, {"name": "lpResultCallBack", "type": "SENDASYNCPROC", "description": "A pointer to a callback function that the system calls after the window procedure processes the message. For more information, see SendAsyncProc.\nIf hWnd is HWND_BROADCAST ((HWND)0xffff), the system calls the SendAsyncProc callback function once for each top-level window.", "possible_constants": []}, {"name": "dwData", "type": "ULONG_PTR", "description": "An application-defined value to be sent to the callback function pointed to by the lpCallBack parameter.", "possible_constants": []}]}, {"name": "SendMessageTimeoutA", "return_type": "LRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-sendmessagetimeouta", "description": "Sends the specified message to one or more windows.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window whose window procedure will receive the message.\nIf this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows. The function does not return until each window has timed out. Therefore, the total wait time can be up to the value of uTimeout multiplied by the number of top-level windows.", "possible_constants": []}, {"name": "Msg", "type": "UINT", "description": "The message to be sent.\nFor lists of the system-provided messages, see System-Defined Messages.", "possible_constants": []}, {"name": "wParam", "type": "WPARAM", "description": "Any additional message-specific information.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "Any additional message-specific information.", "possible_constants": []}, {"name": "fuFlags", "type": "UINT", "description": "The behavior of this function. This parameter can be one or more of the following values.", "possible_constants": [["SMTO_ABORTIFHUNG", 2], ["SMTO_BLOCK", 1], ["SMTO_NORMAL", 0], ["SMTO_NOTIMEOUTIFNOTHUNG", 8], ["SMTO_ERRORONEXIT", 32]]}, {"name": "uTimeout", "type": "UINT", "description": "The duration of the time-out period, in milliseconds. If the message is a broadcast message, each window can use the full time-out period. For example, if you specify a five second time-out period and there are three top-level windows that fail to process the message, you could have up to a 15 second delay.", "possible_constants": []}, {"name": "lpdwResult", "type": "PDWORD_PTR", "description": "The result of the message processing. The value of this parameter depends on the message that is specified.", "possible_constants": []}]}, {"name": "SendMessageTimeoutW", "return_type": "LRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-sendmessagetimeoutw", "description": "Sends the specified message to one or more windows.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window whose window procedure will receive the message.\nIf this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows. The function does not return until each window has timed out. Therefore, the total wait time can be up to the value of uTimeout multiplied by the number of top-level windows.", "possible_constants": []}, {"name": "Msg", "type": "UINT", "description": "The message to be sent.\nFor lists of the system-provided messages, see System-Defined Messages.", "possible_constants": []}, {"name": "wParam", "type": "WPARAM", "description": "Any additional message-specific information.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "Any additional message-specific information.", "possible_constants": []}, {"name": "fuFlags", "type": "UINT", "description": "The behavior of this function. This parameter can be one or more of the following values.", "possible_constants": [["SMTO_ABORTIFHUNG", 2], ["SMTO_BLOCK", 1], ["SMTO_NORMAL", 0], ["SMTO_NOTIMEOUTIFNOTHUNG", 8], ["SMTO_ERRORONEXIT", 32]]}, {"name": "uTimeout", "type": "UINT", "description": "The duration of the time-out period, in milliseconds. If the message is a broadcast message, each window can use the full time-out period. For example, if you specify a five second time-out period and there are three top-level windows that fail to process the message, you could have up to a 15 second delay.", "possible_constants": []}, {"name": "lpdwResult", "type": "PDWORD_PTR", "description": "The result of the message processing. The value of this parameter depends on the message that is specified.", "possible_constants": []}]}, {"name": "SendMessageW", "return_type": "LRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-sendmessagew", "description": "Sends the specified message to a window or windows. The SendMessage function calls the window procedure for the specified window and does not return until the window procedure has processed the message.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.\nMessage sending is subject to UIPI. The thread of a process can send messages only to message queues of threads in processes of lesser or equal integrity level.", "possible_constants": []}, {"name": "Msg", "type": "UINT", "description": "The message to be sent.\nFor lists of the system-provided messages, see System-Defined Messages.", "possible_constants": []}, {"name": "wParam", "type": "WPARAM", "description": "Additional message-specific information.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "Additional message-specific information.", "possible_constants": []}]}, {"name": "SendNotifyMessageA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-sendnotifymessagea", "description": "Sends the specified message to a window or windows. If the window was created by the calling thread, SendNotifyMessage calls the window procedure for the window and does not return until the window procedure has processed the message. If the window was created by a different thread, SendNotifyMessage passes the message to the window procedure and returns immediately; it does not wait for the window procedure to finish processing the message.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.", "possible_constants": []}, {"name": "Msg", "type": "UINT", "description": "The message to be sent.\nFor lists of the system-provided messages, see System-Defined Messages.", "possible_constants": []}, {"name": "wParam", "type": "WPARAM", "description": "Additional message-specific information.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "Additional message-specific information.", "possible_constants": []}]}, {"name": "SendNotifyMessageW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-sendnotifymessagew", "description": "Sends the specified message to a window or windows. If the window was created by the calling thread, SendNotifyMessage calls the window procedure for the window and does not return until the window procedure has processed the message. If the window was created by a different thread, SendNotifyMessage passes the message to the window procedure and returns immediately; it does not wait for the window procedure to finish processing the message.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.", "possible_constants": []}, {"name": "Msg", "type": "UINT", "description": "The message to be sent.\nFor lists of the system-provided messages, see System-Defined Messages.", "possible_constants": []}, {"name": "wParam", "type": "WPARAM", "description": "Additional message-specific information.", "possible_constants": []}, {"name": "lParam", "type": "LPARAM", "description": "Additional message-specific information.", "possible_constants": []}]}, {"name": "SetActiveWindow", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setactivewindow", "description": "Activates a window. The window must be attached to the calling thread's message queue.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the top-level window to be activated.", "possible_constants": []}]}, {"name": "SetCapture", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setcapture", "description": "Sets the mouse capture to the specified window belonging to the current thread. SetCapture captures mouse input either when the mouse is over the capturing window, or when the mouse button was pressed while the mouse was over the capturing window and the button is still down. Only one window at a time can capture the mouse.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window in the current thread that is to capture the mouse.", "possible_constants": []}]}, {"name": "SetCaretBlinkTime", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setcaretblinktime", "description": "Sets the caret blink time to the specified number of milliseconds. The blink time is the elapsed time, in milliseconds, required to invert the caret's pixels.", "parameters": [{"name": "uMSeconds", "type": "UINT", "description": "The new blink time, in milliseconds.", "possible_constants": []}]}, {"name": "SetCaretPos", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setcaretpos", "description": "Moves the caret to the specified coordinates. If the window that owns the caret was created with the CS_OWNDC class style, then the specified coordinates are subject to the mapping mode of the device context associated with that window.", "parameters": [{"name": "X", "type": "int", "description": "The new x-coordinate of the caret.", "possible_constants": []}, {"name": "Y", "type": "int", "description": "The new y-coordinate of the caret.", "possible_constants": []}]}, {"name": "SetClassLongA", "return_type": "DWORD", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setclasslonga", "description": "Replaces the specified 32-bit (long) value at the specified offset into the extra class memory or the WNDCLASSEX structure for the class to which the specified window belongs.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window and, indirectly, the class to which the window belongs.", "possible_constants": []}, {"name": "nIndex", "type": "int", "description": "The value to be replaced. To set a 32-bit value in the extra class memory, specify the positive, zero-based byte offset of the value to be set. Valid values are in the range zero through the number of bytes of extra class memory, minus four; for example, if you specified 12 or more bytes of extra class memory, a value of 8 would be an index to the third 32-bit integer. To set any other value from the WNDCLASSEX structure, specify one of the following values.", "possible_constants": [["GCL_CBCLSEXTRA", -1], ["GCL_CBWNDEXTRA", -1], ["GCL_HBRBACKGROUND", -1], ["GCL_HCURSOR", -1], ["GCL_HICON", -1], ["GCL_HICONSM", -1], ["GCL_HMODULE", -1], ["GCL_MENUNAME", -1], ["GCL_STYLE", -1], ["GCL_WNDPROC", -1]]}, {"name": "dwNewLong", "type": "LONG", "description": "The replacement value.", "possible_constants": []}]}, {"name": "SetClassLongPtrA", "return_type": "ULONG_PTR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setclasslongptra", "description": "Replaces the specified value at the specified offset in the extra class memory or the WNDCLASSEX structure for the class to which the specified window belongs. Note\u00c2\u00a0\u00c2\u00a0To write code that is compatible with both 32-bit and 64-bit Windows, use SetClassLongPtr. When compiling for 32-bit Windows, SetClassLongPtr is defined as a call to the SetClassLong function", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window and, indirectly, the class to which the window belongs.", "possible_constants": []}, {"name": "nIndex", "type": "int", "description": "The value to be replaced. To set a value in the extra class memory, specify the positive, zero-based byte offset of the value to be set. Valid values are in the range zero through the number of bytes of extra class memory, minus eight; for example, if you specified 24 or more bytes of extra class memory, a value of 16 would be an index to the third integer. To set a value other than the WNDCLASSEX structure, specify one of the following values.", "possible_constants": [["GCL_CBCLSEXTRA", -1], ["GCL_CBWNDEXTRA", -1], ["GCLP_\nHBRBACKGROUND", -1], ["GCLP_HCURSOR", -1], ["GCLP_HICON", -1], ["GCLP_HICONSM", -1], ["GCLP_HMODULE", -1], ["GCLP_MENUNAME", -1], ["GCL_STYLE", -1], ["GCLP_WNDPROC", -1]]}, {"name": "dwNewLong", "type": "LONG_PTR", "description": "The replacement value.", "possible_constants": []}]}, {"name": "SetClassLongPtrW", "return_type": "ULONG_PTR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setclasslongptrw", "description": "Replaces the specified value at the specified offset in the extra class memory or the WNDCLASSEX structure for the class to which the specified window belongs. Note\u00c2\u00a0\u00c2\u00a0To write code that is compatible with both 32-bit and 64-bit Windows, use SetClassLongPtr. When compiling for 32-bit Windows, SetClassLongPtr is defined as a call to the SetClassLong function", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window and, indirectly, the class to which the window belongs.", "possible_constants": []}, {"name": "nIndex", "type": "int", "description": "The value to be replaced. To set a value in the extra class memory, specify the positive, zero-based byte offset of the value to be set. Valid values are in the range zero through the number of bytes of extra class memory, minus eight; for example, if you specified 24 or more bytes of extra class memory, a value of 16 would be an index to the third integer. To set a value other than the WNDCLASSEX structure, specify one of the following values.", "possible_constants": [["GCL_CBCLSEXTRA", -1], ["GCL_CBWNDEXTRA", -1], ["GCLP_\nHBRBACKGROUND", -1], ["GCLP_HCURSOR", -1], ["GCLP_HICON", -1], ["GCLP_HICONSM", -1], ["GCLP_HMODULE", -1], ["GCLP_MENUNAME", -1], ["GCL_STYLE", -1], ["GCLP_WNDPROC", -1]]}, {"name": "dwNewLong", "type": "LONG_PTR", "description": "The replacement value.", "possible_constants": []}]}, {"name": "SetClassLongW", "return_type": "DWORD", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setclasslongw", "description": "Replaces the specified 32-bit (long) value at the specified offset into the extra class memory or the WNDCLASSEX structure for the class to which the specified window belongs.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window and, indirectly, the class to which the window belongs.", "possible_constants": []}, {"name": "nIndex", "type": "int", "description": "The value to be replaced. To set a 32-bit value in the extra class memory, specify the positive, zero-based byte offset of the value to be set. Valid values are in the range zero through the number of bytes of extra class memory, minus four; for example, if you specified 12 or more bytes of extra class memory, a value of 8 would be an index to the third 32-bit integer. To set any other value from the WNDCLASSEX structure, specify one of the following values.", "possible_constants": [["GCL_CBCLSEXTRA", -1], ["GCL_CBWNDEXTRA", -1], ["GCL_HBRBACKGROUND", -1], ["GCL_HCURSOR", -1], ["GCL_HICON", -1], ["GCL_HICONSM", -1], ["GCL_HMODULE", -1], ["GCL_MENUNAME", -1], ["GCL_STYLE", -1], ["GCL_WNDPROC", -1]]}, {"name": "dwNewLong", "type": "LONG", "description": "The replacement value.", "possible_constants": []}]}, {"name": "SetClassWord", "return_type": "WORD", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setclassword", "description": "Replaces the 16-bit (WORD) value at the specified offset into the extra class memory for the window class to which the specified window belongs.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window and, indirectly, the class to which the window belongs.", "possible_constants": []}, {"name": "nIndex", "type": "int", "description": "The zero-based byte offset of the value to be replaced. Valid values are in the range zero through the number of bytes of class memory minus two; for example, if you specified 10 or more bytes of extra class memory, a value of 8 would be an index to the fifth 16-bit integer.", "possible_constants": []}, {"name": "wNewWord", "type": "WORD", "description": "The replacement value.", "possible_constants": []}]}, {"name": "SetClipboardData", "return_type": "HANDLE", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setclipboarddata", "description": "Places data on the clipboard in a specified clipboard format. The window must be the current clipboard owner, and the application must have called the OpenClipboard function. (When responding to the WM_RENDERFORMAT message, the clipboard owner must not call OpenClipboard before calling SetClipboardData.)", "parameters": [{"name": "uFormat", "type": "UINT", "description": "The clipboard format. This parameter can be a registered format or any of the standard clipboard formats. For more information, see Standard Clipboard Formats and Registered Clipboard Formats.", "possible_constants": []}, {"name": "hMem", "type": "HANDLE", "description": "A handle to the data in the specified format. This parameter can be NULL, indicating that the window provides data in the specified clipboard format (renders the format) upon request; this is known as delayed rendering. If a window delays rendering, it must process the WM_RENDERFORMAT and WM_RENDERALLFORMATS messages.\nIf SetClipboardData succeeds, the system owns the object identified by the hMem parameter. The application may not write to or free the data once ownership has been transferred to the system, but it can lock and read from the data until the CloseClipboard function is called. (The memory must be unlocked before the Clipboard is closed.) If the hMem parameter identifies a memory object, the object must have been allocated using the function with the GMEM_MOVEABLE flag.", "possible_constants": []}]}, {"name": "SetClipboardViewer", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setclipboardviewer", "description": "Adds the specified window to the chain of clipboard viewers. Clipboard viewer windows receive a WM_DRAWCLIPBOARD message whenever the content of the clipboard changes. This function is used for backward compatibility with earlier versions of Windows.", "parameters": [{"name": "hWndNewViewer", "type": "HWND", "description": "A handle to the window to be added to the clipboard chain.", "possible_constants": []}]}, {"name": "SetCoalescableTimer", "return_type": "UINT_PTR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setcoalescabletimer", "description": "Creates a timer with the specified time-out value and coalescing tolerance delay.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window to be associated with the timer. This window must be owned by the calling thread. If a NULL value for hWnd is passed in along with an nIDEvent of an existing timer, that timer will be replaced in the same way that an existing non-NULL hWnd timer will be.", "possible_constants": []}, {"name": "nIDEvent", "type": "UINT_PTR", "description": "A timer identifier. If the hWnd parameter is NULL, and the nIDEvent does not match an existing timer, then the nIDEvent is ignored and a new timer ID is generated. If the hWnd parameter is not NULL and the window specified by hWnd already has a timer with the value nIDEvent, then the existing timer is replaced by the new timer. When SetCoalescableTimer replaces a timer, the timer is reset. Therefore, a message will be sent after the current time-out value elapses, but the previously set time-out value is ignored. If the call is not intended to replace an existing timer, nIDEvent should be 0 if the hWnd is NULL.", "possible_constants": []}, {"name": "uElapse", "type": "UINT", "description": "The time-out value, in milliseconds.\nIf uElapse is less than USER_TIMER_MINIMUM (0x0000000A), the timeout is set to USER_TIMER_MINIMUM. If uElapse is greater than USER_TIMER_MAXIMUM (0x7FFFFFFF), the timeout is set to USER_TIMER_MAXIMUM.\nIf the sum of uElapse and uToleranceDelay exceeds USER_TIMER_MAXIMUM, an ERROR_INVALID_PARAMETER exception occurs.", "possible_constants": []}, {"name": "lpTimerFunc", "type": "TIMERPROC", "description": "A pointer to the function to be notified when the time-out value elapses. For more information about the function, see TimerProc. If lpTimerFunc is NULL, the system posts a WM_TIMER message to the application queue. The hwnd member of the message's MSG structure contains the value of the hWnd parameter.", "possible_constants": []}, {"name": "uToleranceDelay", "type": "ULONG", "description": "It can be one of the following values:", "possible_constants": [["TIMERV_DEFAULT_COALESCING", 0], ["TIMERV_NO_COALESCING", 4294967295], ["0x1 - 0x7FFFFFF5", -1], ["Any other value", -1]]}]}, {"name": "SetCursor", "return_type": "HCURSOR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setcursor", "description": "Sets the cursor shape.", "parameters": [{"name": "hCursor", "type": "HCURSOR", "description": "A handle to the cursor. The cursor must have been created by the CreateCursor function or loaded by the LoadCursor or LoadImage function. If this parameter is NULL, the cursor is removed from the screen.", "possible_constants": []}]}, {"name": "SetCursorPos", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setcursorpos", "description": "Moves the cursor to the specified screen coordinates. If the new coordinates are not within the screen rectangle set by the most recent ClipCursor function call, the system automatically adjusts the coordinates so that the cursor stays within the rectangle.", "parameters": [{"name": "X", "type": "int", "description": "The new x-coordinate of the cursor, in screen coordinates.", "possible_constants": []}, {"name": "Y", "type": "int", "description": "The new y-coordinate of the cursor, in screen coordinates.", "possible_constants": []}]}, {"name": "SetDialogControlDpiChangeBehavior", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setdialogcontroldpichangebehavior", "description": "Overrides the default per-monitor DPI scaling behavior of a child window in a dialog.", "parameters": [{"name": "hWnd", "type": "", "description": "A handle for the window whose behavior will be modified.", "possible_constants": []}, {"name": "mask", "type": "", "description": "A mask specifying the subset of flags to be changed.", "possible_constants": []}, {"name": "values", "type": "", "description": "The desired value to be set for the specified subset of flags.", "possible_constants": []}]}, {"name": "SetDialogDpiChangeBehavior", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setdialogdpichangebehavior", "description": "Dialogs in Per-Monitor v2 contexts are automatically DPI scaled. This method lets you customize their DPI change behavior.", "parameters": [{"name": "hDlg", "type": "", "description": "A handle for the dialog whose behavior will be modified.", "possible_constants": []}, {"name": "mask", "type": "", "description": "A mask specifying the subset of flags to be changed.", "possible_constants": []}, {"name": "values", "type": "", "description": "The desired value to be set for the specified subset of flags.", "possible_constants": []}]}, {"name": "SetDisplayAutoRotationPreferences", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setdisplayautorotationpreferences", "description": "Sets the screen auto-rotation preferences for the current process.", "parameters": [{"name": "orientation", "type": "", "description": "Pointer to a location in memory with the screen orientation preferences to set for the calling process.", "possible_constants": []}]}, {"name": "SetDisplayConfig", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setdisplayconfig", "description": "The SetDisplayConfig function modifies the display topology, source, and target modes by exclusively enabling the specified paths in the current session.", "parameters": [{"name": "numPathArrayElements", "type": "", "description": "Number of elements in pathArray.", "possible_constants": []}, {"name": "pathArray", "type": "", "description": "Array of all display paths that are to be set. Only the paths within this array that have the DISPLAYCONFIG_PATH_ACTIVE flag set in the flags member of DISPLAYCONFIG_PATH_INFO are set. This parameter can be NULL. The order in which active paths appear in this array determines the path priority. For more information about path priority order, see Path Priority Order.", "possible_constants": []}, {"name": "numModeInfoArrayElements", "type": "", "description": "Number of elements in modeInfoArray.", "possible_constants": []}, {"name": "modeInfoArray", "type": "", "description": "Array of display source and target mode information (DISPLAYCONFIG_MODE_INFO) that is referenced by the modeInfoIdx member of DISPLAYCONFIG_PATH_SOURCE_INFO and DISPLAYCONFIG_PATH_TARGET_INFO element of path information from pathArray. This parameter can be NULL.", "possible_constants": []}, {"name": "flags", "type": "", "description": "A bitwise OR of flag values that indicates the behavior of this function. This parameter can be one the following values, or a combination of the following values; 0 is not valid.", "possible_constants": []}]}, {"name": "SetDlgItemInt", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setdlgitemint", "description": "Sets the text of a control in a dialog box to the string representation of a specified integer value.", "parameters": [{"name": "hDlg", "type": "HWND", "description": "A handle to the dialog box that contains the control.", "possible_constants": []}, {"name": "nIDDlgItem", "type": "int", "description": "The control to be changed.", "possible_constants": []}, {"name": "uValue", "type": "UINT", "description": "The integer value used to generate the item text.", "possible_constants": []}, {"name": "bSigned", "type": "BOOL", "description": "Indicates whether the uValue parameter is signed or unsigned. If this parameter is TRUE, uValue is signed. If this parameter is TRUE and uValue is less than zero, a minus sign is placed before the first digit in the string. If this parameter is FALSE, uValue is unsigned.", "possible_constants": []}]}, {"name": "SetDlgItemTextA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setdlgitemtexta", "description": "Sets the title or text of a control in a dialog box.", "parameters": [{"name": "hDlg", "type": "HWND", "description": "A handle to the dialog box that contains the control.", "possible_constants": []}, {"name": "nIDDlgItem", "type": "int", "description": "The control with a title or text to be set.", "possible_constants": []}, {"name": "lpString", "type": "LPCTSTR", "description": "The text to be copied to the control.", "possible_constants": []}]}, {"name": "SetDlgItemTextW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setdlgitemtextw", "description": "Sets the title or text of a control in a dialog box.", "parameters": [{"name": "hDlg", "type": "HWND", "description": "A handle to the dialog box that contains the control.", "possible_constants": []}, {"name": "nIDDlgItem", "type": "int", "description": "The control with a title or text to be set.", "possible_constants": []}, {"name": "lpString", "type": "LPCTSTR", "description": "The text to be copied to the control.", "possible_constants": []}]}, {"name": "SetDoubleClickTime", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setdoubleclicktime", "description": "Sets the double-click time for the mouse. A double-click is a series of two clicks of a mouse button, the second occurring within a specified time after the first. The double-click time is the maximum number of milliseconds that may occur between the first and second clicks of a double-click.", "parameters": [{"name": "unnamedParam1", "type": "UINT", "description": "The number of milliseconds that may occur between the first and second clicks of a double-click. If this parameter is set to 0, the system uses the default double-click time of 500 milliseconds. If this parameter value is greater than 5000 milliseconds, the system sets the value to 5000 milliseconds.", "possible_constants": []}]}, {"name": "SetFocus", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setfocus", "description": "Sets the keyboard focus to the specified window. The window must be attached to the calling thread's message queue.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window that will receive the keyboard input. If this parameter is NULL, keystrokes are ignored.", "possible_constants": []}]}, {"name": "SetForegroundWindow", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setforegroundwindow", "description": "Brings the thread that created the specified window into the foreground and activates the window. Keyboard input is directed to the window, and various visual cues are changed for the user. The system assigns a slightly higher priority to the thread that created the foreground window than it does to other threads.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window that should be activated and brought to the foreground.", "possible_constants": []}]}, {"name": "SetGestureConfig", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setgestureconfig", "description": "Configures the messages that are sent from a window for Windows Touch gestures.", "parameters": [{"name": "hwnd", "type": "", "description": "A handle to the window to set the gesture configuration on.", "possible_constants": []}, {"name": "dwReserved", "type": "", "description": "This value is reserved and must be set to 0.", "possible_constants": []}, {"name": "cIDs", "type": "", "description": "A count of the gesture configuration structures that are being passed.", "possible_constants": []}, {"name": "pGestureConfig", "type": "", "description": "An array of gesture configuration structures that specify the gesture configuration.", "possible_constants": []}, {"name": "cbSize", "type": "", "description": "The size of the gesture configuration (GESTURECONFIG) structure.", "possible_constants": []}]}, {"name": "SetKeyboardState", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setkeyboardstate", "description": "Copies an array of keyboard key states into the calling thread's keyboard input-state table. This is the same table accessed by the GetKeyboardState and GetKeyState functions. Changes made to this table do not affect keyboard input to any other thread.", "parameters": [{"name": "lpKeyState", "type": "LPBYTE", "description": "A pointer to a 256-byte array that contains keyboard key states.", "possible_constants": []}]}, {"name": "SetLastErrorEx", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setlasterrorex", "description": "Sets the last-error code.", "parameters": [{"name": "dwErrCode", "type": "", "description": "The last-error code for the thread.", "possible_constants": []}, {"name": "dwType", "type": "", "description": "This parameter is ignored.", "possible_constants": []}]}, {"name": "SetLayeredWindowAttributes", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setlayeredwindowattributes", "description": "Sets the opacity and transparency color key of a layered window.", "parameters": [{"name": "hwnd", "type": "HWND", "description": "A handle to the layered window. A layered window is created by specifying WS_EX_LAYERED when creating the window with the CreateWindowEx function or by setting WS_EX_LAYERED via SetWindowLong after the window has been created.\nWindows\u00c2\u00a08:\u00c2\u00a0\u00c2\u00a0The WS_EX_LAYERED style is supported for top-level windows and child windows. Previous Windows versions support WS_EX_LAYERED only for top-level windows.", "possible_constants": []}, {"name": "crKey", "type": "COLORREF", "description": "A COLORREF structure that specifies the transparency color key to be used when composing the layered window. All pixels painted by the window in this color will be transparent. To generate a COLORREF, use the RGB macro.", "possible_constants": []}, {"name": "bAlpha", "type": "BYTE", "description": "Alpha value used to describe the opacity of the layered window. Similar to the SourceConstantAlpha member of the BLENDFUNCTION structure. When bAlpha is 0, the window is completely transparent. When bAlpha is 255, the window is opaque.", "possible_constants": []}, {"name": "dwFlags", "type": "DWORD", "description": "An action to be taken. This parameter can be one or more of the following values.", "possible_constants": [["LWA_ALPHA", 2], ["LWA_COLORKEY", 1]]}]}, {"name": "SetMenu", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setmenu", "description": "Assigns a new menu to the specified window.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window to which the menu is to be assigned.", "possible_constants": []}, {"name": "hMenu", "type": "HMENU", "description": "A handle to the new menu. If this parameter is NULL, the window's current menu is removed.", "possible_constants": []}]}, {"name": "SetMenuContextHelpId", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setmenucontexthelpid", "description": "Associates a Help context identifier with a menu.", "parameters": [{"name": "unnamedParam1", "type": "HMENU", "description": "A handle to the menu with which to associate the Help context identifier.", "possible_constants": []}, {"name": "unnamedParam2", "type": "DWORD", "description": "The help context identifier.", "possible_constants": []}]}, {"name": "SetMenuDefaultItem", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setmenudefaultitem", "description": "Sets the default menu item for the specified menu.", "parameters": [{"name": "hMenu", "type": "HMENU", "description": "A handle to the menu to set the default item for.", "possible_constants": []}, {"name": "uItem", "type": "UINT", "description": "The identifier or position of the new default menu item or -1 for no default item. The meaning of this parameter depends on the value of\nfByPos.", "possible_constants": []}, {"name": "fByPos", "type": "UINT", "description": "The meaning of uItem. If this parameter is FALSE, uItem is a menu item identifier. Otherwise, it is a menu item position. See About Menus for more information.", "possible_constants": []}]}, {"name": "SetMenuInfo", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setmenuinfo", "description": "Sets information for a specified menu.", "parameters": [{"name": "unnamedParam1", "type": "HMENU", "description": "A handle to a menu.", "possible_constants": []}, {"name": "unnamedParam2", "type": "LPCMENUINFO", "description": "A pointer to a MENUINFO structure for the menu.", "possible_constants": []}]}, {"name": "SetMenuItemBitmaps", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setmenuitembitmaps", "description": "Associates the specified bitmap with a menu item. Whether the menu item is selected or clear, the system displays the appropriate bitmap next to the menu item.", "parameters": [{"name": "hMenu", "type": "HMENU", "description": "A handle to the menu containing the item to receive new check-mark bitmaps.", "possible_constants": []}, {"name": "uPosition", "type": "UINT", "description": "The menu item to be changed, as determined by the uFlags parameter.", "possible_constants": []}, {"name": "uFlags", "type": "UINT", "description": "Specifies how the uPosition parameter is to be interpreted. The uFlags parameter must be one of the following values.", "possible_constants": [["MF_BYCOMMAND", 0], ["MF_BYPOSITION", 1024]]}, {"name": "hBitmapUnchecked", "type": "HBITMAP", "description": "A handle to the bitmap displayed when the menu item is not selected.", "possible_constants": []}, {"name": "hBitmapChecked", "type": "HBITMAP", "description": "A handle to the bitmap displayed when the menu item is selected.", "possible_constants": []}]}, {"name": "SetMenuItemInfoA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setmenuiteminfoa", "description": "Changes information about a menu item.", "parameters": [{"name": "hmenu", "type": "HMENU", "description": "A handle to the menu that contains the menu item.", "possible_constants": []}, {"name": "item", "type": "UINT", "description": "The identifier or position of the menu item to change. The meaning of this parameter depends on the value of fByPosition.", "possible_constants": []}, {"name": "fByPositon", "type": "BOOL", "description": "The meaning of uItem. If this parameter is FALSE, uItem is a menu item identifier. Otherwise, it is a menu item position. See About Menus for more information.", "possible_constants": []}, {"name": "lpmii", "type": "LPMENUITEMINFO", "description": "A pointer to a MENUITEMINFO structure that contains information about the menu item and specifies which menu item attributes to change.", "possible_constants": []}]}, {"name": "SetMenuItemInfoW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setmenuiteminfow", "description": "Changes information about a menu item.", "parameters": [{"name": "hmenu", "type": "HMENU", "description": "A handle to the menu that contains the menu item.", "possible_constants": []}, {"name": "item", "type": "UINT", "description": "The identifier or position of the menu item to change. The meaning of this parameter depends on the value of fByPosition.", "possible_constants": []}, {"name": "fByPositon", "type": "BOOL", "description": "The meaning of uItem. If this parameter is FALSE, uItem is a menu item identifier. Otherwise, it is a menu item position. See About Menus for more information.", "possible_constants": []}, {"name": "lpmii", "type": "LPMENUITEMINFO", "description": "A pointer to a MENUITEMINFO structure that contains information about the menu item and specifies which menu item attributes to change.", "possible_constants": []}]}, {"name": "SetMessageExtraInfo", "return_type": "LPARAM", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setmessageextrainfo", "description": "Sets the extra message information for the current thread. Extra message information is an application- or driver-defined value associated with the current thread's message queue. An application can use the GetMessageExtraInfo function to retrieve a thread's extra message information.", "parameters": [{"name": "lParam", "type": "LPARAM", "description": "The value to be associated with the current thread.", "possible_constants": []}]}, {"name": "SetParent", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setparent", "description": "Changes the parent window of the specified child window.", "parameters": [{"name": "hWndChild", "type": "HWND", "description": "A handle to the child window.", "possible_constants": []}, {"name": "hWndNewParent", "type": "HWND", "description": "A handle to the new parent window. If this parameter is NULL, the desktop window becomes the new parent window.\nIf this parameter is HWND_MESSAGE, the child window becomes a message-only window.", "possible_constants": []}]}, {"name": "SetPhysicalCursorPos", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setphysicalcursorpos", "description": "Sets the position of the cursor in physical coordinates.", "parameters": [{"name": "X", "type": "int", "description": "The new x-coordinate of the cursor, in physical coordinates.", "possible_constants": []}, {"name": "Y", "type": "int", "description": "The new y-coordinate of the cursor, in physical coordinates.", "possible_constants": []}]}, {"name": "SetProcessDefaultLayout", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setprocessdefaultlayout", "description": "Changes the default layout when windows are created with no parent or owner only for the currently running process.", "parameters": [{"name": "dwDefaultLayout", "type": "DWORD", "description": "The default process layout. This parameter can be 0 or the following value.", "possible_constants": [["LAYOUT_RTL", 1]]}]}, {"name": "SetProcessDPIAware", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setprocessdpiaware", "description": "Type: BOOL", "parameters": []}, {"name": "SetProcessDpiAwarenessContext", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setprocessdpiawarenesscontext", "description": "It is recommended that you set the process-default DPI awareness via application manifest. See Setting the default DPI awareness for a process for more information. Setting the process-default DPI awareness via API call can lead to unexpected application behavior.", "parameters": [{"name": "value", "type": "", "description": "A DPI_AWARENESS_CONTEXT handle to set.", "possible_constants": []}]}, {"name": "SetProcessRestrictionExemption", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setprocessrestrictionexemption", "description": "Exempts the calling process from restrictions preventing desktop processes from interacting with the Windows Store app environment. This function is used by development and debugging tools.", "parameters": [{"name": "fEnableExemption", "type": "", "description": "When set to TRUE, indicates a request to disable exemption for the calling process.", "possible_constants": []}]}, {"name": "SetProcessWindowStation", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setprocesswindowstation", "description": "Assigns the specified window station to the calling process. This enables the process to access objects in the window station such as desktops, the clipboard, and global atoms. All subsequent operations on the window station use the access rights granted to hWinSta.", "parameters": [{"name": "hWinSta", "type": "", "description": "A handle to the window station. This can be a handle returned by the\nCreateWindowStation,\nOpenWindowStation, or\nGetProcessWindowStation function.\nThis window station must be associated with the current session.", "possible_constants": []}]}, {"name": "SetPropA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setpropa", "description": "Adds a new entry or changes an existing entry in the property list of the specified window. The function adds a new entry to the list if the specified character string does not exist already in the list. The new entry contains the string and the handle. Otherwise, the function replaces the string's current handle with the specified handle.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window whose property list receives the new entry.", "possible_constants": []}, {"name": "lpString", "type": "LPCTSTR", "description": "A null-terminated string or an atom that identifies a string. If this parameter is an atom, it must be a global atom created by a previous call to the GlobalAddAtom function. The atom must be placed in the low-order word of lpString; the high-order word must be zero.", "possible_constants": []}, {"name": "hData", "type": "HANDLE", "description": "A handle to the data to be copied to the property list. The data handle can identify any value useful to the application.", "possible_constants": []}]}, {"name": "SetPropW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setpropw", "description": "Adds a new entry or changes an existing entry in the property list of the specified window. The function adds a new entry to the list if the specified character string does not exist already in the list. The new entry contains the string and the handle. Otherwise, the function replaces the string's current handle with the specified handle.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window whose property list receives the new entry.", "possible_constants": []}, {"name": "lpString", "type": "LPCTSTR", "description": "A null-terminated string or an atom that identifies a string. If this parameter is an atom, it must be a global atom created by a previous call to the GlobalAddAtom function. The atom must be placed in the low-order word of lpString; the high-order word must be zero.", "possible_constants": []}, {"name": "hData", "type": "HANDLE", "description": "A handle to the data to be copied to the property list. The data handle can identify any value useful to the application.", "possible_constants": []}]}, {"name": "SetRect", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setrect", "description": "The SetRect function sets the coordinates of the specified rectangle. This is equivalent to assigning the left, top, right, and bottom arguments to the appropriate members of the RECT structure.", "parameters": [{"name": "lprc", "type": "", "description": "Pointer to the RECT structure that contains the rectangle to be set.", "possible_constants": []}, {"name": "xLeft", "type": "", "description": "Specifies the x-coordinate of the rectangle's upper-left corner.", "possible_constants": []}, {"name": "yTop", "type": "", "description": "Specifies the y-coordinate of the rectangle's upper-left corner.", "possible_constants": []}, {"name": "xRight", "type": "", "description": "Specifies the x-coordinate of the rectangle's lower-right corner.", "possible_constants": []}, {"name": "yBottom", "type": "", "description": "Specifies the y-coordinate of the rectangle's lower-right corner.", "possible_constants": []}]}, {"name": "SetRectEmpty", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setrectempty", "description": "The SetRectEmpty function creates an empty rectangle in which all coordinates are set to zero.", "parameters": [{"name": "lprc", "type": "", "description": "Pointer to the RECT structure that contains the coordinates of the rectangle.", "possible_constants": []}]}, {"name": "SetScrollInfo", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setscrollinfo", "description": "The SetScrollInfo function sets the parameters of a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box (thumb). The function also redraws the scroll bar, if requested.", "parameters": [{"name": "hwnd", "type": "HWND", "description": "Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the\nfnBar parameter.", "possible_constants": []}, {"name": "nBar", "type": "int", "description": "Specifies the type of scroll bar for which to set parameters. This parameter can be one of the following values.", "possible_constants": [["SB_CTL", -1], ["SB_HORZ", -1], ["SB_VERT", -1]]}, {"name": "lpsi", "type": "LPCSCROLLINFO", "description": "Pointer to a SCROLLINFO structure. Before calling SetScrollInfo, set the\ncbSize member of the structure to\nsizeof(SCROLLINFO), set the\nfMask member to indicate the parameters to set, and specify the new parameter values in the appropriate members.\nThe\nfMask member can be one or more of the following values.", "possible_constants": [["SIF_DISABLENOSCROLL", -1], ["SIF_PAGE", -1], ["SIF_POS", -1], ["SIF_RANGE", -1]]}, {"name": "redraw", "type": "BOOL", "description": "Specifies whether the scroll bar is redrawn to reflect the changes to the scroll bar. If this parameter is TRUE, the scroll bar is redrawn, otherwise, it is not redrawn.", "possible_constants": []}]}, {"name": "SetScrollPos", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setscrollpos", "description": "The SetScrollPos function sets the position of the scroll box (thumb) in the specified scroll bar and, if requested, redraws the scroll bar to reflect the new position of the scroll box.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the nBar parameter.", "possible_constants": []}, {"name": "nBar", "type": "int", "description": "Specifies the scroll bar to be set. This parameter can be one of the following values.", "possible_constants": [["SB_CTL", -1], ["SB_HORZ", -1], ["SB_VERT", -1]]}, {"name": "nPos", "type": "int", "description": "Specifies the new position of the scroll box. The position must be within the scrolling range. For more information about the scrolling range, see the SetScrollRange function.", "possible_constants": []}, {"name": "bRedraw", "type": "BOOL", "description": "Specifies whether the scroll bar is redrawn to reflect the new scroll box position. If this parameter is TRUE, the scroll bar is redrawn. If it is FALSE, the scroll bar is not redrawn.", "possible_constants": []}]}, {"name": "SetScrollRange", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setscrollrange", "description": "The SetScrollRange function sets the minimum and maximum scroll box positions for the specified scroll bar.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the\nnBar parameter.", "possible_constants": []}, {"name": "nBar", "type": "int", "description": "Specifies the scroll bar to be set. This parameter can be one of the following values.", "possible_constants": [["SB_CTL", -1], ["SB_HORZ", -1], ["SB_VERT", -1]]}, {"name": "nMinPos", "type": "int", "description": "Specifies the minimum scrolling position.", "possible_constants": []}, {"name": "nMaxPos", "type": "int", "description": "Specifies the maximum scrolling position.", "possible_constants": []}, {"name": "bRedraw", "type": "BOOL", "description": "Specifies whether the scroll bar should be redrawn to reflect the change. If this parameter is TRUE, the scroll bar is redrawn. If it is FALSE, the scroll bar is not redrawn.", "possible_constants": []}]}, {"name": "SetSysColors", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setsyscolors", "description": "Sets the colors for the specified display elements. Display elements are the various parts of a window and the display that appear on the system display screen.", "parameters": [{"name": "cElements", "type": "int", "description": "The number of display elements in the lpaElements array.", "possible_constants": []}, {"name": "lpaElements", "type": "const INT*", "description": "An array of integers that specify the display elements to be changed. For a list of display elements, see\nGetSysColor.", "possible_constants": []}, {"name": "lpaRgbValues", "type": "const COLORREF*", "description": "An array of\nCOLORREF values that contain the new red, green, blue (RGB) color values for the display elements in the array pointed to by the lpaElements parameter.\nTo generate a\nCOLORREF, use the\nRGB macro.", "possible_constants": []}]}, {"name": "SetSystemCursor", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setsystemcursor", "description": "Enables an application to customize the system cursors. It replaces the contents of the system cursor specified by the id parameter with the contents of the cursor specified by the hcur parameter and then destroys hcur.", "parameters": [{"name": "hcur", "type": "HCURSOR", "description": "A handle to the cursor. The function replaces the contents of the system cursor specified by id with the contents of the cursor handled by hcur.\nThe system destroys hcur by calling the DestroyCursor function. Therefore, hcur cannot be a cursor loaded using the LoadCursor function. To specify a cursor loaded from a resource, copy the cursor using the CopyCursor function, then pass the copy to SetSystemCursor.", "possible_constants": []}, {"name": "id", "type": "DWORD", "description": "The system cursor to replace with the contents of hcur. This parameter can be one of the following values.", "possible_constants": [["OCR_APPSTARTING", -1], ["OCR_NORMAL", -1], ["OCR_CROSS", -1], ["OCR_HAND", -1], ["OCR_HELP", -1], ["OCR_IBEAM", -1], ["OCR_NO", -1], ["OCR_SIZEALL", -1], ["OCR_SIZENESW", -1], ["OCR_SIZENS", -1], ["OCR_SIZENWSE", -1], ["OCR_SIZEWE", -1], ["OCR_UP", -1], ["OCR_WAIT", -1]]}]}, {"name": "SetThreadDesktop", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setthreaddesktop", "description": "Assigns the specified desktop to the calling thread. All subsequent operations on the desktop use the access rights granted to the desktop.", "parameters": [{"name": "hDesktop", "type": "", "description": "A handle to the desktop to be assigned to the calling thread. This handle is returned by the\nCreateDesktop,\nGetThreadDesktop, OpenDesktop, or\nOpenInputDesktop function.\nThis desktop must be associated with the current window station for the process.", "possible_constants": []}]}, {"name": "SetThreadDpiAwarenessContext", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setthreaddpiawarenesscontext", "description": "Set the DPI awareness for the current thread to the provided value.", "parameters": [{"name": "dpiContext", "type": "", "description": "The new DPI_AWARENESS_CONTEXT for the current thread. This context includes the DPI_AWARENESS value.", "possible_constants": []}]}, {"name": "SetThreadDpiHostingBehavior", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setthreaddpihostingbehavior", "description": "Sets the thread's DPI_HOSTING_BEHAVIOR. This behavior allows windows created in the thread to host child windows with a different DPI_AWARENESS_CONTEXT.", "parameters": [{"name": "value", "type": "", "description": "The new DPI_HOSTING_BEHAVIOR value for the current thread.", "possible_constants": []}]}, {"name": "SetTimer", "return_type": "UINT_PTR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-settimer", "description": "Creates a timer with the specified time-out value.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window to be associated with the timer. This window must be owned by the calling thread. If a NULL value for hWnd is passed in along with an nIDEvent of an existing timer, that timer will be replaced in the same way that an existing non-NULL hWnd timer will be.", "possible_constants": []}, {"name": "nIDEvent", "type": "UINT_PTR", "description": "A nonzero timer identifier. If the hWnd parameter is NULL, and the nIDEvent does not match an existing timer then it is ignored and a new timer ID is generated. If the hWnd parameter is not NULL and the window specified by hWnd already has a timer with the value nIDEvent, then the existing timer is replaced by the new timer. When SetTimer replaces a timer, the timer is reset. Therefore, a message will be sent after the current time-out value elapses, but the previously set time-out value is ignored. If the call is not intended to replace an existing timer, nIDEvent should be 0 if the hWnd is NULL.", "possible_constants": []}, {"name": "uElapse", "type": "UINT", "description": "The time-out value, in milliseconds.\nIf uElapse is less than USER_TIMER_MINIMUM (0x0000000A), the timeout is set to USER_TIMER_MINIMUM. If uElapse is greater than USER_TIMER_MAXIMUM (0x7FFFFFFF), the timeout is set to USER_TIMER_MAXIMUM.", "possible_constants": []}, {"name": "lpTimerFunc", "type": "TIMERPROC", "description": "A pointer to the function to be notified when the time-out value elapses. For more information about the function, see TimerProc. If lpTimerFunc is NULL, the system posts a WM_TIMER message to the application queue. The hwnd member of the message's MSG structure contains the value of the hWnd parameter.", "possible_constants": []}]}, {"name": "SetUserObjectInformationA", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setuserobjectinformationa", "description": "Sets information about the specified window station or desktop object.", "parameters": [{"name": "hObj", "type": "", "description": "A handle to the window station, desktop object or a current process pseudo handle. This handle can be returned by the  CreateWindowStation,\nOpenWindowStation,\nCreateDesktop, OpenDesktop or  GetCurrentProcess function.", "possible_constants": []}, {"name": "nIndex", "type": "", "description": "The object information to be set. This parameter can be the following value.", "possible_constants": [["UOI_FLAGS", -1], ["UOI_TIMERPROC_EXCEPTION_SUPPRESSION", -1]]}, {"name": "pvInfo", "type": "", "description": "A pointer to a buffer containing the object information, or a BOOL.", "possible_constants": []}, {"name": "nLength", "type": "", "description": "The size of the information contained in the buffer pointed to by pvInfo, in bytes.", "possible_constants": []}]}, {"name": "SetUserObjectInformationW", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setuserobjectinformationw", "description": "Sets information about the specified window station or desktop object.", "parameters": [{"name": "hObj", "type": "", "description": "A handle to the window station, desktop object or a current process pseudo handle. This handle can be returned by the  CreateWindowStation,\nOpenWindowStation,\nCreateDesktop, OpenDesktop or  GetCurrentProcess function.", "possible_constants": []}, {"name": "nIndex", "type": "", "description": "The object information to be set. This parameter can be the following value.", "possible_constants": [["UOI_FLAGS", -1], ["UOI_TIMERPROC_EXCEPTION_SUPPRESSION", -1]]}, {"name": "pvInfo", "type": "", "description": "A pointer to a buffer containing the object information, or a BOOL.", "possible_constants": []}, {"name": "nLength", "type": "", "description": "The size of the information contained in the buffer pointed to by pvInfo, in bytes.", "possible_constants": []}]}, {"name": "SetUserObjectSecurity", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setuserobjectsecurity", "description": "The SetUserObjectSecurity function sets the security of a user object. This can be, for example, a window or a DDE conversation.", "parameters": [{"name": "hObj", "type": "", "description": "A handle to a user object for which security information is set.", "possible_constants": []}, {"name": "pSIRequested", "type": "", "description": "A pointer to a value that indicates the components of the security descriptor to set. This parameter can be a combination of the following values.", "possible_constants": [["DACL_SECURITY_INFORMATION", -1], ["GROUP_SECURITY_INFORMATION", -1], ["OWNER_SECURITY_INFORMATION", -1], ["SACL_SECURITY_INFORMATION", -1]]}, {"name": "pSID", "type": "", "description": "A pointer to a\nSECURITY_DESCRIPTOR structure that contains the new security information.\nThis buffer must be aligned on a 4-byte boundary.", "possible_constants": []}]}, {"name": "SetWindowContextHelpId", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowcontexthelpid", "description": "Associates a Help context identifier with the specified window.", "parameters": [{"name": "unnamedParam1", "type": "HWND", "description": "A handle to the window with which to associate the Help context identifier.", "possible_constants": []}, {"name": "unnamedParam2", "type": "DWORD", "description": "The Help context identifier.", "possible_constants": []}]}, {"name": "SetWindowDisplayAffinity", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowdisplayaffinity", "description": "Specifies where the content of the window can be displayed.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the top-level window. The window must belong to the current process.", "possible_constants": []}, {"name": "dwAffinity", "type": "DWORD", "description": "The display affinity setting that specifies where the content of the window can be displayed.\nThis parameter can be one of the following values.", "possible_constants": [["WDA_NONE", 0], ["WDA_MONITOR", 1], ["WDA_EXCLUDEFROMCAPTURE", 17]]}]}, {"name": "SetWindowFeedbackSetting", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowfeedbacksetting", "description": "Sets the feedback configuration for a window.", "parameters": [{"name": "hwnd", "type": "", "description": "The window to configure feedback on.", "possible_constants": []}, {"name": "feedback", "type": "", "description": "One of the values from the FEEDBACK_TYPE enumeration.", "possible_constants": []}, {"name": "dwFlags", "type": "", "description": "Reserved. Must be 0.", "possible_constants": []}, {"name": "size", "type": "", "description": "The size, in bytes, of the configuration data. Must be sizeof(BOOL) or 0 if the feedback setting is being reset.", "possible_constants": []}, {"name": "configuration", "type": "", "description": "The configuration data. Must be BOOL or NULL if the feedback setting is being reset.", "possible_constants": []}]}, {"name": "SetWindowLongA", "return_type": "LONG", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowlonga", "description": "Changes an attribute of the specified window. The function also sets the 32-bit (long) value at the specified offset into the extra window memory.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window and, indirectly, the class to which the window belongs.", "possible_constants": []}, {"name": "nIndex", "type": "int", "description": "The zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer. To set any other value, specify one of the following values.\nThe following values are also available when the hWnd parameter identifies a dialog box.", "possible_constants": [["GWL_EXSTYLE", -1], ["GWL_HINSTANCE", -1], ["GWL_ID", -1], ["GWL_STYLE", -1], ["GWL_USERDATA", -1], ["GWL_WNDPROC", -1], ["DWL_DLGPROC", -1], ["DWL_MSGRESULT", -1], ["DWL_USER", -1]]}, {"name": "dwNewLong", "type": "LONG", "description": "The replacement value.", "possible_constants": []}]}, {"name": "SetWindowLongPtrA", "return_type": "LONG_PTR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowlongptra", "description": "Changes an attribute of the specified window. The function also sets a value at the specified offset in the extra window memory. Note\u00c2\u00a0\u00c2\u00a0To write code that is compatible with both 32-bit and 64-bit versions of Windows, use SetWindowLongPtr. When compiling for 32-bit Windows, SetWindowLongPtr is defined as a call to the SetWindowLong function.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window and, indirectly, the class to which the window belongs. The SetWindowLongPtr function fails if the process that owns the window specified by the hWnd parameter is at a higher process privilege in the UIPI hierarchy than the process the calling thread resides in.\nWindows\u00c2\u00a0XP/2000:\u00c2\u00a0\u00c2\u00a0 The SetWindowLongPtr function fails if the window specified by the hWnd parameter does not belong to the same process as the calling thread.", "possible_constants": []}, {"name": "nIndex", "type": "int", "description": "The zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of a LONG_PTR. To set any other value, specify one of the following values.\nThe following values are also available when the hWnd parameter identifies a dialog box.", "possible_constants": [["GWL_EXSTYLE", -1], ["GWLP_HINSTANCE", -1], ["GWLP_ID", -1], ["GWL_STYLE", -1], ["GWLP_USERDATA", -1], ["GWLP_WNDPROC", -1], ["DWLP_DLGPROC", -1], ["DWLP_MSGRESULT", -1], ["DWLP_USER", -1]]}, {"name": "dwNewLong", "type": "LONG_PTR", "description": "The replacement value.", "possible_constants": []}]}, {"name": "SetWindowLongPtrW", "return_type": "LONG_PTR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowlongptrw", "description": "Changes an attribute of the specified window. The function also sets a value at the specified offset in the extra window memory. Note\u00c2\u00a0\u00c2\u00a0To write code that is compatible with both 32-bit and 64-bit versions of Windows, use SetWindowLongPtr. When compiling for 32-bit Windows, SetWindowLongPtr is defined as a call to the SetWindowLong function.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window and, indirectly, the class to which the window belongs. The SetWindowLongPtr function fails if the process that owns the window specified by the hWnd parameter is at a higher process privilege in the UIPI hierarchy than the process the calling thread resides in.\nWindows\u00c2\u00a0XP/2000:\u00c2\u00a0\u00c2\u00a0 The SetWindowLongPtr function fails if the window specified by the hWnd parameter does not belong to the same process as the calling thread.", "possible_constants": []}, {"name": "nIndex", "type": "int", "description": "The zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of a LONG_PTR. To set any other value, specify one of the following values.\nThe following values are also available when the hWnd parameter identifies a dialog box.", "possible_constants": [["GWL_EXSTYLE", -1], ["GWLP_HINSTANCE", -1], ["GWLP_ID", -1], ["GWL_STYLE", -1], ["GWLP_USERDATA", -1], ["GWLP_WNDPROC", -1], ["DWLP_DLGPROC", -1], ["DWLP_MSGRESULT", -1], ["DWLP_USER", -1]]}, {"name": "dwNewLong", "type": "LONG_PTR", "description": "The replacement value.", "possible_constants": []}]}, {"name": "SetWindowLongW", "return_type": "LONG", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowlongw", "description": "Changes an attribute of the specified window. The function also sets the 32-bit (long) value at the specified offset into the extra window memory.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window and, indirectly, the class to which the window belongs.", "possible_constants": []}, {"name": "nIndex", "type": "int", "description": "The zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer. To set any other value, specify one of the following values.\nThe following values are also available when the hWnd parameter identifies a dialog box.", "possible_constants": [["GWL_EXSTYLE", -1], ["GWL_HINSTANCE", -1], ["GWL_ID", -1], ["GWL_STYLE", -1], ["GWL_USERDATA", -1], ["GWL_WNDPROC", -1], ["DWL_DLGPROC", -1], ["DWL_MSGRESULT", -1], ["DWL_USER", -1]]}, {"name": "dwNewLong", "type": "LONG", "description": "The replacement value.", "possible_constants": []}]}, {"name": "SetWindowPlacement", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowplacement", "description": "Sets the show state and the restored, minimized, and maximized positions of the specified window.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window.", "possible_constants": []}, {"name": "lpwndpl", "type": "const WINDOWPLACEMENT*", "description": "A pointer to a WINDOWPLACEMENT structure that specifies the new show state and window positions.\nBefore calling SetWindowPlacement, set the length member of the WINDOWPLACEMENT structure to sizeof(WINDOWPLACEMENT). SetWindowPlacement fails if the length member is not set correctly.", "possible_constants": []}]}, {"name": "SetWindowPos", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowpos", "description": "Changes the size, position, and Z order of a child, pop-up, or top-level window. These windows are ordered according to their appearance on the screen. The topmost window receives the highest rank and is the first window in the Z order.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window.", "possible_constants": []}, {"name": "hWndInsertAfter", "type": "HWND", "description": "A handle to the window to precede the positioned window in the Z order. This parameter must be a window handle or one of the following values.\nFor more information about how this parameter is used, see the following Remarks section.", "possible_constants": [["HWND_BOTTOM", -1], ["HWND_NOTOPMOST", -1], ["HWND_TOP", -1], ["HWND_TOPMOST", -1]]}, {"name": "X", "type": "int", "description": "The new position of the left side of the window, in client coordinates.", "possible_constants": []}, {"name": "Y", "type": "int", "description": "The new position of the top of the window, in client coordinates.", "possible_constants": []}, {"name": "cx", "type": "int", "description": "The new width of the window, in pixels.", "possible_constants": []}, {"name": "cy", "type": "int", "description": "The new height of the window, in pixels.", "possible_constants": []}, {"name": "uFlags", "type": "UINT", "description": "The window sizing and positioning flags. This parameter can be a combination of the following values.", "possible_constants": [["SWP_ASYNCWINDOWPOS", 16384], ["SWP_DEFERERASE", 8192], ["SWP_DRAWFRAME", 32], ["SWP_FRAMECHANGED", 32], ["SWP_HIDEWINDOW", 128], ["SWP_NOACTIVATE", 16], ["SWP_NOCOPYBITS", 256], ["SWP_NOMOVE", 2], ["SWP_NOOWNERZORDER", 512], ["SWP_NOREDRAW", 8], ["SWP_NOREPOSITION", 512], ["SWP_NOSENDCHANGING", 1024], ["SWP_NOSIZE", 1], ["SWP_NOZORDER", 4], ["SWP_SHOWWINDOW", 64]]}]}, {"name": "SetWindowRgn", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowrgn", "description": "The SetWindowRgn function sets the window region of a window. The window region determines the area within the window where the system permits drawing. The system does not display any portion of a window that lies outside of the window region", "parameters": [{"name": "hWnd", "type": "", "description": "A handle to the window whose window region is to be set.", "possible_constants": []}, {"name": "hRgn", "type": "", "description": "A handle to a region. The function sets the window region of the window to this region.\nIf hRgn is NULL, the function sets the window region to NULL.", "possible_constants": []}, {"name": "bRedraw", "type": "", "description": "Specifies whether the system redraws the window after setting the window region. If bRedraw is TRUE, the system does so; otherwise, it does not.\nTypically, you set bRedraw to TRUE if the window is visible.", "possible_constants": []}]}, {"name": "SetWindowsHookExA", "return_type": "HHOOK", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowshookexa", "description": "Installs an application-defined hook procedure into a hook chain. You would install a hook procedure to monitor the system for certain types of events. These events are associated either with a specific thread or with all threads in the same desktop as the calling thread.", "parameters": [{"name": "idHook", "type": "int", "description": "The type of hook procedure to be installed. This parameter can be one of the following values.", "possible_constants": [["WH_CALLWNDPROC", -1], ["WH_CALLWNDPROCRET", -1], ["WH_CBT", -1], ["WH_DEBUG", -1], ["WH_FOREGROUNDIDLE", -1], ["WH_GETMESSAGE", -1], ["WH_JOURNALPLAYBACK", -1], ["WH_JOURNALRECORD", -1], ["WH_KEYBOARD", -1], ["WH_KEYBOARD_LL", -1], ["WH_MOUSE", -1], ["WH_MOUSE_LL", -1], ["WH_MSGFILTER", -1], ["WH_SHELL", -1], ["WH_SYSMSGFILTER", -1]]}, {"name": "lpfn", "type": "HOOKPROC", "description": "A pointer to the hook procedure. If the dwThreadId parameter is zero or specifies the identifier of a thread created by a different process, the lpfn parameter must point to a hook procedure in a DLL. Otherwise, lpfn can point to a hook procedure in the code associated with the current process.", "possible_constants": []}, {"name": "hmod", "type": "HINSTANCE", "description": "A handle to the DLL containing the hook procedure pointed to by the lpfn parameter. The hMod parameter must be set to NULL if the dwThreadId parameter specifies a thread created by the current process and if the hook procedure is within the code associated with the current process.", "possible_constants": []}, {"name": "dwThreadId", "type": "DWORD", "description": "The identifier of the thread with which the hook procedure is to be associated. For desktop apps, if this parameter is zero, the hook procedure is associated with all existing threads running in the same desktop as the calling thread. For Windows Store apps, see the Remarks section.", "possible_constants": []}]}, {"name": "SetWindowsHookExW", "return_type": "HHOOK", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowshookexw", "description": "Installs an application-defined hook procedure into a hook chain. You would install a hook procedure to monitor the system for certain types of events. These events are associated either with a specific thread or with all threads in the same desktop as the calling thread.", "parameters": [{"name": "idHook", "type": "int", "description": "The type of hook procedure to be installed. This parameter can be one of the following values.", "possible_constants": [["WH_CALLWNDPROC", -1], ["WH_CALLWNDPROCRET", -1], ["WH_CBT", -1], ["WH_DEBUG", -1], ["WH_FOREGROUNDIDLE", -1], ["WH_GETMESSAGE", -1], ["WH_JOURNALPLAYBACK", -1], ["WH_JOURNALRECORD", -1], ["WH_KEYBOARD", -1], ["WH_KEYBOARD_LL", -1], ["WH_MOUSE", -1], ["WH_MOUSE_LL", -1], ["WH_MSGFILTER", -1], ["WH_SHELL", -1], ["WH_SYSMSGFILTER", -1]]}, {"name": "lpfn", "type": "HOOKPROC", "description": "A pointer to the hook procedure. If the dwThreadId parameter is zero or specifies the identifier of a thread created by a different process, the lpfn parameter must point to a hook procedure in a DLL. Otherwise, lpfn can point to a hook procedure in the code associated with the current process.", "possible_constants": []}, {"name": "hmod", "type": "HINSTANCE", "description": "A handle to the DLL containing the hook procedure pointed to by the lpfn parameter. The hMod parameter must be set to NULL if the dwThreadId parameter specifies a thread created by the current process and if the hook procedure is within the code associated with the current process.", "possible_constants": []}, {"name": "dwThreadId", "type": "DWORD", "description": "The identifier of the thread with which the hook procedure is to be associated. For desktop apps, if this parameter is zero, the hook procedure is associated with all existing threads running in the same desktop as the calling thread. For Windows Store apps, see the Remarks section.", "possible_constants": []}]}, {"name": "SetWindowTextA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowtexta", "description": "Changes the text of the specified window's title bar (if it has one). If the specified window is a control, the text of the control is changed. However, SetWindowText cannot change the text of a control in another application.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window or control whose text is to be changed.", "possible_constants": []}, {"name": "lpString", "type": "LPCTSTR", "description": "The new title or control text.", "possible_constants": []}]}, {"name": "SetWindowTextW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowtextw", "description": "Changes the text of the specified window's title bar (if it has one). If the specified window is a control, the text of the control is changed. However, SetWindowText cannot change the text of a control in another application.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window or control whose text is to be changed.", "possible_constants": []}, {"name": "lpString", "type": "LPCTSTR", "description": "The new title or control text.", "possible_constants": []}]}, {"name": "SetWinEventHook", "return_type": "HWINEVENTHOOK", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwineventhook", "description": "Sets an event hook function for a range of events.", "parameters": [{"name": "eventMin", "type": "UINT", "description": "Specifies the event constant for the lowest event value in the range of events that are handled by the hook function. This parameter can be set to EVENT_MIN to indicate the lowest possible event value.", "possible_constants": []}, {"name": "eventMax", "type": "UINT", "description": "Specifies the event constant for the highest event value in the range of events that are handled by the hook function. This parameter can be  set to EVENT_MAX to indicate the highest possible event value.", "possible_constants": []}, {"name": "hmodWinEventProc", "type": "HMODULE", "description": "Handle to the DLL that contains the hook function at lpfnWinEventProc, if the WINEVENT_INCONTEXT flag is specified in the dwFlags parameter. If the hook function is not located in a DLL, or if the WINEVENT_OUTOFCONTEXT flag is specified, this parameter is NULL.", "possible_constants": []}, {"name": "pfnWinEventProc", "type": "WINEVENTPROC", "description": "Pointer to the event hook function. For more information about this function, see WinEventProc.", "possible_constants": []}, {"name": "idProcess", "type": "DWORD", "description": "Specifies the ID of the process from which the hook function receives events. Specify zero (0) to receive events from all processes on the current desktop.", "possible_constants": []}, {"name": "idThread", "type": "DWORD", "description": "Specifies the ID of the thread from which the hook function receives events. If this parameter is zero, the hook function is associated with all existing threads on the current desktop.", "possible_constants": []}, {"name": "dwFlags", "type": "UINT", "description": "Flag values that specify the location of the hook function and of the events to be skipped. The following flags are valid:\nThe following flag combinations are valid:", "possible_constants": [["WINEVENT_INCONTEXT", -1], ["WINEVENT_OUTOFCONTEXT", -1], ["WINEVENT_SKIPOWNPROCESS", -1], ["WINEVENT_SKIPOWNTHREAD", -1]]}]}, {"name": "ShowCaret", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showcaret", "description": "Makes the caret visible on the screen at the caret's current position. When the caret becomes visible, it begins flashing automatically.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window that owns the caret. If this parameter is NULL, ShowCaret searches the current task for the window that owns the caret.", "possible_constants": []}]}, {"name": "ShowCursor", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showcursor", "description": "Displays or hides the cursor.", "parameters": [{"name": "bShow", "type": "BOOL", "description": "If bShow is TRUE, the display count is incremented by one. If bShow is FALSE, the display count is decremented by one.", "possible_constants": []}]}, {"name": "ShowOwnedPopups", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showownedpopups", "description": "Shows or hides all pop-up windows owned by the specified window.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window that owns the pop-up windows to be shown or hidden.", "possible_constants": []}, {"name": "fShow", "type": "BOOL", "description": "If this parameter is TRUE, all hidden pop-up windows are shown. If this parameter is FALSE, all visible pop-up windows are hidden.", "possible_constants": []}]}, {"name": "ShowScrollBar", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showscrollbar", "description": "The ShowScrollBar function shows or hides the specified scroll bar.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the\nwBar parameter.", "possible_constants": []}, {"name": "wBar", "type": "int", "description": "Specifies the scroll bar(s) to be shown or hidden. This parameter can be one of the following values.", "possible_constants": [["SB_BOTH", -1], ["SB_CTL", -1], ["SB_HORZ", -1], ["SB_VERT", -1]]}, {"name": "bShow", "type": "BOOL", "description": "Specifies whether the scroll bar is shown or hidden. If this parameter is TRUE, the scroll bar is shown; otherwise, it is hidden.", "possible_constants": []}]}, {"name": "ShowWindow", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showwindow", "description": "Sets the specified window's show state.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window.", "possible_constants": []}, {"name": "nCmdShow", "type": "int", "description": "Controls how the window is to be shown. This parameter is ignored the first time an application calls ShowWindow, if the program that launched the application provides a STARTUPINFO structure. Otherwise, the first time ShowWindow is called, the value should be the value obtained by the WinMain function in its nCmdShow parameter. In subsequent calls, this parameter can be one of the following values.", "possible_constants": [["SW_HIDE", 0], ["SW_SHOWNORMAL", 1], ["SW_SHOWMINIMIZED", 2], ["SW_SHOWMAXIMIZED", 3], ["SW_SHOWNOACTIVATE", 4], ["SW_SHOW", 5], ["SW_MINIMIZE", 6], ["SW_SHOWMINNOACTIVE", 7], ["SW_SHOWNA", 8], ["SW_RESTORE", 9], ["SW_SHOWDEFAULT", 10], ["SW_FORCEMINIMIZE", 11]]}]}, {"name": "ShowWindowAsync", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showwindowasync", "description": "Sets the show state of a window without waiting for the operation to complete.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window.", "possible_constants": []}, {"name": "nCmdShow", "type": "int", "description": "Controls how the window is to be shown. For a list of possible values, see the description of the ShowWindow function.", "possible_constants": []}]}, {"name": "ShutdownBlockReasonCreate", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-shutdownblockreasoncreate", "description": "Indicates that the system cannot be shut down and sets a reason string to be displayed to the user if system shutdown is initiated.", "parameters": [{"name": "hWnd", "type": "", "description": "A handle to the main window of the application.", "possible_constants": []}, {"name": "pwszReason", "type": "", "description": "The reason the application must block system shutdown. This string will be truncated for display purposes after MAX_STR_BLOCKREASON characters.", "possible_constants": []}]}, {"name": "ShutdownBlockReasonDestroy", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-shutdownblockreasondestroy", "description": "Indicates that the system can be shut down and frees the reason string.", "parameters": [{"name": "hWnd", "type": "", "description": "A handle to the main window of the application.", "possible_constants": []}]}, {"name": "ShutdownBlockReasonQuery", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-shutdownblockreasonquery", "description": "Retrieves the reason string set by the ShutdownBlockReasonCreate function.", "parameters": [{"name": "hWnd", "type": "", "description": "A handle to the main window of the application.", "possible_constants": []}, {"name": "pwszBuff", "type": "", "description": "A pointer to a buffer that receives the reason string. If this parameter is NULL, the function retrieves the number of characters in the reason string.", "possible_constants": []}, {"name": "pcchBuff", "type": "", "description": "A pointer to a variable that specifies the size of the pwszBuff buffer, in characters. If the function succeeds, this variable receives the number of characters copied into the buffer, including the null-terminating character. If the buffer is too small, the variable receives the required buffer size, in characters, not including the null-terminating character.", "possible_constants": []}]}, {"name": "SkipPointerFrameMessages", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-skippointerframemessages", "description": "Determines which pointer input frame generated the most recently retrieved message for the specified pointer and discards any queued (unretrieved) pointer input messages generated from the same pointer input frame. If an application has retrieved information for an entire frame using the GetPointerFrameInfo function, the GetPointerFrameInfoHistory function or one of their type-specific variants, it can use this function to avoid retrieving and discarding remaining messages from that frame one by one.", "parameters": [{"name": "pointerId", "type": "", "description": "Identifier of the pointer. Pending messages will be skipped for the frame that includes the most recently retrieved input for this pointer.", "possible_constants": []}]}, {"name": "SoundSentry", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-soundsentry", "description": "Triggers a visual signal to indicate that a sound is playing.", "parameters": []}, {"name": "SubtractRect", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-subtractrect", "description": "The SubtractRect function determines the coordinates of a rectangle formed by subtracting one rectangle from another.", "parameters": [{"name": "lprcDst", "type": "", "description": "A pointer to a RECT structure that receives the coordinates of the rectangle determined by subtracting the rectangle pointed to by lprcSrc2 from the rectangle pointed to by lprcSrc1.", "possible_constants": []}, {"name": "lprcSrc1", "type": "", "description": "A pointer to a RECT structure from which the function subtracts the rectangle pointed to by lprcSrc2.", "possible_constants": []}, {"name": "lprcSrc2", "type": "", "description": "A pointer to a RECT structure that the function subtracts from the rectangle pointed to by lprcSrc1.", "possible_constants": []}]}, {"name": "SwapMouseButton", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-swapmousebutton", "description": "Reverses or restores the meaning of the left and right mouse buttons.", "parameters": [{"name": "fSwap", "type": "BOOL", "description": "If this parameter is TRUE, the left button generates right-button messages and the right button generates left-button messages. If this parameter is FALSE, the buttons are restored to their original meanings.", "possible_constants": []}]}, {"name": "SwitchDesktop", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-switchdesktop", "description": "Makes the specified desktop visible and activates it. This enables the desktop to receive input from the user. The calling process must have DESKTOP_SWITCHDESKTOP access to the desktop for the\nSwitchDesktop function to succeed.", "parameters": [{"name": "hDesktop", "type": "", "description": "A handle to the desktop. This handle is returned by the\nCreateDesktop and\nOpenDesktop functions.\nThis desktop must be associated with the current window station for the process.", "possible_constants": []}]}, {"name": "SwitchToThisWindow", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-switchtothiswindow", "description": "[This function is not intended for general\n      use. It may\n      be altered or unavailable in subsequent versions of Windows.]\nSwitches\nfocus to the specified window and brings it to the foreground.\nSyntax\nvoid SwitchToThisWindow(\n  HWND hwnd,\n  BOOL fUnknown\n);\n\nParameters\nhwnd\nType: HWND\nA handle to the window.\nfUnknown\nType: BOOL\nA TRUE for this parameter indicates that the window\nis being switched to using the Alt/Ctl+Tab key sequence.  This parameter\nshould be FALSE otherwise.\nReturn value\nNone\nRemarks\nThis function is typically called to maintain window z-ordering.\nThis function was not included in the SDK headers and libraries until Windows\u00c2\u00a0XP with Service Pack\u00c2\u00a01 (SP1) and Windows Server\u00c2\u00a02003. If you do not have a header file and import library for this function, you can call the function using LoadLibrary and GetProcAddress.\nRequirements\n\n\n\n\u00c2\u00a0\n\u00c2\u00a0\n\n\n\n\nMinimum supported client\nWindows\u00c2\u00a02000 Professional [desktop apps only]\n\n\nMinimum supported server\nWindows\u00c2\u00a02000 Server [desktop apps only]\n\n\nTarget Platform\nWindows\n\n\nHeader\nwinuser.h (include Windows.h)\n\n\nLibrary\nUser32.lib\n\n\nDLL\nUser32.dll\n\n\nAPI set\next-ms-win-ntuser-window-l1-1-4 (introduced in Windows 10, version 10.0.14393)\n\n\n\nSee also\nConceptual\nIsWindowVisible\nReference\nShowWindow\nWindows", "parameters": [{"name": "hwnd", "type": "HWND", "description": "A handle to the window.", "possible_constants": []}, {"name": "fUnknown", "type": "BOOL", "description": "A TRUE for this parameter indicates that the window\nis being switched to using the Alt/Ctl+Tab key sequence.  This parameter\nshould be FALSE otherwise.", "possible_constants": []}]}, {"name": "SystemParametersInfoA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-systemparametersinfoa", "description": "Retrieves or sets the value of one of the system-wide parameters. This function can also update the user profile while setting a parameter.", "parameters": [{"name": "uiAction", "type": "UINT", "description": "The system-wide parameter to be retrieved or set. The possible values are organized in the following tables of related parameters:", "possible_constants": []}]}, {"name": "SystemParametersInfoForDpi", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-systemparametersinfofordpi", "description": "Retrieves the value of one of the system-wide parameters, taking into account the provided DPI value.", "parameters": [{"name": "uiAction", "type": "", "description": "The system-wide parameter to be retrieved. This function is only intended for use with SPI_GETICONTITLELOGFONT, SPI_GETICONMETRICS, or SPI_GETNONCLIENTMETRICS. See SystemParametersInfo for more information on these values.", "possible_constants": []}, {"name": "uiParam", "type": "", "description": "A parameter whose usage and format depends on the system parameter being queried. For more information about system-wide parameters, see the uiAction parameter. If not otherwise indicated, you must specify zero for this parameter.", "possible_constants": []}, {"name": "pvParam", "type": "", "description": "A parameter whose usage and format depends on the system parameter being queried. For more information about system-wide parameters, see the uiAction parameter. If not otherwise indicated, you must specify NULL for this parameter. For information on the PVOID datatype, see Windows Data Types.", "possible_constants": []}, {"name": "fWinIni", "type": "", "description": "Has no effect for with this API. This parameter only has an effect if you're setting parameter.", "possible_constants": []}, {"name": "dpi", "type": "", "description": "The DPI to use for scaling the metric.", "possible_constants": []}]}, {"name": "SystemParametersInfoW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-systemparametersinfow", "description": "Retrieves or sets the value of one of the system-wide parameters. This function can also update the user profile while setting a parameter.", "parameters": [{"name": "uiAction", "type": "UINT", "description": "The system-wide parameter to be retrieved or set. The possible values are organized in the following tables of related parameters:", "possible_constants": []}]}, {"name": "TabbedTextOutA", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-tabbedtextouta", "description": "The TabbedTextOut function writes a character string at a specified location, expanding tabs to the values specified in an array of tab-stop positions. Text is written in the currently selected font, background color, and text color.", "parameters": [{"name": "hdc", "type": "", "description": "A handle to the device context.", "possible_constants": []}, {"name": "x", "type": "", "description": "The x-coordinate of the starting point of the string, in logical units.", "possible_constants": []}, {"name": "y", "type": "", "description": "The y-coordinate of the starting point of the string, in logical units.", "possible_constants": []}, {"name": "lpString", "type": "", "description": "A pointer to the character string to draw. The string does not need to be zero-terminated, since nCount specifies the length of the string.", "possible_constants": []}, {"name": "chCount", "type": "", "description": "The length of the string pointed to by lpString.", "possible_constants": []}, {"name": "nTabPositions", "type": "", "description": "The number of values in the array of tab-stop positions.", "possible_constants": []}, {"name": "lpnTabStopPositions", "type": "", "description": "A pointer to an array containing the tab-stop positions, in logical units. The tab stops must be sorted in increasing order; the smallest x-value should be the first item in the array.", "possible_constants": []}, {"name": "nTabOrigin", "type": "", "description": "The x-coordinate of the starting position from which tabs are expanded, in logical units.", "possible_constants": []}]}, {"name": "TabbedTextOutW", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-tabbedtextoutw", "description": "The TabbedTextOut function writes a character string at a specified location, expanding tabs to the values specified in an array of tab-stop positions. Text is written in the currently selected font, background color, and text color.", "parameters": [{"name": "hdc", "type": "", "description": "A handle to the device context.", "possible_constants": []}, {"name": "x", "type": "", "description": "The x-coordinate of the starting point of the string, in logical units.", "possible_constants": []}, {"name": "y", "type": "", "description": "The y-coordinate of the starting point of the string, in logical units.", "possible_constants": []}, {"name": "lpString", "type": "", "description": "A pointer to the character string to draw. The string does not need to be zero-terminated, since nCount specifies the length of the string.", "possible_constants": []}, {"name": "chCount", "type": "", "description": "The length of the string pointed to by lpString.", "possible_constants": []}, {"name": "nTabPositions", "type": "", "description": "The number of values in the array of tab-stop positions.", "possible_constants": []}, {"name": "lpnTabStopPositions", "type": "", "description": "A pointer to an array containing the tab-stop positions, in logical units. The tab stops must be sorted in increasing order; the smallest x-value should be the first item in the array.", "possible_constants": []}, {"name": "nTabOrigin", "type": "", "description": "The x-coordinate of the starting position from which tabs are expanded, in logical units.", "possible_constants": []}]}, {"name": "TileWindows", "return_type": "WORD", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-tilewindows", "description": "Tiles the specified child windows of the specified parent window.", "parameters": [{"name": "hwndParent", "type": "HWND", "description": "A handle to the parent window. If this parameter is NULL, the desktop window is assumed.", "possible_constants": []}, {"name": "wHow", "type": "UINT", "description": "The tiling flags. This parameter can be one of the following values\u00e2\u0080\u0094optionally combined with MDITILE_SKIPDISABLED to prevent disabled MDI child windows from being tiled.", "possible_constants": [["MDITILE_HORIZONTAL", 1], ["MDITILE_VERTICAL", 0]]}, {"name": "lpRect", "type": "const RECT*", "description": "A pointer to a structure that specifies the rectangular area, in client coordinates, within which the windows are arranged. If this parameter is NULL, the client area of the parent window is used.", "possible_constants": []}, {"name": "cKids", "type": "UINT", "description": "The number of elements in the array specified by the lpKids parameter. This parameter is ignored if lpKids is NULL.", "possible_constants": []}, {"name": "lpKids", "type": "const HWND*", "description": "An array of handles to the child windows to arrange. If a specified child window is a top-level window with the style WS_EX_TOPMOST or WS_EX_TOOLWINDOW, the child window is not arranged. If this parameter is NULL, all child windows of the specified parent window (or of the desktop window) are arranged.", "possible_constants": []}]}, {"name": "ToAscii", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-toascii", "description": "Translates the specified virtual-key code and keyboard state to the corresponding character or characters. The function translates the code using the input language and physical keyboard layout identified by the keyboard layout handle.", "parameters": [{"name": "uVirtKey", "type": "UINT", "description": "The virtual-key code to be translated. See Virtual-Key Codes.", "possible_constants": []}, {"name": "uScanCode", "type": "UINT", "description": "The hardware scan code of the key to be translated. The high-order bit of this value is set if the key is up (not pressed).", "possible_constants": []}, {"name": "lpKeyState", "type": "const BYTE*", "description": "A pointer to a 256-byte array that contains the current keyboard state. Each element (byte) in the array contains the state of one key. If the high-order bit of a byte is set, the key is down (pressed).\nThe low bit, if set, indicates that the key is toggled on. In this function, only the toggle bit of the CAPS LOCK key is relevant. The toggle state of the NUM LOCK and SCROLL LOCK keys is ignored.", "possible_constants": []}, {"name": "lpChar", "type": "LPWORD", "description": "The buffer that receives the translated character or characters.", "possible_constants": []}, {"name": "uFlags", "type": "UINT", "description": "This parameter must be 1 if a menu is active, or 0 otherwise.", "possible_constants": []}]}, {"name": "ToAsciiEx", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-toasciiex", "description": "Translates the specified virtual-key code and keyboard state to the corresponding character or characters. The function translates the code using the input language and physical keyboard layout identified by the input locale identifier.", "parameters": [{"name": "uVirtKey", "type": "UINT", "description": "The virtual-key code to be translated. See Virtual-Key Codes.", "possible_constants": []}, {"name": "uScanCode", "type": "UINT", "description": "The hardware scan code of the key to be translated. The high-order bit of this value is set if the key is up (not pressed).", "possible_constants": []}, {"name": "lpKeyState", "type": "const BYTE*", "description": "A pointer to a 256-byte array that contains the current keyboard state. Each element (byte) in the array contains the state of one key. If the high-order bit of a byte is set, the key is down (pressed).\nThe low bit, if set, indicates that the key is toggled on. In this function, only the toggle bit of the CAPS LOCK key is relevant. The toggle state of the NUM LOCK and SCOLL LOCK keys is ignored.", "possible_constants": []}, {"name": "lpChar", "type": "LPWORD", "description": "A pointer to the buffer that receives the translated character or characters.", "possible_constants": []}, {"name": "uFlags", "type": "UINT", "description": "This parameter must be 1 if a menu is active, zero otherwise.", "possible_constants": []}, {"name": "dwhkl", "type": "HKL", "description": "Input locale identifier to use to translate the code. This parameter can be any input locale identifier previously returned by the LoadKeyboardLayout function.", "possible_constants": []}]}, {"name": "TOUCH_COORD_TO_PIXEL", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-touch_coord_to_pixel", "description": "Converts touch coordinates to pixels.", "parameters": [{"name": "l", "type": "", "description": "The value to be converted from touch coordinates to pixels.", "possible_constants": []}]}, {"name": "ToUnicode", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-tounicode", "description": "Translates the specified virtual-key code and keyboard state to the corresponding Unicode character or characters.", "parameters": [{"name": "wVirtKey", "type": "UINT", "description": "The virtual-key code to be translated. See Virtual-Key Codes.", "possible_constants": []}, {"name": "wScanCode", "type": "UINT", "description": "The hardware scan code of the key to be translated. The high-order bit of this value is set if the key is up.", "possible_constants": []}, {"name": "lpKeyState", "type": "const BYTE*", "description": "A pointer to a 256-byte array that contains the current keyboard state. Each element (byte) in the array contains the state of one key. If the high-order bit of a byte is set, the key is down.", "possible_constants": []}, {"name": "pwszBuff", "type": "LPWSTR", "description": "The buffer that receives the translated Unicode character or characters. However, this buffer may be returned without being null-terminated even though the variable name suggests that it is null-terminated.", "possible_constants": []}, {"name": "cchBuff", "type": "int", "description": "The size, in characters, of the buffer pointed to by the pwszBuff parameter.", "possible_constants": []}, {"name": "wFlags", "type": "UINT", "description": "The behavior of the function.\nIf bit 0 is set, a menu is active.\nIf bit 2 is set, keyboard state is not changed (Windows\u00c2\u00a010, version 1607 and newer)\nAll other bits (through 31) are reserved.", "possible_constants": []}]}, {"name": "ToUnicodeEx", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-tounicodeex", "description": "Translates the specified virtual-key code and keyboard state to the corresponding Unicode character or characters.", "parameters": [{"name": "wVirtKey", "type": "UINT", "description": "The virtual-key code to be translated. See Virtual-Key Codes.", "possible_constants": []}, {"name": "wScanCode", "type": "UINT", "description": "The hardware scan code of the key to be translated. The high-order bit of this value is set if the key is up.", "possible_constants": []}, {"name": "lpKeyState", "type": "const BYTE*", "description": "A pointer to a 256-byte array that contains the current keyboard state. Each element (byte) in the array contains the state of one key. If the high-order bit of a byte is set, the key is down.", "possible_constants": []}, {"name": "pwszBuff", "type": "LPWSTR", "description": "The buffer that receives the translated Unicode character or characters. However, this buffer may be returned without being null-terminated even though the variable name suggests that it is null-terminated.", "possible_constants": []}, {"name": "cchBuff", "type": "int", "description": "The size, in characters, of the buffer pointed to by the pwszBuff parameter.", "possible_constants": []}, {"name": "wFlags", "type": "UINT", "description": "The behavior of the function.\nIf bit 0 is set, a menu is active.\nIf bit 2 is set, keyboard state is not changed (Windows\u00c2\u00a010, version 1607 and newer)\nAll other bits (through 31) are reserved.", "possible_constants": []}, {"name": "dwhkl", "type": "HKL", "description": "The input locale identifier used to translate the specified code. This parameter can be any input locale identifier previously returned by the LoadKeyboardLayout function.", "possible_constants": []}]}, {"name": "TrackMouseEvent", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-trackmouseevent", "description": "Posts messages when the mouse pointer leaves a window or hovers over a window for a specified amount of time.", "parameters": [{"name": "lpEventTrack", "type": "LPTRACKMOUSEEVENT", "description": "A pointer to a TRACKMOUSEEVENT structure that contains tracking information.", "possible_constants": []}]}, {"name": "TrackPopupMenu", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-trackpopupmenu", "description": "Displays a shortcut menu at the specified location and tracks the selection of items on the menu. The shortcut menu can appear anywhere on the screen.", "parameters": [{"name": "hMenu", "type": "HMENU", "description": "A handle to the shortcut menu to be displayed. The handle can be obtained by calling CreatePopupMenu to create a new shortcut menu, or by calling GetSubMenu to retrieve a handle to a submenu associated with an existing menu item.", "possible_constants": []}, {"name": "uFlags", "type": "UINT", "description": "Use zero of more of these flags to specify function options.\nUse one of the following flags to specify how the function positions the shortcut menu horizontally.\nUse one of the following flags to specify how the function positions the shortcut menu vertically.\nUse the following flags to control discovery of the user selection without having to set up a parent window for the menu.\nUse one of the following flags to specify which mouse button the shortcut menu tracks.\nUse any reasonable combination of the following flags to modify the animation of a menu. For example, by selecting a horizontal and a vertical flag, you can achieve diagonal animation.\nFor any animation to occur, the SystemParametersInfo function must set SPI_SETMENUANIMATION. Also, all the TPM_*ANIMATION flags, except TPM_NOANIMATION, are ignored if menu fade animation is on. For more information, see the SPI_GETMENUFADE flag in SystemParametersInfo.\nUse the TPM_RECURSE flag to display a menu when another menu is already displayed. This is intended to support context menus within a menu.\nFor right-to-left text layout, use TPM_LAYOUTRTL. By default, the text layout is left-to-right.", "possible_constants": [["TPM_CENTERALIGN", 4], ["TPM_LEFTALIGN", 0], ["TPM_RIGHTALIGN", 8], ["TPM_BOTTOMALIGN", 32], ["TPM_TOPALIGN", 0], ["TPM_VCENTERALIGN", 16], ["TPM_NONOTIFY", 128], ["TPM_RETURNCMD", 256], ["TPM_LEFTBUTTON", 0], ["TPM_RIGHTBUTTON", 2], ["TPM_HORNEGANIMATION", 2048], ["TPM_HORPOSANIMATION", 1024], ["TPM_NOANIMATION", 16384], ["TPM_VERNEGANIMATION", 8192], ["TPM_VERPOSANIMATION", 4096]]}, {"name": "x", "type": "int", "description": "The horizontal location of the shortcut menu, in screen coordinates.", "possible_constants": []}, {"name": "y", "type": "int", "description": "The vertical location of the shortcut menu, in screen coordinates.", "possible_constants": []}, {"name": "nReserved", "type": "int", "description": "Reserved; must be zero.", "possible_constants": []}, {"name": "hWnd", "type": "HWND", "description": "A handle to the window that owns the shortcut menu. This window receives all messages from the menu. The window does not receive a WM_COMMAND message from the menu until the function returns. If you specify TPM_NONOTIFY in the uFlags parameter, the function does not send messages to the window identified by hWnd. However, you must still pass a window handle in hWnd. It can be any window handle from your application.", "possible_constants": []}, {"name": "prcRect", "type": "const RECT*", "description": "Ignored.", "possible_constants": []}]}, {"name": "TrackPopupMenuEx", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-trackpopupmenuex", "description": "Displays a shortcut menu at the specified location and tracks the selection of items on the shortcut menu. The shortcut menu can appear anywhere on the screen.", "parameters": [{"name": "hMenu", "type": "HMENU", "description": "A handle to the shortcut menu to be displayed. This handle can be obtained by calling the CreatePopupMenu function to create a new shortcut menu or by calling the GetSubMenu function to retrieve a handle to a submenu associated with an existing menu item.", "possible_constants": []}, {"name": "uFlags", "type": "UINT", "description": "Specifies function options.\nUse one of the following flags to specify how the function positions the shortcut menu horizontally.\nUse one of the following flags to specify how the function positions the shortcut menu vertically.\nUse the following flags to control discovery of the user selection without having to set up a parent window for the menu.\nUse one of the following flags to specify which mouse button the shortcut menu tracks.\nUse any reasonable combination of the following flags to modify the animation of a menu. For example, by selecting a horizontal and a vertical flag, you can achieve diagonal animation.\nFor any animation to occur, the SystemParametersInfo function must set SPI_SETMENUANIMATION. Also, all the TPM_*ANIMATION flags, except TPM_NOANIMATION, are ignored if menu fade animation is on. For more information, see the SPI_GETMENUFADE flag in SystemParametersInfo.\nUse the TPM_RECURSE flag to display a menu when another menu is already displayed. This is intended to support context menus within a menu.\nUse one of the following flags to specify whether to accommodate horizontal or vertical alignment.\nThe excluded rectangle is a portion of the screen that the menu should not overlap; it is specified by the lptpm parameter.\nFor right-to-left text layout, use TPM_LAYOUTRTL. By default, the text layout is left-to-right.", "possible_constants": [["TPM_CENTERALIGN", 4], ["TPM_LEFTALIGN", 0], ["TPM_RIGHTALIGN", 8], ["TPM_BOTTOMALIGN", 32], ["TPM_TOPALIGN", 0], ["TPM_VCENTERALIGN", 16], ["TPM_NONOTIFY", 128], ["TPM_RETURNCMD", 256], ["TPM_LEFTBUTTON", 0], ["TPM_RIGHTBUTTON", 2], ["TPM_HORNEGANIMATION", 2048], ["TPM_HORPOSANIMATION", 1024], ["TPM_NOANIMATION", 16384], ["TPM_VERNEGANIMATION", 8192], ["TPM_VERPOSANIMATION", 4096], ["TPM_HORIZONTAL", 0], ["TPM_VERTICAL", 64]]}, {"name": "x", "type": "int", "description": "The horizontal location of the shortcut menu, in screen coordinates.", "possible_constants": []}, {"name": "y", "type": "int", "description": "The vertical location of the shortcut menu, in screen coordinates.", "possible_constants": []}, {"name": "hwnd", "type": "HWND", "description": "A handle to the window that owns the shortcut menu. This window receives all messages from the menu. The window does not receive a WM_COMMAND message from the menu until the function returns. If you specify TPM_NONOTIFY in the fuFlags parameter, the function does not send messages to the window identified by hwnd. However, you must still pass a window handle in hwnd. It can be any window handle from your application.", "possible_constants": []}, {"name": "lptpm", "type": "LPTPMPARAMS", "description": "A pointer to a TPMPARAMS structure that specifies an area of the screen the menu should not overlap. This parameter can be NULL.", "possible_constants": []}]}, {"name": "TranslateAcceleratorA", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-translateacceleratora", "description": "Processes accelerator keys for menu commands. The function translates a WM_KEYDOWN or WM_SYSKEYDOWN message to a WM_COMMAND or WM_SYSCOMMAND message (if there is an entry for the key in the specified accelerator table) and then sends the WM_COMMAND or WM_SYSCOMMAND message directly to the specified window procedure. TranslateAccelerator does not return until the window procedure has processed the message.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window whose messages are to be translated.", "possible_constants": []}, {"name": "hAccTable", "type": "HACCEL", "description": "A handle to the accelerator table. The accelerator table must have been loaded by a call to the LoadAccelerators function or created by a call to the CreateAcceleratorTable function.", "possible_constants": []}, {"name": "lpMsg", "type": "LPMSG", "description": "A pointer to an MSG structure that contains message information retrieved from the calling thread's message queue using the GetMessage or PeekMessage function.", "possible_constants": []}]}, {"name": "TranslateAcceleratorW", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-translateacceleratorw", "description": "Processes accelerator keys for menu commands. The function translates a WM_KEYDOWN or WM_SYSKEYDOWN message to a WM_COMMAND or WM_SYSCOMMAND message (if there is an entry for the key in the specified accelerator table) and then sends the WM_COMMAND or WM_SYSCOMMAND message directly to the specified window procedure. TranslateAccelerator does not return until the window procedure has processed the message.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window whose messages are to be translated.", "possible_constants": []}, {"name": "hAccTable", "type": "HACCEL", "description": "A handle to the accelerator table. The accelerator table must have been loaded by a call to the LoadAccelerators function or created by a call to the CreateAcceleratorTable function.", "possible_constants": []}, {"name": "lpMsg", "type": "LPMSG", "description": "A pointer to an MSG structure that contains message information retrieved from the calling thread's message queue using the GetMessage or PeekMessage function.", "possible_constants": []}]}, {"name": "TranslateMDISysAccel", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-translatemdisysaccel", "description": "Processes accelerator keystrokes for window menu commands of the multiple-document interface (MDI) child windows associated with the specified MDI client window. The function translates WM_KEYUP and WM_KEYDOWN messages to WM_SYSCOMMAND messages and sends them to the appropriate MDI child windows.", "parameters": [{"name": "hWndClient", "type": "HWND", "description": "A handle to the MDI client window.", "possible_constants": []}, {"name": "lpMsg", "type": "LPMSG", "description": "A pointer to a message retrieved by using the GetMessage or PeekMessage function. The message must be an MSG structure and contain message information from the application's message queue.", "possible_constants": []}]}, {"name": "TranslateMessage", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-translatemessage", "description": "Translates virtual-key messages into character messages. The character messages are posted to the calling thread's message queue, to be read the next time the thread calls the GetMessage or PeekMessage function.", "parameters": [{"name": "lpMsg", "type": "const MSG*", "description": "A pointer to an MSG structure that contains message information retrieved from the calling thread's message queue by using the GetMessage or PeekMessage function.", "possible_constants": []}]}, {"name": "UnhookWindowsHookEx", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-unhookwindowshookex", "description": "Removes a hook procedure installed in a hook chain by the SetWindowsHookEx function.", "parameters": [{"name": "hhk", "type": "HHOOK", "description": "A handle to the hook to be removed. This parameter is a hook handle obtained by a previous call to SetWindowsHookEx.", "possible_constants": []}]}, {"name": "UnhookWinEvent", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-unhookwinevent", "description": "Removes an event hook function created by a previous call to SetWinEventHook.", "parameters": [{"name": "hWinEventHook", "type": "HWINEVENTHOOK", "description": "Handle to the event hook returned in the previous call to SetWinEventHook.", "possible_constants": []}]}, {"name": "UnionRect", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-unionrect", "description": "The UnionRect function creates the union of two rectangles. The union is the smallest rectangle that contains both source rectangles.", "parameters": [{"name": "lprcDst", "type": "", "description": "A pointer to the RECT structure that will receive a rectangle containing the rectangles pointed to by the lprcSrc1 and lprcSrc2 parameters.", "possible_constants": []}, {"name": "lprcSrc1", "type": "", "description": "A pointer to the RECT structure that contains the first source rectangle.", "possible_constants": []}, {"name": "lprcSrc2", "type": "", "description": "A pointer to the RECT structure that contains the second source rectangle.", "possible_constants": []}]}, {"name": "UnloadKeyboardLayout", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-unloadkeyboardlayout", "description": "Unloads an input locale identifier (formerly called a keyboard layout).", "parameters": [{"name": "hkl", "type": "HKL", "description": "The input locale identifier to be unloaded.", "possible_constants": []}]}, {"name": "UnregisterClassA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-unregisterclassa", "description": "Unregisters a window class, freeing the memory required for the class.", "parameters": [{"name": "lpClassName", "type": "LPCTSTR", "description": "A null-terminated string or a class atom. If lpClassName is a string, it specifies the window class name. This class name must have been registered by a previous call to the RegisterClass or RegisterClassEx function. System classes, such as dialog box controls, cannot be unregistered. If this parameter is an atom, it must be a class atom created by a previous call to the RegisterClass or RegisterClassEx function. The atom must be in the low-order word of lpClassName; the high-order word must be zero.", "possible_constants": []}, {"name": "hInstance", "type": "HINSTANCE", "description": "A handle to the instance of the module that created the class.", "possible_constants": []}]}, {"name": "UnregisterClassW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-unregisterclassw", "description": "Unregisters a window class, freeing the memory required for the class.", "parameters": [{"name": "lpClassName", "type": "LPCTSTR", "description": "A null-terminated string or a class atom. If lpClassName is a string, it specifies the window class name. This class name must have been registered by a previous call to the RegisterClass or RegisterClassEx function. System classes, such as dialog box controls, cannot be unregistered. If this parameter is an atom, it must be a class atom created by a previous call to the RegisterClass or RegisterClassEx function. The atom must be in the low-order word of lpClassName; the high-order word must be zero.", "possible_constants": []}, {"name": "hInstance", "type": "HINSTANCE", "description": "A handle to the instance of the module that created the class.", "possible_constants": []}]}, {"name": "UnregisterDeviceNotification", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-unregisterdevicenotification", "description": "Closes the specified device notification handle.", "parameters": [{"name": "Handle", "type": "", "description": "Device notification handle returned by the\nRegisterDeviceNotification function.", "possible_constants": []}]}, {"name": "UnregisterHotKey", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-unregisterhotkey", "description": "Frees a hot key previously registered by the calling thread.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to the window associated with the hot key to be freed. This parameter should be NULL if the hot key is not associated with a window.", "possible_constants": []}, {"name": "id", "type": "int", "description": "The identifier of the hot key to be freed.", "possible_constants": []}]}, {"name": "UnregisterPointerInputTarget", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-unregisterpointerinputtarget", "description": "Allows the caller to unregister a target window to which all pointer input of the specified type is redirected.", "parameters": [{"name": "hwnd", "type": "", "description": "Window to be un-registered as a global redirection target on its desktop.", "possible_constants": []}, {"name": "pointerType", "type": "", "description": "Type of pointer input to no longer be redirected to the specified window. This is any valid and supported value from the POINTER_INPUT_TYPE  enumeration. Note that the generic PT_POINTER type and the PT_MOUSE type are not valid in this parameter.", "possible_constants": []}]}, {"name": "UnregisterPointerInputTargetEx", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-unregisterpointerinputtargetex", "description": "[UnregisterPointerInputTargetEx is not supported and may be altered or unavailable in the future. Instead, use UnregisterPointerInputTarget.]\nUnregisterPointerInputTargetEx may be altered or unavailable. Instead, use UnregisterPointerInputTarget.\nSyntax\nBOOL UnregisterPointerInputTargetEx(\n  HWND               hwnd,\n  POINTER_INPUT_TYPE pointerType\n);\n\nParameters\nhwnd\nNot supported.\npointerType\nNot supported.\nReturn value\nNot supported.\nRequirements\n\n\n\n\u00c2\u00a0\n\u00c2\u00a0\n\n\n\n\nMinimum supported client\nWindows\u00c2\u00a010 [desktop apps only]\n\n\nMinimum supported server\nWindows Server\u00c2\u00a02016 [desktop apps only]\n\n\nTarget Platform\nWindows\n\n\nHeader\nwinuser.h\n\n\nLibrary\nUser32.lib\n\n\nDLL\nUser32.dll\n\n\n\nSee also\nUnregisterPointerInputTarget", "parameters": [{"name": "hwnd", "type": "", "description": "Not supported.", "possible_constants": []}, {"name": "pointerType", "type": "", "description": "Not supported.", "possible_constants": []}]}, {"name": "UnregisterPowerSettingNotification", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-unregisterpowersettingnotification", "description": "Unregisters the power setting notification.", "parameters": [{"name": "Handle", "type": "", "description": "The handle returned from the RegisterPowerSettingNotification function.", "possible_constants": []}]}, {"name": "UnregisterSuspendResumeNotification", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-unregistersuspendresumenotification", "description": "Cancels a registration to receive notification when the system is suspended or resumed. Similar to PowerUnregisterSuspendResumeNotification but operates in user mode.", "parameters": [{"name": "Handle", "type": "", "description": "A handle to a registration obtained by calling the RegisterSuspendResumeNotification function.", "possible_constants": []}]}, {"name": "UnregisterTouchWindow", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-unregistertouchwindow", "description": "Registers a window as no longer being touch-capable.", "parameters": [{"name": "hwnd", "type": "", "description": "The handle of the window. The function fails with ERROR_ACCESS_DENIED if the calling thread does not own the specified window.", "possible_constants": []}]}, {"name": "UpdateLayeredWindow", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-updatelayeredwindow", "description": "Updates the position, size, shape, content, and translucency of a layered window.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A handle to a layered window. A layered window is created by specifying WS_EX_LAYERED when creating the window with the CreateWindowEx function.\nWindows\u00c2\u00a08:\u00c2\u00a0\u00c2\u00a0The WS_EX_LAYERED style is supported for top-level windows and child windows. Previous Windows versions support WS_EX_LAYERED only for top-level windows.", "possible_constants": []}, {"name": "hdcDst", "type": "HDC", "description": "A handle to a DC for the screen. This handle is obtained by specifying NULL when calling the GetDC function. It is used for palette color matching when the window contents are updated. If hdcDst is NULL, the default palette will be used.\nIf hdcSrc is NULL, hdcDst must be NULL.", "possible_constants": []}, {"name": "pptDst", "type": "POINT*", "description": "A pointer to a structure that specifies the new screen position of the layered window. If the current position is not changing, pptDst can be NULL.", "possible_constants": []}, {"name": "psize", "type": "SIZE*", "description": "A pointer to a structure that specifies the new size of the layered window. If the size of the window is not changing, psize can be NULL. If hdcSrc is NULL, psize must be NULL.", "possible_constants": []}, {"name": "hdcSrc", "type": "HDC", "description": "A handle to a DC for the surface that defines the layered window. This handle can be obtained by calling the CreateCompatibleDC function. If the shape and visual context of the window are not changing, hdcSrc can be NULL.", "possible_constants": []}, {"name": "pptSrc", "type": "POINT*", "description": "A pointer to a structure that specifies the location of the layer in the device context. If hdcSrc is NULL, pptSrc should be NULL.", "possible_constants": []}, {"name": "crKey", "type": "COLORREF", "description": "A structure that specifies the color key to be used when composing the layered window. To generate a COLORREF, use the RGB macro.", "possible_constants": []}, {"name": "pblend", "type": "BLENDFUNCTION*", "description": "A pointer to a structure that specifies the transparency value to be used when composing the layered window.", "possible_constants": []}, {"name": "dwFlags", "type": "DWORD", "description": "This parameter can be one of the following values.\nIf hdcSrc is NULL, dwFlags should be zero.", "possible_constants": [["ULW_ALPHA", 2], ["ULW_COLORKEY", 1], ["ULW_OPAQUE", 4], ["ULW_EX_NORESIZE", 8]]}]}, {"name": "UpdateWindow", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-updatewindow", "description": "The UpdateWindow function updates the client area of the specified window by sending a WM_PAINT message to the window if the window's update region is not empty. The function sends a WM_PAINT message directly to the window procedure of the specified window, bypassing the application queue. If the update region is empty, no message is sent.", "parameters": [{"name": "hWnd", "type": "", "description": "Handle to the window to be updated.", "possible_constants": []}]}, {"name": "UserHandleGrantAccess", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-userhandlegrantaccess", "description": "Grants or denies access to a handle to a User object to a job that has a user-interface restriction. When access is granted, all processes associated with the job can subsequently recognize and use the handle. When access is denied, the processes can no longer use the handle. For more information see\nUser Objects.", "parameters": [{"name": "hUserHandle", "type": "", "description": "A handle to the User object.", "possible_constants": []}, {"name": "hJob", "type": "", "description": "A handle to the job to be granted access to the User handle. The\nCreateJobObject or\nOpenJobObject function returns this handle.", "possible_constants": []}, {"name": "bGrant", "type": "", "description": "If this parameter is TRUE, all processes associated with the job can recognize and use the handle. If the parameter is FALSE, the processes cannot use the handle.", "possible_constants": []}]}, {"name": "ValidateRect", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-validaterect", "description": "The ValidateRect function validates the client area within a rectangle by removing the rectangle from the update region of the specified window.", "parameters": [{"name": "hWnd", "type": "", "description": "Handle to the window whose update region is to be modified. If this parameter is NULL, the system invalidates and redraws all windows and sends the WM_ERASEBKGND and WM_NCPAINT messages to the window procedure before the function returns.", "possible_constants": []}, {"name": "lpRect", "type": "", "description": "Pointer to a RECT structure that contains the client coordinates of the rectangle to be removed from the update region. If this parameter is NULL, the entire client area is removed.", "possible_constants": []}]}, {"name": "ValidateRgn", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-validatergn", "description": "The ValidateRgn function validates the client area within a region by removing the region from the current update region of the specified window.", "parameters": [{"name": "hWnd", "type": "", "description": "Handle to the window whose update region is to be modified.", "possible_constants": []}, {"name": "hRgn", "type": "", "description": "Handle to a region that defines the area to be removed from the update region. If this parameter is NULL, the entire client area is removed.", "possible_constants": []}]}, {"name": "VkKeyScanA", "return_type": "SHORT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-vkkeyscana", "description": "[This function has been superseded by the VkKeyScanEx function. You can still use VkKeyScan, however, if you do not need to specify a keyboard layout.]\nTranslates a character to the corresponding virtual-key code and shift state for the current keyboard.\nSyntax\nSHORT VkKeyScanA(\n  CHAR ch\n);\n\nParameters\nch\nType: TCHAR\nThe character to be translated into a virtual-key code.\nReturn value\nType: SHORT\nIf the function succeeds, the low-order byte of the return value contains the virtual-key code and the high-order byte contains the shift state, which can be a combination of the following flag bits.\n\n\nReturn value\nDescription\n\n\n\n\n1\n\n\n\nEither SHIFT key is pressed.\n\n\n\n\n\n2\n\n\n\nEither CTRL key is pressed.\n\n\n\n\n\n4\n\n\n\nEither ALT key is pressed.\n\n\n\n\n\n8\n\n\n\nThe Hankaku key is pressed\n\n\n\n\n\n16\n\n\n\nReserved (defined by the keyboard layout driver).\n\n\n\n\n\n32\n\n\n\nReserved (defined by the keyboard layout driver).\n\n\n\n\u00c2\u00a0\nIf the function finds no key that translates to the passed character code, both the low-order and high-order bytes contain\n\u00e2\u0080\u00931.\nRemarks\nFor keyboard layouts that use the right-hand ALT key as a shift key (for example, the French keyboard layout), the shift state is represented by the value 6, because the right-hand ALT key is converted internally into CTRL+ALT.\nTranslations for the numeric keypad (VK_NUMPAD0 through VK_DIVIDE) are ignored. This function is intended to translate characters into keystrokes from the main keyboard section only. For example, the character \"7\" is translated into VK_7, not VK_NUMPAD7.\nVkKeyScan is used by applications that send characters by using the WM_KEYUP and WM_KEYDOWN messages.\n\nNote\nThe winuser.h header defines VkKeyScan as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see Conventions for Function Prototypes.\n\nRequirements\n\n\n\n\u00c2\u00a0\n\u00c2\u00a0\n\n\n\n\nMinimum supported client\nWindows\u00c2\u00a02000 Professional [desktop apps only]\n\n\nMinimum supported server\nWindows\u00c2\u00a02000 Server [desktop apps only]\n\n\nTarget Platform\nWindows\n\n\nHeader\nwinuser.h (include Windows.h)\n\n\nLibrary\nUser32.lib\n\n\nDLL\nUser32.dll\n\n\n\nSee also\nConceptual\nGetAsyncKeyState\nGetKeyNameText\nGetKeyState\nGetKeyboardState\nKeyboard Input\nReference\nSetKeyboardState\nVkKeyScanEx\nWM_KEYDOWN\nWM_KEYUP", "parameters": [{"name": "ch", "type": "TCHAR", "description": "The character to be translated into a virtual-key code.", "possible_constants": []}]}, {"name": "VkKeyScanExA", "return_type": "SHORT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-vkkeyscanexa", "description": "Translates a character to the corresponding virtual-key code and shift state. The function translates the character using the input language and physical keyboard layout identified by the input locale identifier.", "parameters": [{"name": "ch", "type": "TCHAR", "description": "The character to be translated into a virtual-key code.", "possible_constants": []}, {"name": "dwhkl", "type": "HKL", "description": "Input locale identifier used to translate the character. This parameter can be any input locale identifier previously returned by the LoadKeyboardLayout function.", "possible_constants": []}]}, {"name": "VkKeyScanExW", "return_type": "SHORT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-vkkeyscanexw", "description": "Translates a character to the corresponding virtual-key code and shift state. The function translates the character using the input language and physical keyboard layout identified by the input locale identifier.", "parameters": [{"name": "ch", "type": "TCHAR", "description": "The character to be translated into a virtual-key code.", "possible_constants": []}, {"name": "dwhkl", "type": "HKL", "description": "Input locale identifier used to translate the character. This parameter can be any input locale identifier previously returned by the LoadKeyboardLayout function.", "possible_constants": []}]}, {"name": "VkKeyScanW", "return_type": "SHORT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-vkkeyscanw", "description": "[This function has been superseded by the VkKeyScanEx function. You can still use VkKeyScan, however, if you do not need to specify a keyboard layout.]\nTranslates a character to the corresponding virtual-key code and shift state for the current keyboard.\nSyntax\nSHORT VkKeyScanW(\n  WCHAR ch\n);\n\nParameters\nch\nType: TCHAR\nThe character to be translated into a virtual-key code.\nReturn value\nType: SHORT\nIf the function succeeds, the low-order byte of the return value contains the virtual-key code and the high-order byte contains the shift state, which can be a combination of the following flag bits.\n\n\nReturn value\nDescription\n\n\n\n\n1\n\n\n\nEither SHIFT key is pressed.\n\n\n\n\n\n2\n\n\n\nEither CTRL key is pressed.\n\n\n\n\n\n4\n\n\n\nEither ALT key is pressed.\n\n\n\n\n\n8\n\n\n\nThe Hankaku key is pressed\n\n\n\n\n\n16\n\n\n\nReserved (defined by the keyboard layout driver).\n\n\n\n\n\n32\n\n\n\nReserved (defined by the keyboard layout driver).\n\n\n\n\u00c2\u00a0\nIf the function finds no key that translates to the passed character code, both the low-order and high-order bytes contain\n\u00e2\u0080\u00931.\nRemarks\nFor keyboard layouts that use the right-hand ALT key as a shift key (for example, the French keyboard layout), the shift state is represented by the value 6, because the right-hand ALT key is converted internally into CTRL+ALT.\nTranslations for the numeric keypad (VK_NUMPAD0 through VK_DIVIDE) are ignored. This function is intended to translate characters into keystrokes from the main keyboard section only. For example, the character \"7\" is translated into VK_7, not VK_NUMPAD7.\nVkKeyScan is used by applications that send characters by using the WM_KEYUP and WM_KEYDOWN messages.\n\nNote\nThe winuser.h header defines VkKeyScan as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see Conventions for Function Prototypes.\n\nRequirements\n\n\n\n\u00c2\u00a0\n\u00c2\u00a0\n\n\n\n\nMinimum supported client\nWindows\u00c2\u00a02000 Professional [desktop apps only]\n\n\nMinimum supported server\nWindows\u00c2\u00a02000 Server [desktop apps only]\n\n\nTarget Platform\nWindows\n\n\nHeader\nwinuser.h (include Windows.h)\n\n\nLibrary\nUser32.lib\n\n\nDLL\nUser32.dll\n\n\n\nSee also\nConceptual\nGetAsyncKeyState\nGetKeyNameText\nGetKeyState\nGetKeyboardState\nKeyboard Input\nReference\nSetKeyboardState\nVkKeyScanEx\nWM_KEYDOWN\nWM_KEYUP", "parameters": [{"name": "ch", "type": "TCHAR", "description": "The character to be translated into a virtual-key code.", "possible_constants": []}]}, {"name": "WaitForInputIdle", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-waitforinputidle", "description": "Waits until the specified process has finished processing its initial input and is waiting for user input with no input pending, or until the time-out interval has elapsed.", "parameters": [{"name": "hProcess", "type": "", "description": "A handle to the process. If this process is a console application or does not have a message queue,\nWaitForInputIdle returns immediately.", "possible_constants": []}, {"name": "dwMilliseconds", "type": "", "description": "The time-out interval, in milliseconds. If dwMilliseconds is INFINITE, the function does not return until the process is idle.", "possible_constants": []}]}, {"name": "WaitMessage", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-waitmessage", "description": "Yields control to other threads when a thread has no other messages in its message queue. The WaitMessage function suspends the thread and does not return until a new message is placed in the thread's message queue.", "parameters": []}, {"name": "WindowFromDC", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-windowfromdc", "description": "The WindowFromDC function returns a handle to the window associated with the specified display device context (DC). Output functions that use the specified device context draw into this window.", "parameters": [{"name": "hDC", "type": "", "description": "Handle to the device context from which a handle to the associated window is to be retrieved.", "possible_constants": []}]}, {"name": "WindowFromPhysicalPoint", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-windowfromphysicalpoint", "description": "Retrieves a handle to the window that contains the specified physical point.", "parameters": [{"name": "Point", "type": "POINT", "description": "The physical coordinates of the point.", "possible_constants": []}]}, {"name": "WindowFromPoint", "return_type": "HWND", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-windowfrompoint", "description": "Retrieves a handle to the window that contains the specified point.", "parameters": [{"name": "Point", "type": "POINT", "description": "The point to be checked.", "possible_constants": []}]}, {"name": "WinHelpA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-winhelpa", "description": "Launches Windows Help (Winhelp.exe) and passes additional data that indicates the nature of the help requested by the application.", "parameters": [{"name": "hWndMain", "type": "HWND", "description": "A handle to the window requesting help. The WinHelp function uses this handle to keep track of which applications have requested help. If the uCommand parameter specifies HELP_CONTEXTMENU or HELP_WM_HELP, hWndMain identifies the control requesting help.", "possible_constants": []}, {"name": "lpszHelp", "type": "LPCTSTR", "description": "The address of a null-terminated string containing the path, if necessary, and the name of the Help file that WinHelp is to display.\nThe file name can be followed by an angle bracket (>) and the name of a secondary window if the topic is to be displayed in a secondary window rather than in the primary window. You must define the name of the secondary window in the [WINDOWS] section of the Help project (.hpj) file.", "possible_constants": []}, {"name": "uCommand", "type": "UINT", "description": "The type of help requested. For a list of possible values and how they affect the value to place in the dwData parameter, see the Remarks section.", "possible_constants": []}, {"name": "dwData", "type": "ULONG_PTR", "description": "Additional data. The value used depends on the value of the uCommand parameter. For a list of possible dwData values, see the Remarks section.", "possible_constants": []}]}, {"name": "WinHelpW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-winhelpw", "description": "Launches Windows Help (Winhelp.exe) and passes additional data that indicates the nature of the help requested by the application.", "parameters": [{"name": "hWndMain", "type": "HWND", "description": "A handle to the window requesting help. The WinHelp function uses this handle to keep track of which applications have requested help. If the uCommand parameter specifies HELP_CONTEXTMENU or HELP_WM_HELP, hWndMain identifies the control requesting help.", "possible_constants": []}, {"name": "lpszHelp", "type": "LPCTSTR", "description": "The address of a null-terminated string containing the path, if necessary, and the name of the Help file that WinHelp is to display.\nThe file name can be followed by an angle bracket (>) and the name of a secondary window if the topic is to be displayed in a secondary window rather than in the primary window. You must define the name of the secondary window in the [WINDOWS] section of the Help project (.hpj) file.", "possible_constants": []}, {"name": "uCommand", "type": "UINT", "description": "The type of help requested. For a list of possible values and how they affect the value to place in the dwData parameter, see the Remarks section.", "possible_constants": []}, {"name": "dwData", "type": "ULONG_PTR", "description": "Additional data. The value used depends on the value of the uCommand parameter. For a list of possible dwData values, see the Remarks section.", "possible_constants": []}]}, {"name": "wsprintfA", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-wsprintfa", "description": "Writes formatted data to the specified buffer. Any arguments are converted and copied to the output buffer according to the corresponding format specification in the format string. The function appends a terminating null character to the characters it writes, but the return value does not include the terminating null character in its character count.", "parameters": [{"name": "unnamedParam1", "type": "LPTSTR", "description": "The buffer that is to receive the formatted output. The maximum size of the buffer is 1,024 bytes.", "possible_constants": []}, {"name": "unnamedParam2", "type": "LPCTSTR", "description": "The format-control specifications. In addition to ordinary ASCII characters, a format specification for each argument appears in this string. For more information about the format specification, see the Remarks section.", "possible_constants": []}, {"name": "...", "type": "", "description": "One or more optional arguments. The number and type of argument parameters depend on the corresponding format-control specifications in the lpFmt parameter.", "possible_constants": []}]}, {"name": "wsprintfW", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-wsprintfw", "description": "Writes formatted data to the specified buffer. Any arguments are converted and copied to the output buffer according to the corresponding format specification in the format string. The function appends a terminating null character to the characters it writes, but the return value does not include the terminating null character in its character count.", "parameters": [{"name": "unnamedParam1", "type": "LPTSTR", "description": "The buffer that is to receive the formatted output. The maximum size of the buffer is 1,024 bytes.", "possible_constants": []}, {"name": "unnamedParam2", "type": "LPCTSTR", "description": "The format-control specifications. In addition to ordinary ASCII characters, a format specification for each argument appears in this string. For more information about the format specification, see the Remarks section.", "possible_constants": []}, {"name": "...", "type": "", "description": "One or more optional arguments. The number and type of argument parameters depend on the corresponding format-control specifications in the lpFmt parameter.", "possible_constants": []}]}, {"name": "wvsprintfA", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-wvsprintfa", "description": "Writes formatted data to the specified buffer using a pointer to a list of arguments. The items pointed to by the argument list are converted and copied to an output buffer according to the corresponding format specification in the format-control string. The function appends a terminating null character to the characters it writes, but the return value does not include the terminating null character in its character count.", "parameters": [{"name": "unnamedParam1", "type": "LPTSTR", "description": "The buffer that is to receive the formatted output. The maximum size of the buffer is 1,024 bytes.", "possible_constants": []}, {"name": "unnamedParam2", "type": "LPCTSTR", "description": "The format-control specifications. In addition to ordinary ASCII characters, a format specification for each argument appears in this string. For more information about the format specification, see the wsprintf function.", "possible_constants": []}, {"name": "arglist", "type": "va_list", "description": "Each element of this list specifies an argument for the format-control string. The number, type, and interpretation of the arguments depend on the corresponding format-control specifications in the\nlpFmt parameter.", "possible_constants": []}]}, {"name": "wvsprintfW", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-wvsprintfw", "description": "Writes formatted data to the specified buffer using a pointer to a list of arguments. The items pointed to by the argument list are converted and copied to an output buffer according to the corresponding format specification in the format-control string. The function appends a terminating null character to the characters it writes, but the return value does not include the terminating null character in its character count.", "parameters": [{"name": "unnamedParam1", "type": "LPTSTR", "description": "The buffer that is to receive the formatted output. The maximum size of the buffer is 1,024 bytes.", "possible_constants": []}, {"name": "unnamedParam2", "type": "LPCTSTR", "description": "The format-control specifications. In addition to ordinary ASCII characters, a format specification for each argument appears in this string. For more information about the format specification, see the wsprintf function.", "possible_constants": []}, {"name": "arglist", "type": "va_list", "description": "Each element of this list specifies an argument for the format-control string. The number, type, and interpretation of the arguments depend on the corresponding format-control specifications in the\nlpFmt parameter.", "possible_constants": []}]}]}