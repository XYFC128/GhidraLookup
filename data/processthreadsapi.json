{"functions": [{"name": "CreateProcessA", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessa", "description": "Creates a new process and its primary thread. The new process runs in the security context of the calling process.", "parameters": [{"name": "lpApplicationName", "type": "", "description": "\nThe name of the module to be executed. This module can be a Windows-based application. It can be some other type of module (for example, MS-DOS or OS/2) if the appropriate subsystem is available on the local computer.\nThe string can specify the full path and file name of the module to execute or it can specify a partial name. In the case of a partial name, the function uses the current drive and current directory to complete the specification. The function will not use the search path. This parameter must include the file name extension; no default extension is assumed.\nThe lpApplicationName parameter can be NULL. In that case, the module name must be the first white space\u00e2\u0080\u0093delimited token in the lpCommandLine string. If you are using a long file name that contains a space, use quoted strings to indicate where the file name ends and the arguments begin; otherwise, the file name is ambiguous. For example, consider the string \"c:\\program files\\sub dir\\program name\". This string can be interpreted in a number of ways. The system tries to interpret the possibilities in the following order:", "possible_constants": []}]}, {"name": "CreateProcessAsUserA", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessasusera", "description": "Creates a new process and its primary thread. The new process runs in the security context of the user represented by the specified token.", "parameters": [{"name": "hToken", "type": "", "description": "\nA handle to the primary token that represents a user. The handle must have the TOKEN_QUERY, TOKEN_DUPLICATE, and TOKEN_ASSIGN_PRIMARY access rights. For more information, see\nAccess Rights for Access-Token Objects. The user represented by the token must have read and execute access to the application specified by the lpApplicationName or the lpCommandLine parameter.\nTo get a primary token that represents the specified user, call the\nLogonUser function. Alternatively, you can call the\nDuplicateTokenEx function to convert an impersonation token into a primary token. This allows a server application that is impersonating a client to create a process that has the security context of the client.\nIf hToken is a restricted version of the caller's primary token, the SE_ASSIGNPRIMARYTOKEN_NAME privilege is not required. If the necessary privileges are not already enabled,\nCreateProcessAsUser enables them for the duration of the call. For more information, see\nRunning with Special Privileges.\nTerminal Services:\u00c2\u00a0\u00c2\u00a0The process is run in the session specified in the token. By default, this is the same session that called LogonUser. To change the session, use the\nSetTokenInformation function.", "possible_constants": []}, {"name": "lpApplicationName", "type": "", "description": "\nThe name of the module to be executed. This module can be a Windows-based application. It can be some other type of module (for example, MS-DOS or OS/2) if the appropriate subsystem is available on the local computer.\nThe string can specify the full path and file name of the module to execute or it can specify a partial name. In the case of a partial name, the function uses the current drive and current directory to complete the specification. The function will not use the search path. This parameter must include the file name extension; no default extension is assumed.\nThe lpApplicationName parameter can be NULL. In that case, the module name must be the first white space\u00e2\u0080\u0093delimited token in the lpCommandLine string. If you are using a long file name that contains a space, use quoted strings to indicate where the file name ends and the arguments begin; otherwise, the file name is ambiguous. For example, consider the string \"c:\\program files\\sub dir\\program name\". This string can be interpreted in a number of ways. The system tries to interpret the possibilities in the following order:\nc:\\program.exe\nc:\\program files\\sub.exe\nc:\\program files\\sub dir\\program.exe\nc:\\program files\\sub dir\\program name.exe\nIf the executable module is a 16-bit application, lpApplicationName should be NULL, and the string pointed to by lpCommandLine should specify the executable module as well as its arguments. By default, all 16-bit Windows-based applications created by\nCreateProcessAsUser are run in a separate VDM (equivalent to CREATE_SEPARATE_WOW_VDM in\nCreateProcess).", "possible_constants": []}, {"name": "lpCommandLine", "type": "", "description": "\nThe command line to be executed. The maximum length of this string is 32K characters. If lpApplicationName is NULL, the module name portion of lpCommandLine is limited to MAX_PATH characters.\nThe Unicode version of this function, CreateProcessAsUserW, can modify the contents of this string. Therefore, this parameter cannot be a pointer to read-only memory (such as a const variable or a literal string). If this parameter is a constant string, the function may cause an access violation.\nThe lpCommandLine parameter can be NULL. In that case, the function uses the string pointed to by lpApplicationName as the command line.\nIf both lpApplicationName and lpCommandLine are non-NULL, *lpApplicationName specifies the module to execute, and *lpCommandLine specifies the command line. The new process can use\nGetCommandLine to retrieve the entire command line. Console processes written in C can use the argc and argv arguments to parse the command line. Because argv[0] is the module name, C programmers generally repeat the module name as the first token in the command line.\nIf lpApplicationName is NULL, the first white space\u00e2\u0080\u0093delimited token of the command line specifies the module name. If you are using a long file name that contains a space, use quoted strings to indicate where the file name ends and the arguments begin (see the explanation for the lpApplicationName parameter). If the file name does not contain an extension, .exe is appended. Therefore, if the file name extension is .com, this parameter must include the .com extension. If the file name ends in a period (.) with no extension, or if the file name contains a path, .exe is not appended. If the file name does not contain a directory path, the system searches for the executable file in the following sequence:", "possible_constants": []}]}, {"name": "CreateProcessAsUserW", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessasuserw", "description": "Creates a new process and its primary thread. The new process runs in the security context of the user represented by the specified token.", "parameters": [{"name": "hToken", "type": "", "description": "\nA handle to the primary token that represents a user. The handle must have the TOKEN_QUERY, TOKEN_DUPLICATE, and TOKEN_ASSIGN_PRIMARY access rights. For more information, see\nAccess Rights for Access-Token Objects. The user represented by the token must have read and execute access to the application specified by the lpApplicationName or the lpCommandLine parameter.\nTo get a primary token that represents the specified user, call the\nLogonUser function. Alternatively, you can call the\nDuplicateTokenEx function to convert an impersonation token into a primary token. This allows a server application that is impersonating a client to create a process that has the security context of the client.\nIf hToken is a restricted version of the caller's primary token, the SE_ASSIGNPRIMARYTOKEN_NAME privilege is not required. If the necessary privileges are not already enabled,\nCreateProcessAsUser enables them for the duration of the call. For more information, see\nRunning with Special Privileges.\nTerminal Services:\u00c2\u00a0\u00c2\u00a0The process is run in the session specified in the token. By default, this is the same session that called LogonUser. To change the session, use the\nSetTokenInformation function.", "possible_constants": []}, {"name": "lpApplicationName", "type": "", "description": "\nThe name of the module to be executed. This module can be a Windows-based application. It can be some other type of module (for example, MS-DOS or OS/2) if the appropriate subsystem is available on the local computer.\nThe string can specify the full path and file name of the module to execute or it can specify a partial name. In the case of a partial name, the function uses the current drive and current directory to complete the specification. The function will not use the search path. This parameter must include the file name extension; no default extension is assumed.\nThe lpApplicationName parameter can be NULL. In that case, the module name must be the first white space\u00e2\u0080\u0093delimited token in the lpCommandLine string. If you are using a long file name that contains a space, use quoted strings to indicate where the file name ends and the arguments begin; otherwise, the file name is ambiguous. For example, consider the string \"c:\\program files\\sub dir\\program name\". This string can be interpreted in a number of ways. The system tries to interpret the possibilities in the following order:\nc:\\program.exe\nc:\\program files\\sub.exe\nc:\\program files\\sub dir\\program.exe\nc:\\program files\\sub dir\\program name.exe\nIf the executable module is a 16-bit application, lpApplicationName should be NULL, and the string pointed to by lpCommandLine should specify the executable module as well as its arguments. By default, all 16-bit Windows-based applications created by\nCreateProcessAsUser are run in a separate VDM (equivalent to CREATE_SEPARATE_WOW_VDM in\nCreateProcess).", "possible_constants": []}, {"name": "lpCommandLine", "type": "", "description": "\nThe command line to be executed. The maximum length of this string is 32K characters. If lpApplicationName is NULL, the module name portion of lpCommandLine is limited to MAX_PATH characters.\nThe Unicode version of this function, CreateProcessAsUserW, can modify the contents of this string. Therefore, this parameter cannot be a pointer to read-only memory (such as a const variable or a literal string). If this parameter is a constant string, the function may cause an access violation.\nThe lpCommandLine parameter can be NULL. In that case, the function uses the string pointed to by lpApplicationName as the command line.\nIf both lpApplicationName and lpCommandLine are non-NULL, *lpApplicationName specifies the module to execute, and *lpCommandLine specifies the command line. The new process can use\nGetCommandLine to retrieve the entire command line. Console processes written in C can use the argc and argv arguments to parse the command line. Because argv[0] is the module name, C programmers generally repeat the module name as the first token in the command line.\nIf lpApplicationName is NULL, the first white space\u00e2\u0080\u0093delimited token of the command line specifies the module name. If you are using a long file name that contains a space, use quoted strings to indicate where the file name ends and the arguments begin (see the explanation for the lpApplicationName parameter). If the file name does not contain an extension, .exe is appended. Therefore, if the file name extension is .com, this parameter must include the .com extension. If the file name ends in a period (.) with no extension, or if the file name contains a path, .exe is not appended. If the file name does not contain a directory path, the system searches for the executable file in the following sequence:", "possible_constants": []}]}, {"name": "CreateProcessW", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessw", "description": "Creates a new process and its primary thread. The new process runs in the security context of the calling process.", "parameters": [{"name": "lpApplicationName", "type": "", "description": "\nThe name of the module to be executed. This module can be a Windows-based application. It can be some other type of module (for example, MS-DOS or OS/2) if the appropriate subsystem is available on the local computer.\nThe string can specify the full path and file name of the module to execute or it can specify a partial name. In the case of a partial name, the function uses the current drive and current directory to complete the specification. The function will not use the search path. This parameter must include the file name extension; no default extension is assumed.\nThe lpApplicationName parameter can be NULL. In that case, the module name must be the first white space\u00e2\u0080\u0093delimited token in the lpCommandLine string. If you are using a long file name that contains a space, use quoted strings to indicate where the file name ends and the arguments begin; otherwise, the file name is ambiguous. For example, consider the string \"c:\\program files\\sub dir\\program name\". This string can be interpreted in a number of ways. The system tries to interpret the possibilities in the following order:", "possible_constants": []}]}, {"name": "CreateRemoteThread", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createremotethread", "description": "Creates a thread that runs in the virtual address space of another process.", "parameters": [{"name": "hProcess", "type": "", "description": "\nA handle to the process in which the thread is to be created. The handle must have the PROCESS_CREATE_THREAD, PROCESS_QUERY_INFORMATION, PROCESS_VM_OPERATION, PROCESS_VM_WRITE, and PROCESS_VM_READ access rights, and may fail without these rights on certain platforms. For more information, see\nProcess Security and Access Rights.", "possible_constants": []}, {"name": "lpThreadAttributes", "type": "", "description": "\nA pointer to a\nSECURITY_ATTRIBUTES structure that specifies a security descriptor for the new thread and determines whether child processes can inherit the returned handle. If lpThreadAttributes is NULL, the thread gets a default security descriptor and the handle cannot be inherited. The access control lists (ACL) in the default security descriptor for a thread come from the primary token of the creator.\nWindows\u00c2\u00a0XP:\u00c2\u00a0\u00c2\u00a0The ACLs in the default security descriptor for a thread come from the primary or impersonation token of the creator. This behavior changed with Windows\u00c2\u00a0XP with SP2 and Windows Server\u00c2\u00a02003.", "possible_constants": []}, {"name": "dwStackSize", "type": "", "description": "\nThe initial size of the stack, in bytes. The system rounds this value to the nearest page. If this parameter is 0 (zero), the new thread uses the default size for the executable. For more information, see\nThread Stack Size.", "possible_constants": []}, {"name": "lpStartAddress", "type": "", "description": "\nA pointer to the application-defined function of type LPTHREAD_START_ROUTINE to be executed by the thread and represents the starting address of the thread in the remote process. The function must exist in the remote process. For more information, see\nThreadProc.", "possible_constants": []}, {"name": "lpParameter", "type": "", "description": "\nA pointer to a variable to be passed to the thread function.", "possible_constants": []}, {"name": "dwCreationFlags", "type": "", "description": "\nThe flags that control the creation of the thread.", "possible_constants": [{"0": -1}, {"CREATE_SUSPENDED": 4}, {"STACK_SIZE_PARAM_IS_A_RESERVATION": 65536}]}, {"name": "lpThreadId", "type": "", "description": "\nA pointer to a variable that receives the thread identifier.\nIf this parameter is NULL, the thread identifier is not returned.", "possible_constants": []}]}, {"name": "CreateRemoteThreadEx", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createremotethreadex", "description": "Creates a thread that runs in the virtual address space of another process and optionally specifies extended attributes such as processor group affinity.", "parameters": [{"name": "hProcess", "type": "", "description": "\nA handle to the process in which the thread is to be created. The handle must have the PROCESS_CREATE_THREAD, PROCESS_QUERY_INFORMATION, PROCESS_VM_OPERATION, PROCESS_VM_WRITE, and PROCESS_VM_READ access rights. In Windows\u00c2\u00a010, version 1607, your code must obtain these access rights for the new handle. However, starting in Windows\u00c2\u00a010, version 1703, if the new handle is entitled to these access rights, the system obtains them for you. For more information, see\nProcess Security and Access Rights.", "possible_constants": []}, {"name": "lpThreadAttributes", "type": "", "description": "\nA pointer to a\nSECURITY_ATTRIBUTES structure that specifies a security descriptor for the new thread and determines whether child processes can inherit the returned handle. If lpThreadAttributes is NULL, the thread gets a default security descriptor and the handle cannot be inherited. The access control lists (ACL) in the default security descriptor for a thread come from the primary token of the creator.", "possible_constants": []}, {"name": "dwStackSize", "type": "", "description": "\nThe initial size of the stack, in bytes. The system rounds this value to the nearest page. If this parameter is 0 (zero), the new thread uses the default size for the executable. For more information, see\nThread Stack Size.", "possible_constants": []}, {"name": "lpStartAddress", "type": "", "description": "\nA pointer to the application-defined function of type LPTHREAD_START_ROUTINE to be executed by the thread and represents the starting address of the thread in the remote process. The function must exist in the remote process. For more information, see\nThreadProc.", "possible_constants": []}, {"name": "lpParameter", "type": "", "description": "\nA pointer to a variable to be passed to the thread function pointed to by lpStartAddress. This parameter can be NULL.", "possible_constants": []}, {"name": "dwCreationFlags", "type": "", "description": "\nThe flags that control the creation of the thread.", "possible_constants": [{"0": -1}, {"CREATE_SUSPENDED": 4}, {"STACK_SIZE_PARAM_IS_A_RESERVATION": 65536}]}, {"name": "lpAttributeList", "type": "", "description": "\nAn attribute list that contains additional parameters for the new thread. This list is created by the InitializeProcThreadAttributeList function.", "possible_constants": []}, {"name": "lpThreadId", "type": "", "description": "\nA pointer to a variable that receives the thread identifier.\nIf this parameter is NULL, the thread identifier is not returned.", "possible_constants": []}]}, {"name": "CreateThread", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createthread", "description": "Creates a thread to execute within the virtual address space of the calling process.", "parameters": [{"name": "lpThreadAttributes", "type": "", "description": "\nA pointer to a SECURITY_ATTRIBUTES\nstructure that determines whether the returned handle can be inherited by child processes. If\nlpThreadAttributes is NULL, the handle cannot be inherited.\nThe lpSecurityDescriptor member of the structure specifies a security descriptor for the new thread. If lpThreadAttributes is NULL, the thread gets a default security descriptor. The ACLs in the default security descriptor for a thread come from the primary token of the creator.", "possible_constants": []}, {"name": "dwStackSize", "type": "", "description": "\nThe initial size of the stack, in bytes. The system rounds this value to the nearest page. If this parameter is zero, the new thread uses the default size for the executable. For more information, see\nThread Stack Size.", "possible_constants": []}, {"name": "lpStartAddress", "type": "", "description": "\nA pointer to the application-defined function to be executed by the thread. This pointer represents the starting address of the thread. For more information on the thread function, see\nThreadProc.", "possible_constants": []}, {"name": "lpParameter", "type": "", "description": "\nA pointer to a variable to be passed to the thread.", "possible_constants": []}, {"name": "dwCreationFlags", "type": "", "description": "\nThe flags that control the creation of the thread.", "possible_constants": [{"0": -1}, {"CREATE_SUSPENDED": 4}, {"STACK_SIZE_PARAM_IS_A_RESERVATION": 65536}]}, {"name": "lpThreadId", "type": "", "description": "\nA pointer to a variable that receives the  thread identifier. If this parameter is\nNULL, the thread identifier is not returned.", "possible_constants": []}]}, {"name": "DeleteProcThreadAttributeList", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-deleteprocthreadattributelist", "description": "Deletes the specified list of attributes for process and thread creation.", "parameters": [{"name": "lpAttributeList", "type": "", "description": "\nThe attribute list. This list is created by the InitializeProcThreadAttributeList function.", "possible_constants": []}]}, {"name": "ExitProcess", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-exitprocess", "description": "Ends the calling process and all its threads.", "parameters": [{"name": "uExitCode", "type": "", "description": "\nThe exit code for the process and all threads.", "possible_constants": []}]}, {"name": "ExitThread", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-exitthread", "description": "Ends the calling thread.", "parameters": [{"name": "dwExitCode", "type": "", "description": "\nThe exit code for the thread.", "possible_constants": []}]}, {"name": "FlushInstructionCache", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-flushinstructioncache", "description": "Flushes the instruction cache for the specified process.", "parameters": [{"name": "hProcess", "type": "", "description": "\nA handle to a process whose instruction cache is to be flushed.", "possible_constants": []}, {"name": "lpBaseAddress", "type": "", "description": "\nA pointer to the base of the region to be flushed. This parameter can be NULL.", "possible_constants": []}, {"name": "dwSize", "type": "", "description": "\nThe size of the region to be flushed if the lpBaseAddress parameter is not NULL, in bytes.", "possible_constants": []}]}, {"name": "FlushProcessWriteBuffers", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-flushprocesswritebuffers", "description": "Flushes the write queue of each processor that is running a thread of the current process.", "parameters": []}, {"name": "GetCurrentProcess", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getcurrentprocess", "description": "Retrieves a pseudo handle for the current process.", "parameters": []}, {"name": "GetCurrentProcessId", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getcurrentprocessid", "description": "Retrieves the process identifier of the calling process.", "parameters": []}, {"name": "GetCurrentProcessorNumber", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getcurrentprocessornumber", "description": "Retrieves the number of the processor the current thread was running on during the call to this function.", "parameters": []}, {"name": "GetCurrentProcessorNumberEx", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getcurrentprocessornumberex", "description": "Retrieves the processor group and number of the logical processor in which the calling thread is running.", "parameters": [{"name": "ProcNumber", "type": "", "description": "\nA pointer to a PROCESSOR_NUMBER structure that receives the processor group to which the logical processor is assigned and the number of the logical processor within its group.", "possible_constants": []}]}, {"name": "GetCurrentProcessToken", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getcurrentprocesstoken", "description": "Retrieves a pseudo-handle that you can use as a shorthand way to refer to the access token associated with a process.", "parameters": []}, {"name": "GetCurrentThread", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getcurrentthread", "description": "Retrieves a pseudo handle for the calling thread.", "parameters": []}, {"name": "GetCurrentThreadEffectiveToken", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getcurrentthreadeffectivetoken", "description": "Retrieves a pseudo-handle that you can use as a shorthand way to refer to the token that is currently in effect for the thread, which is the thread token if one exists and the process token otherwise.", "parameters": []}, {"name": "GetCurrentThreadId", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getcurrentthreadid", "description": "Retrieves the thread identifier of the calling thread.", "parameters": []}, {"name": "GetCurrentThreadStackLimits", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getcurrentthreadstacklimits", "description": "Retrieves the boundaries of the stack that was allocated by the system for the current thread.", "parameters": [{"name": "LowLimit", "type": "", "description": "\nA pointer variable that receives the lower boundary of the current thread stack.", "possible_constants": []}, {"name": "HighLimit", "type": "", "description": "\nA pointer variable that receives the upper boundary of the current thread stack.", "possible_constants": []}]}, {"name": "GetCurrentThreadToken", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getcurrentthreadtoken", "description": "Retrieves a pseudo-handle that you can use as a shorthand way to refer to the impersonation token that was assigned to the current thread.", "parameters": []}, {"name": "GetExitCodeProcess", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getexitcodeprocess", "description": "Retrieves the termination status of the specified process.", "parameters": [{"name": "hProcess", "type": "", "description": "\nA handle to the process.\nThe handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right. For more information, see\nProcess Security and Access Rights.\nWindows Server\u00c2\u00a02003 and Windows\u00c2\u00a0XP:\u00c2\u00a0\u00c2\u00a0The handle must have the PROCESS_QUERY_INFORMATION access right.", "possible_constants": []}, {"name": "lpExitCode", "type": "", "description": "\nA pointer to a variable to receive the process termination status. For more information, see Remarks.", "possible_constants": []}]}, {"name": "GetExitCodeThread", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getexitcodethread", "description": "Retrieves the termination status of the specified thread.", "parameters": [{"name": "hThread", "type": "", "description": "\nA handle to the thread.\nThe handle must have the THREAD_QUERY_INFORMATION or THREAD_QUERY_LIMITED_INFORMATION access right. For more information, see\nThread Security and Access Rights.\nWindows Server\u00c2\u00a02003 and Windows\u00c2\u00a0XP:\u00c2\u00a0\u00c2\u00a0The handle must have the THREAD_QUERY_INFORMATION access right.", "possible_constants": []}, {"name": "lpExitCode", "type": "", "description": "\nA pointer to a variable to receive the thread termination status. For more information, see Remarks.", "possible_constants": []}]}, {"name": "GetPriorityClass", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getpriorityclass", "description": "Retrieves the priority class for the specified process. This value, together with the priority value of each thread of the process, determines each thread's base priority level.", "parameters": [{"name": "hProcess", "type": "", "description": "\nA handle to the process.\nThe handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right. For more information, see\nProcess Security and Access Rights.\nWindows Server\u00c2\u00a02003 and Windows\u00c2\u00a0XP:\u00c2\u00a0\u00c2\u00a0The handle must have the PROCESS_QUERY_INFORMATION access right.", "possible_constants": []}]}, {"name": "GetProcessDefaultCpuSetMasks", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getprocessdefaultcpusetmasks", "description": "Retrieves the list of CPU Sets in the process default set that was set by SetProcessDefaultCpuSetMasks or SetProcessDefaultCpuSets.", "parameters": [{"name": "Process", "type": "", "description": "\nSpecifies a process handle for the process to query. This handle must have the PROCESS_QUERY_LIMITED_INFORMATION access right. The value returned by GetCurrentProcess can also be specified here.", "possible_constants": []}, {"name": "CpuSetMasks", "type": "", "description": "\nSpecifies an optional buffer to retrieve a list of GROUP_AFFINITY structures representing the process default CPU Sets.", "possible_constants": []}, {"name": "CpuSetMaskCount", "type": "", "description": "\nSpecifies the size of the CpuSetMasks array, in elements.", "possible_constants": []}, {"name": "RequiredMaskCount", "type": "", "description": "\nOn successful return, specifies the number of affinity structures written to the array. If the CpuSetMasks array is too small, the function fails with ERROR_INSUFFICIENT_BUFFER and sets the RequiredMaskCount parameter to the number of elements required. The number of required elements is always less than or equal to the maximum group count returned by GetMaximumProcessorGroupCount.", "possible_constants": []}]}, {"name": "GetProcessDefaultCpuSets", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getprocessdefaultcpusets", "description": "Retrieves the list of CPU Sets in the process default set that was set by SetProcessDefaultCpuSets. If no default CPU Sets are set for a given process, then the RequiredIdCount is set to 0 and the function succeeds.", "parameters": [{"name": "Process", "type": "", "description": "\nSpecifies a process handle for the process to query. This handle must have the PROCESS_QUERY_LIMITED_INFORMATION access right. The value returned by GetCurrentProcess can also be specified here.", "possible_constants": []}, {"name": "CpuSetIds", "type": "", "description": "\nSpecifies an optional buffer to retrieve the list of CPU Set identifiers.", "possible_constants": []}, {"name": "CpuSetIdCount", "type": "", "description": "\nSpecifies the capacity of the buffer specified in CpuSetIds. If the buffer is NULL, this must be 0.", "possible_constants": []}, {"name": "RequiredIdCount", "type": "", "description": "\nSpecifies the required capacity of the buffer to hold the entire list of process default CPU Sets. On successful return, this specifies the number of IDs filled into the buffer.", "possible_constants": []}]}, {"name": "GetProcessHandleCount", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getprocesshandlecount", "description": "Retrieves the number of open handles  that belong to the specified process.", "parameters": [{"name": "hProcess", "type": "", "description": "\nA handle to the process whose handle count is being requested.  The\nhandle must have the PROCESS_QUERY_INFORMATION\nor PROCESS_QUERY_LIMITED_INFORMATION access right. For more information, see Process Security and Access Rights.\nWindows Server\u00c2\u00a02003 and Windows\u00c2\u00a0XP:\u00c2\u00a0\u00c2\u00a0The handle must have the PROCESS_QUERY_INFORMATION access right.", "possible_constants": []}, {"name": "pdwHandleCount", "type": "", "description": "\nA pointer to a variable that receives the number of open handles that belong to the specified process.", "possible_constants": []}]}, {"name": "GetProcessId", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getprocessid", "description": "Retrieves the process identifier of the specified process.", "parameters": [{"name": "Process", "type": "", "description": "\nA handle to the process. The handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right. For more information, see\nProcess Security and Access Rights.\nWindows Server\u00c2\u00a02003 and Windows\u00c2\u00a0XP:\u00c2\u00a0\u00c2\u00a0The handle must have the PROCESS_QUERY_INFORMATION access right.", "possible_constants": []}]}, {"name": "GetProcessIdOfThread", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getprocessidofthread", "description": "Retrieves the process identifier of the process associated with the specified thread.", "parameters": [{"name": "Thread", "type": "", "description": "\nA handle to the thread. The handle must have the THREAD_QUERY_INFORMATION or THREAD_QUERY_LIMITED_INFORMATION access right. For more information, see\nThread Security and Access Rights.\nWindows Server\u00c2\u00a02003:\u00c2\u00a0\u00c2\u00a0The handle must have the THREAD_QUERY_INFORMATION access right.", "possible_constants": []}]}, {"name": "GetProcessInformation", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getprocessinformation", "description": "Retrieves information about the specified process.", "parameters": [{"name": "hProcess", "type": "", "description": "\nA handle to the process. This handle must have the PROCESS_SET_INFORMATION access\nright. For more information, see\nProcess Security and Access Rights.", "possible_constants": []}, {"name": "ProcessInformationClass", "type": "", "description": "\nA member of the PROCESS_INFORMATION_CLASS enumeration specifying the kind of information to retrieve.", "possible_constants": []}, {"name": "ProcessInformation", "type": "", "description": "\nPointer to an object to receive the type of information specified by the\nProcessInformationClass parameter.\nIf the ProcessInformationClass parameter is\nProcessMemoryPriority, this parameter must point to a\nMEMORY_PRIORITY_INFORMATION structure.\nIf the ProcessInformationClass parameter is\nProcessPowerThrottling, this parameter must point to a\nPROCESS_POWER_THROTTLING_STATE structure.\nIf the ProcessInformationClass parameter is\nProcessProtectionLevelInfo, this parameter must point to a\nPROCESS_PROTECTION_LEVEL_INFORMATION structure.\nIf the ProcessInformationClass parameter is\nProcessLeapSecondInfo, this parameter must point to a\nPROCESS_LEAP_SECOND_INFO structure.\nIf the ProcessInformationClass parameter is\nProcessAppMemoryInfo, this parameter must point to a\nAPP_MEMORY_INFORMATION structure.", "possible_constants": []}, {"name": "ProcessInformationSize", "type": "", "description": "\nThe size in bytes of the structure specified by the ProcessInformation parameter.", "possible_constants": []}, {"name": "If the ProcessInformationClass parameter is\nProcessMemoryPriority, this parameter must be\nsizeof(MEMORY_PRIORITY_INFORMATION).", "type": "", "description": "", "possible_constants": []}, {"name": "If the ProcessInformationClass parameter is\nProcessPowerThrottling, this parameter must be\nsizeof(PROCESS_POWER_THROTTLING_STATE).", "type": "", "description": "", "possible_constants": []}, {"name": "If the ProcessInformationClass parameter is\nProcessProtectionLevelInfo, this parameter must be\nsizeof(PROCESS_PROTECTION_LEVEL_INFORMATION).", "type": "", "description": "", "possible_constants": []}, {"name": "If the ProcessInformationClass parameter is\nProcessLeapSecondInfo, this parameter must be\nsizeof(PROCESS_LEAP_SECOND_INFO).", "type": "", "description": "", "possible_constants": []}, {"name": "If the ProcessInformationClass parameter is\nProcessAppMemoryInfo, this parameter must be\nsizeof(APP_MEMORY_INFORMATION).", "type": "", "description": "", "possible_constants": []}]}, {"name": "GetProcessMitigationPolicy", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getprocessmitigationpolicy", "description": "Retrieves mitigation policy settings for the calling process.", "parameters": [{"name": "hProcess", "type": "", "description": "\nA handle to the process. This handle must have the PROCESS_QUERY_INFORMATION access right. For more information, see Process Security and Access Rights.", "possible_constants": []}, {"name": "MitigationPolicy", "type": "", "description": "\nThe mitigation policy to retrieve. This parameter can be one of the following values.", "possible_constants": [{"ProcessDEPPolicy": -1}, {"ProcessASLRPolicy": -1}, {"ProcessDynamicCodePolicy": -1}, {"ProcessStrictHandleCheckPolicy": -1}, {"ProcessSystemCallDisablePolicy": -1}, {"ProcessMitigationOptionsMask": -1}, {"ProcessExtensionPointDisablePolicy": -1}, {"ProcessControlFlowGuardPolicy": -1}, {"ProcessSignaturePolicy": -1}, {"ProcessFontDisablePolicy": -1}, {"ProcessImageLoadPolicy": -1}, {"ProcessSideChannelIsolationPolicy": -1}, {"ProcessUserShadowStackPolicy": -1}]}, {"name": "lpBuffer", "type": "", "description": "\nIf the MitigationPolicy parameter is ProcessDEPPolicy, this parameter points to a PROCESS_MITIGATION_DEP_POLICY structure that receives the DEP policy flags.\nIf the MitigationPolicy parameter is ProcessASLRPolicy, this parameter points to a PROCESS_MITIGATION_ASLR_POLICY structure that receives the ASLR policy flags.\nIf the MitigationPolicy parameter is ProcessDynamicCodePolicy, this parameter points to a PROCESS_MITIGATION_DYNAMIC_CODE_POLICY structure that receives the dynamic code policy flags.\nIf the MitigationPolicy parameter is ProcessStrictHandleCheckPolicy, this parameter points to a PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY structure that specifies the handle check policy flags.\nIf the MitigationPolicy parameter is ProcessSystemCallDisablePolicy, this parameter points to a PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY structure that specifies the system call disable policy flags.\nIf the MitigationPolicy parameter is ProcessMitigationOptionsMask, this parameter points to a ULONG64 bit vector for the mask or a two-element array of ULONG64 bit vectors.\nIf the MitigationPolicy parameter is ProcessExtensionPointDisablePolicy, this parameter points to a PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY structure that specifies the extension point disable policy flags.\nIf the MitigationPolicy parameter is ProcessControlFlowGuardPolicy, this parameter points to a PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY structure that specifies the CFG policy flags.\nIf the MitigationPolicy parameter is ProcessSignaturePolicy, this parameter points to a PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY structure that receives the signature policy flags.\nIf the MitigationPolicy parameter is ProcessFontDisablePolicy, this parameter points to a PROCESS_MITIGATION_FONT_DISABLE_POLICY structure that receives the policy flags for font loading.\nIf the MitigationPolicy parameter is ProcessImageLoadPolicy, this parameter points to a PROCESS_MITIGATION_IMAGE_LOAD_POLICY structure that receives the policy flags for image loading.\nIf the MitigationPolicy parameter is ProcessUserShadowStackPolicy, this parameter points to a PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY structure that receives the policy flags for user-mode Hardware-enforced Stack Protection.", "possible_constants": []}, {"name": "dwLength", "type": "", "description": "\nThe size of lpBuffer, in bytes.", "possible_constants": []}]}, {"name": "GetProcessPriorityBoost", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getprocesspriorityboost", "description": "Retrieves the priority boost control state of the specified process.", "parameters": [{"name": "hProcess", "type": "", "description": "\nA handle to the process. This handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right. For more information, see\nProcess Security and Access Rights.\nWindows Server\u00c2\u00a02003 and Windows\u00c2\u00a0XP:\u00c2\u00a0\u00c2\u00a0The handle must have the PROCESS_QUERY_INFORMATION access right.", "possible_constants": []}, {"name": "pDisablePriorityBoost", "type": "", "description": "\nA pointer to a variable that receives the priority boost control state. A value of TRUE indicates that dynamic boosting is disabled. A value of FALSE indicates normal behavior.", "possible_constants": []}]}, {"name": "GetProcessShutdownParameters", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getprocessshutdownparameters", "description": "Retrieves the shutdown parameters for the currently calling process.", "parameters": [{"name": "lpdwLevel", "type": "", "description": "\nA pointer to a variable that receives the shutdown priority level. Higher levels shut down first. System level shutdown orders are reserved for system components. Higher numbers shut down first. Following are the level conventions.\nAll processes start at shutdown level 0x280.", "possible_constants": [{"000-0FF": -1}, {"100-1FF": -1}, {"200-2FF": -1}, {"300-3FF": -1}, {"400-4FF": -1}]}, {"name": "lpdwFlags", "type": "", "description": "\nA pointer to a variable that receives the shutdown flags. This parameter can be the following value.", "possible_constants": [{"SHUTDOWN_NORETRY": 1}]}]}, {"name": "GetProcessTimes", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getprocesstimes", "description": "Retrieves timing information for the specified process.", "parameters": [{"name": "hProcess", "type": "", "description": "\nA handle to the process whose timing information is sought. The handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right. For more information, see\nProcess Security and Access Rights.\nWindows Server\u00c2\u00a02003 and Windows\u00c2\u00a0XP:\u00c2\u00a0\u00c2\u00a0The handle must have the PROCESS_QUERY_INFORMATION access right.", "possible_constants": []}, {"name": "lpCreationTime", "type": "", "description": "\nA pointer to a\nFILETIME structure that receives the creation time of the process.", "possible_constants": []}, {"name": "lpExitTime", "type": "", "description": "\nA pointer to a FILETIME structure that receives the exit time of the process. If the process has not exited, the content of this structure is undefined.", "possible_constants": []}, {"name": "lpKernelTime", "type": "", "description": "\nA pointer to a\nFILETIME structure that receives the amount of time that the process has executed in kernel mode. The time that each of the threads of the process has executed in kernel mode is determined, and then all of those times are summed together to obtain this value.", "possible_constants": []}, {"name": "lpUserTime", "type": "", "description": "\nA pointer to a FILETIME structure that receives the amount of time that the process has executed in user mode. The time that each of the threads of the process has executed in user mode is determined, and then all of those times are summed together to obtain this value. Note that this value can exceed the amount of real time elapsed (between lpCreationTime and lpExitTime) if the process executes across multiple CPU cores.", "possible_constants": []}]}, {"name": "GetProcessVersion", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getprocessversion", "description": "Retrieves the major and minor version numbers of the system on which the specified process expects to run.", "parameters": [{"name": "ProcessId", "type": "", "description": "\nThe process identifier of the process of interest. A value of zero specifies the calling process.", "possible_constants": []}]}, {"name": "GetStartupInfoW", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getstartupinfow", "description": "Retrieves the contents of the\nSTARTUPINFO structure that was specified when the calling process was created.", "parameters": [{"name": "lpStartupInfo", "type": "", "description": "\nA pointer to a\nSTARTUPINFO structure that receives the startup information.", "possible_constants": []}]}, {"name": "GetSystemCpuSetInformation", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getsystemcpusetinformation", "description": "Allows an application to query the available CPU Sets on the system, and their current state.", "parameters": [{"name": "Information", "type": "", "description": "\nA pointer to a SYSTEM_CPU_SET_INFORMATION structure that receives the CPU Set data. Pass NULL with a buffer length of 0 to determine the required buffer size.", "possible_constants": []}, {"name": "BufferLength", "type": "", "description": "\nThe length, in bytes, of the output buffer passed as the Information argument.", "possible_constants": []}, {"name": "ReturnedLength", "type": "", "description": "\nThe length, in bytes, of the valid data in the output buffer if the buffer is large enough, or the required size of the output buffer. If no CPU Sets exist, this value will be 0.", "possible_constants": []}, {"name": "Process", "type": "", "description": "\nAn optional handle to a process. This process is used to determine the value of the AllocatedToTargetProcess flag in the SYSTEM_CPU_SET_INFORMATION structure. If a CPU Set is allocated to the specified process, the flag is set. Otherwise, it is clear. This handle must have the PROCESS_QUERY_LIMITED_INFORMATION access right. The value returned by GetCurrentProcess may also be specified here.", "possible_constants": []}, {"name": "Flags", "type": "", "description": "\nReserved, must be 0.", "possible_constants": []}]}, {"name": "GetSystemTimes", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getsystemtimes", "description": "Retrieves system timing information.  On a multiprocessor system, the values returned are the sum\nof the designated times across all processors.", "parameters": [{"name": "lpIdleTime", "type": "", "description": "\nA pointer to a FILETIME structure that receives the amount of time that the system has been idle.", "possible_constants": []}, {"name": "lpKernelTime", "type": "", "description": "\nA pointer to a FILETIME structure that receives the amount of time that the system has spent executing in Kernel mode (including all threads in all processes, on all processors). This time value also includes the amount of time the system has been idle.", "possible_constants": []}, {"name": "lpUserTime", "type": "", "description": "\nA pointer to a FILETIME structure that receives the amount of time that the system has spent executing in User mode (including all threads in all processes, on all processors).", "possible_constants": []}]}, {"name": "GetThreadContext", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getthreadcontext", "description": "Retrieves the context of the specified thread.", "parameters": [{"name": "hThread", "type": "", "description": "\nA handle to the thread whose context is to be retrieved. The handle must have THREAD_GET_CONTEXT access to the thread. For more information, see Thread Security and Access Rights.\nWOW64: The handle must also have THREAD_QUERY_INFORMATION access.", "possible_constants": []}, {"name": "lpContext", "type": "", "description": "\nA pointer to a CONTEXT structure (such as ARM64_NT_CONTEXT) that receives the appropriate context of the specified thread. The value of the ContextFlags member of this structure specifies which portions of a thread's context are retrieved. The       CONTEXT structure is highly processor specific. Refer to the WinNT.h header file for processor-specific definitions of this structures and any alignment requirements.", "possible_constants": []}]}, {"name": "GetThreadDescription", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getthreaddescription", "description": "Retrieves the description that was assigned to a thread by calling SetThreadDescription.", "parameters": [{"name": "hThread", "type": "", "description": "\nA handle to the thread for which to retrieve the description. The handle must have THREAD_QUERY_LIMITED_INFORMATION access.", "possible_constants": []}, {"name": "ppszThreadDescription", "type": "", "description": "\nA Unicode string that contains the description of the thread.", "possible_constants": []}]}, {"name": "GetThreadId", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getthreadid", "description": "Retrieves the thread identifier of the specified thread.", "parameters": [{"name": "Thread", "type": "", "description": "\nA handle to the thread. The handle must have the THREAD_QUERY_INFORMATION or THREAD_QUERY_LIMITED_INFORMATION access right. For more information about access rights, see\nThread Security and Access Rights.\nWindows Server\u00c2\u00a02003:\u00c2\u00a0\u00c2\u00a0The handle must have the THREAD_QUERY_INFORMATION access right.", "possible_constants": []}]}, {"name": "GetThreadIdealProcessorEx", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getthreadidealprocessorex", "description": "Retrieves the processor number of the ideal processor for the specified thread.", "parameters": [{"name": "hThread", "type": "", "description": "\nA handle to the thread for which to retrieve the ideal processor. This handle must have been created with the THREAD_QUERY_LIMITED_INFORMATION access right. For more information, see Thread Security and Access Rights.", "possible_constants": []}, {"name": "lpIdealProcessor", "type": "", "description": "\nPoints to PROCESSOR_NUMBER structure to receive the number of the ideal processor.", "possible_constants": []}]}, {"name": "GetThreadInformation", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getthreadinformation", "description": "Retrieves information about the specified thread.", "parameters": [{"name": "hThread", "type": "", "description": "\nA handle to the thread. The handle must have THREAD_QUERY_INFORMATION access rights. For more information, see  Thread Security and Access Rights.", "possible_constants": []}, {"name": "ThreadInformationClass", "type": "", "description": "\nThe class of information to retrieve. The only supported values are ThreadMemoryPriority and ThreadPowerThrottling.", "possible_constants": []}, {"name": "ThreadInformation", "type": "", "description": "\nPointer to a structure to receive the type of information specified by the ThreadInformationClass parameter.\nIf the ThreadInformationClass parameter is ThreadMemoryPriority, this parameter must point to a MEMORY_PRIORITY_INFORMATION structure.\nIf the ThreadInformationClass parameter is ThreadPowerThrottling, this parameter must point to a THREAD_POWER_THROTTLING_STATE structure.", "possible_constants": []}, {"name": "ThreadInformationSize", "type": "", "description": "\nThe size in bytes of the structure specified by the ThreadInformation parameter.", "possible_constants": []}, {"name": "If the ThreadInformationClass parameter is ThreadMemoryPriority, this parameter must be sizeof(MEMORY_PRIORITY_INFORMATION).", "type": "", "description": "", "possible_constants": []}, {"name": "If the ThreadInformationClass parameter is ThreadPowerThrottling, this parameter must be sizeof(THREAD_POWER_THROTTLING_STATE).", "type": "", "description": "", "possible_constants": []}]}, {"name": "GetThreadIOPendingFlag", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getthreadiopendingflag", "description": "Determines whether a specified thread has any I/O requests pending.", "parameters": [{"name": "hThread", "type": "", "description": "\nA handle to the thread in question. This handle must have been created with the THREAD_QUERY_INFORMATION access right. For more information, see Thread Security and Access Rights.", "possible_constants": []}, {"name": "lpIOIsPending", "type": "", "description": "\nA pointer to a  variable which the function sets to TRUE if the specified thread has one or more I/O requests pending, or to FALSE otherwise.", "possible_constants": []}]}, {"name": "GetThreadPriority", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getthreadpriority", "description": "Retrieves the priority value for the specified thread. This value, together with the priority class of the thread's process, determines the thread's base-priority level.", "parameters": [{"name": "hThread", "type": "", "description": "\nA handle to the thread.\nThe handle must have the THREAD_QUERY_INFORMATION or THREAD_QUERY_LIMITED_INFORMATION access right. For more information, see\nThread Security and Access Rights.\nWindows Server\u00c2\u00a02003:\u00c2\u00a0\u00c2\u00a0The handle must have the THREAD_QUERY_INFORMATION access right.", "possible_constants": []}]}, {"name": "GetThreadPriorityBoost", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getthreadpriorityboost", "description": "Retrieves the priority boost control state of the specified thread.", "parameters": [{"name": "hThread", "type": "", "description": "\nA handle to the thread. The handle must have the THREAD_QUERY_INFORMATION or THREAD_QUERY_LIMITED_INFORMATION access right. For more information, see\nThread Security and Access Rights.\nWindows Server\u00c2\u00a02003 and Windows\u00c2\u00a0XP:\u00c2\u00a0\u00c2\u00a0The handle must have the THREAD_QUERY_INFORMATION access right.", "possible_constants": []}, {"name": "pDisablePriorityBoost", "type": "", "description": "\nA pointer to a variable that receives the priority boost control state. A value of TRUE indicates that dynamic boosting is disabled. A value of FALSE indicates normal behavior.", "possible_constants": []}]}, {"name": "GetThreadSelectedCpuSetMasks", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getthreadselectedcpusetmasks", "description": "Returns the explicit CPU Set assignment of the specified thread, if any assignment was set using SetThreadSelectedCpuSetMasks or SetThreadSelectedCpuSets.", "parameters": [{"name": "Thread", "type": "", "description": "\nSpecifies the thread for which to query the selected CPU Sets. This handle must have the PROCESS_QUERY_LIMITED_INFORMATION access right. The value returned by GetCurrentProcess can also be specified here.", "possible_constants": []}, {"name": "CpuSetMasks", "type": "", "description": "\nSpecifies an optional buffer to retrieve a list of GROUP_AFFINITY structures representing the thread selected CPU Sets.", "possible_constants": []}, {"name": "CpuSetMaskCount", "type": "", "description": "\nSpecifies the size of the CpuSetMasks array, in elements.", "possible_constants": []}, {"name": "RequiredMaskCount", "type": "", "description": "\nOn successful return, specifies the number of affinity structures written to the array.\nIf the array is too small, the function fails with ERROR_INSUFFICIENT_BUFFER and sets the RequiredMaskCount parameter to the number of elements required.\nThe number of required elements is always less than or equal to the maximum group count returned by GetMaximumProcessorGroupCount.", "possible_constants": []}]}, {"name": "GetThreadSelectedCpuSets", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getthreadselectedcpusets", "description": "Returns the explicit CPU Set assignment of the specified thread, if any assignment was set using the SetThreadSelectedCpuSets API. If no explicit assignment is set, RequiredIdCount is set to 0 and the function returns TRUE.", "parameters": [{"name": "Thread", "type": "", "description": "\nSpecifies the thread for which to query the selected CPU Sets. This handle must have the THREAD_QUERY_LIMITED_INFORMATION access right. The value returned by GetCurrentThread can also be specified here.", "possible_constants": []}, {"name": "CpuSetIds", "type": "", "description": "\nSpecifies an optional buffer to retrieve the list of CPU Set identifiers.", "possible_constants": []}, {"name": "CpuSetIdCount", "type": "", "description": "\nSpecifies the capacity of the buffer specified in CpuSetIds. If the buffer is NULL, this must be 0.", "possible_constants": []}, {"name": "RequiredIdCount", "type": "", "description": "\nSpecifies the required capacity of the buffer to hold the entire list of thread selected CPU Sets. On successful return, this specifies the number of IDs filled into the buffer.", "possible_constants": []}]}, {"name": "GetThreadTimes", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getthreadtimes", "description": "Retrieves timing information for the specified thread.", "parameters": [{"name": "hThread", "type": "", "description": "\nA handle to the thread whose timing information is sought. The handle must have the THREAD_QUERY_INFORMATION or THREAD_QUERY_LIMITED_INFORMATION access right. For more information, see\nThread Security and Access Rights.\nWindows Server\u00c2\u00a02003 and Windows\u00c2\u00a0XP:\u00c2\u00a0\u00c2\u00a0The handle must have the THREAD_QUERY_INFORMATION access right.", "possible_constants": []}, {"name": "lpCreationTime", "type": "", "description": "\nA pointer to a\nFILETIME structure that receives the creation time of the thread.", "possible_constants": []}, {"name": "lpExitTime", "type": "", "description": "\nA pointer to a FILETIME structure that receives the exit time of the thread. If the thread has not exited, the content of this structure is undefined.", "possible_constants": []}, {"name": "lpKernelTime", "type": "", "description": "\nA pointer to a\nFILETIME structure that receives the amount of time that the thread has executed in kernel mode.", "possible_constants": []}, {"name": "lpUserTime", "type": "", "description": "\nA pointer to a FILETIME structure that receives the amount of time that the thread has executed in user mode.", "possible_constants": []}]}, {"name": "InitializeProcThreadAttributeList", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-initializeprocthreadattributelist", "description": "Initializes the specified list of attributes for process and thread creation.", "parameters": [{"name": "lpAttributeList", "type": "", "description": "\nThe attribute list. This parameter can be NULL to determine the buffer size required to support the specified number of attributes.", "possible_constants": []}, {"name": "dwAttributeCount", "type": "", "description": "\nThe count of attributes to be added to the list.", "possible_constants": []}, {"name": "dwFlags", "type": "", "description": "\nThis parameter is reserved and must be zero.", "possible_constants": []}, {"name": "lpSize", "type": "", "description": "\nIf lpAttributeList is not NULL, this parameter specifies the size in bytes of the lpAttributeList buffer on input. On output, this parameter receives the size in bytes of the initialized attribute list.\nIf lpAttributeList is NULL, this parameter receives the required buffer size in bytes.", "possible_constants": []}]}, {"name": "IsProcessCritical", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-isprocesscritical", "description": "Determines whether the specified process is considered critical.", "parameters": [{"name": "hProcess", "type": "", "description": "\nA handle to the process to query. The process must have been          opened with PROCESS_QUERY_LIMITED_INFORMATION access.", "possible_constants": []}, {"name": "Critical", "type": "", "description": "\nA pointer to the BOOL value this function will use to indicate whether the process          is considered critical.", "possible_constants": []}]}, {"name": "IsProcessorFeaturePresent", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-isprocessorfeaturepresent", "description": "Determines whether the specified processor feature is supported by the current computer.", "parameters": [{"name": "ProcessorFeature", "type": "", "description": "\nThe processor feature to be tested. This parameter can be one of the following values.", "possible_constants": [{"PF_ARM_64BIT_LOADSTORE_ATOMIC": -1}, {"PF_ARM_DIVIDE_INSTRUCTION_AVAILABLE": -1}, {"PF_ARM_EXTERNAL_CACHE_AVAILABLE": -1}, {"PF_ARM_FMAC_INSTRUCTIONS_AVAILABLE": -1}, {"PF_ARM_VFP_32_REGISTERS_AVAILABLE": -1}, {"PF_3DNOW_INSTRUCTIONS_AVAILABLE": -1}, {"PF_CHANNELS_ENABLED": -1}, {"PF_COMPARE_EXCHANGE_DOUBLE": -1}, {"PF_COMPARE_EXCHANGE128": -1}, {"PF_COMPARE64_EXCHANGE128": -1}, {"PF_FASTFAIL_AVAILABLE": -1}, {"PF_FLOATING_POINT_EMULATED": -1}, {"PF_FLOATING_POINT_PRECISION_ERRATA": -1}, {"PF_MMX_INSTRUCTIONS_AVAILABLE": -1}, {"PF_NX_ENABLED": -1}, {"PF_PAE_ENABLED": -1}, {"PF_RDTSC_INSTRUCTION_AVAILABLE": -1}, {"PF_RDWRFSGSBASE_AVAILABLE": -1}, {"PF_SECOND_LEVEL_ADDRESS_TRANSLATION": -1}, {"PF_SSE3_INSTRUCTIONS_AVAILABLE": -1}, {"PF_VIRT_FIRMWARE_ENABLED": -1}, {"PF_XMMI_INSTRUCTIONS_AVAILABLE": -1}, {"PF_XMMI64_INSTRUCTIONS_AVAILABLE": -1}, {"PF_XSAVE_ENABLED": -1}, {"PF_ARM_V8_INSTRUCTIONS_AVAILABLE": -1}, {"PF_ARM_V8_CRYPTO_INSTRUCTIONS_AVAILABLE": -1}, {"PF_ARM_V8_CRC32_INSTRUCTIONS_AVAILABLE": -1}, {"PF_ARM_V81_ATOMIC_INSTRUCTIONS_AVAILABLE": -1}]}]}, {"name": "OpenProcess", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-openprocess", "description": "Opens an existing local process object.", "parameters": [{"name": "dwDesiredAccess", "type": "", "description": "\nThe access to the process object. This access right is checked against the  security descriptor for the process. This parameter can be one or more of the\nprocess access rights.\nIf the caller has enabled the SeDebugPrivilege privilege, the requested access is  granted regardless of the contents of the security descriptor.", "possible_constants": []}, {"name": "bInheritHandle", "type": "", "description": "\nIf this value is TRUE, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.", "possible_constants": []}, {"name": "dwProcessId", "type": "", "description": "\nThe identifier of the local process to be opened.", "possible_constants": []}, {"name": "If the specified process is the System Idle Process (0x00000000), the function fails and the last error code is ERROR_INVALID_PARAMETER. If the specified process is the System process or one of the Client Server Run-Time Subsystem (CSRSS) processes, this function fails and the last error code is ERROR_ACCESS_DENIED because their access restrictions prevent user-level code from opening them.", "type": "", "description": "\nIf you are using GetCurrentProcessId as an argument to this function, consider using GetCurrentProcess instead of OpenProcess, for improved performance.", "possible_constants": []}]}, {"name": "OpenProcessToken", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-openprocesstoken", "description": "The OpenProcessToken function opens the access token associated with a process.", "parameters": [{"name": "ProcessHandle", "type": "", "description": "\nA handle to the process whose access token is opened. The process must have the PROCESS_QUERY_INFORMATION access permission.", "possible_constants": []}, {"name": "DesiredAccess", "type": "", "description": "\nSpecifies an access mask that specifies the requested types of access to the access token. These requested access types are compared with the discretionary access control list (DACL) of the token to determine which accesses are granted or denied.\nFor a list of access rights for access tokens, see\nAccess Rights for Access-Token Objects.", "possible_constants": []}, {"name": "TokenHandle", "type": "", "description": "\nA pointer to a handle that identifies the newly opened access token when the function returns.", "possible_constants": []}]}, {"name": "OpenThread", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-openthread", "description": "Opens an existing thread object.", "parameters": [{"name": "dwDesiredAccess", "type": "", "description": "\nThe access to the thread object. This access right is checked against the security descriptor for the thread. This parameter can be one or more of the\nthread access rights.\nIf the caller has enabled the SeDebugPrivilege privilege, the requested access is  granted regardless of the contents of the security descriptor.", "possible_constants": []}, {"name": "bInheritHandle", "type": "", "description": "\nIf this value is TRUE, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.", "possible_constants": []}, {"name": "dwThreadId", "type": "", "description": "\nThe identifier of the thread to be opened.", "possible_constants": []}]}, {"name": "OpenThreadToken", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-openthreadtoken", "description": "The OpenThreadToken function opens the access token associated with a thread.", "parameters": [{"name": "ThreadHandle", "type": "", "description": "\nA handle to the thread whose access token is opened.", "possible_constants": []}, {"name": "DesiredAccess", "type": "", "description": "\nSpecifies an access mask that specifies the requested types of access to the access token. These requested access types are reconciled against the token's discretionary access control list (DACL) to determine which accesses are granted or denied.\nFor a list of access rights for access tokens, see\nAccess Rights for Access-Token Objects.", "possible_constants": []}, {"name": "OpenAsSelf", "type": "", "description": "\nTRUE if the access check is to be made against the  process-level security context.\nFALSE if the access check is to be made against the current security context of the thread calling the OpenThreadToken function.\nThe OpenAsSelf parameter allows the caller of this function to open the access token of a specified thread when the caller is impersonating a token at SecurityIdentification level. Without this parameter, the calling thread cannot open the access token on the specified thread because it is impossible to open executive-level objects by using the SecurityIdentification impersonation level.", "possible_constants": []}, {"name": "TokenHandle", "type": "", "description": "\nA pointer to a variable that receives the handle to the newly opened access token.", "possible_constants": []}]}, {"name": "ProcessIdToSessionId", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-processidtosessionid", "description": "Retrieves the Remote Desktop Services session\nassociated with a specified process.", "parameters": [{"name": "dwProcessId", "type": "", "description": "\nSpecifies a process identifier. Use the\nGetCurrentProcessId function to retrieve the\nprocess identifier for the current process.", "possible_constants": []}, {"name": "pSessionId", "type": "", "description": "\nPointer to a variable that receives the identifier of the Remote Desktop Services session under which the\nspecified process is running. To retrieve the identifier of the session currently attached to the console, use\nthe WTSGetActiveConsoleSessionId\nfunction.", "possible_constants": []}]}, {"name": "QueryProcessAffinityUpdateMode", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-queryprocessaffinityupdatemode", "description": "Retrieves the affinity update mode of the specified process.", "parameters": [{"name": "hProcess", "type": "", "description": "\nA handle to the process. The handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right. For more information, see\nProcess Security and Access Rights.", "possible_constants": []}, {"name": "lpdwFlags", "type": "", "description": "\nThe affinity update mode. This parameter can be one of the following values.", "possible_constants": [{"0": -1}, {"PROCESS_AFFINITY_ENABLE_AUTO_UPDATE": 1}]}]}, {"name": "QueryProtectedPolicy", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-queryprotectedpolicy", "description": "Queries the value associated with a protected policy.", "parameters": [{"name": "PolicyGuid", "type": "", "description": "\nThe globally-unique identifier of the policy to query.", "possible_constants": []}, {"name": "PolicyValue", "type": "", "description": "\nReceives the value that the supplied policy is set to.", "possible_constants": []}]}, {"name": "QueueUserAPC", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-queueuserapc", "description": "Adds a user-mode asynchronous procedure call (APC) object to the APC queue of the specified thread.", "parameters": [{"name": "pfnAPC", "type": "", "description": "\nA pointer to the application-supplied APC function to be called when the specified thread performs an alertable wait operation. For more information, see\nAPCProc.", "possible_constants": []}, {"name": "hThread", "type": "", "description": "\nA handle to the thread. The handle must have the THREAD_SET_CONTEXT access right. For more information, see\nSynchronization Object Security and Access Rights.", "possible_constants": []}, {"name": "dwData", "type": "", "description": "\nA single value that is passed to the APC function pointed to by the pfnAPC parameter.", "possible_constants": []}]}, {"name": "ResumeThread", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-resumethread", "description": "Decrements a thread's suspend count. When the suspend count is decremented to zero, the execution of the thread is resumed.", "parameters": [{"name": "hThread", "type": "", "description": "\nA handle to the thread to be restarted.\nThis handle must have the THREAD_SUSPEND_RESUME access right. For more information, see\nThread Security and Access Rights.", "possible_constants": []}]}, {"name": "SetPriorityClass", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setpriorityclass", "description": "Sets the priority class for the specified process. This value together with the priority value of each thread of the process determines each thread's base priority level.", "parameters": [{"name": "hProcess", "type": "", "description": "\nA handle to the process.\nThe handle must have the PROCESS_SET_INFORMATION access right. For more information, see\nProcess Security and Access Rights.", "possible_constants": []}, {"name": "dwPriorityClass", "type": "", "description": "\nThe priority class for the process. This parameter can be one of the following values.", "possible_constants": []}]}, {"name": "SetProcessAffinityUpdateMode", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setprocessaffinityupdatemode", "description": "Sets the affinity update mode of the specified process.", "parameters": [{"name": "hProcess", "type": "", "description": "\nA handle to the process. This handle must be returned by the GetCurrentProcess function.", "possible_constants": []}, {"name": "dwFlags", "type": "", "description": "\nThe affinity update mode. This parameter can be one of the following values.", "possible_constants": [{"0": -1}, {"PROCESS_AFFINITY_ENABLE_AUTO_UPDATE": 1}]}]}, {"name": "SetProcessDefaultCpuSetMasks", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setprocessdefaultcpusetmasks", "description": "Sets the default CPU Sets assignment for threads in the specified process.", "parameters": [{"name": "Process", "type": "", "description": "\nSpecifies the process for which to set the default CPU Sets. This handle must have the PROCESS_SET_LIMITED_INFORMATION access right. The value returned by GetCurrentProcess can also be specified here.", "possible_constants": []}, {"name": "CpuSetMasks", "type": "", "description": "\nSpecifies an optional buffer of GROUP_AFFINITY structures representing the CPU Sets to set as the process default CPU set. If this is NULL, the SetProcessDefaultCpuSetMasks function clears out any assignment.", "possible_constants": []}, {"name": "CpuSetMaskCount", "type": "", "description": "\nSpecifies the size of the CpuSetMasks array, in elements. If the buffer is NULL, this value must be zero.", "possible_constants": []}]}, {"name": "SetProcessDefaultCpuSets", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setprocessdefaultcpusets", "description": "Sets the default CPU Sets assignment for threads in the specified process. Threads that are created, which don\u00e2\u0080\u0099t have CPU Sets explicitly set using SetThreadSelectedCpuSets, will inherit the sets specified by SetProcessDefaultCpuSets automatically.", "parameters": [{"name": "Process", "type": "", "description": "\nSpecifies the process for which to set the default CPU Sets. This handle must have the PROCESS_SET_LIMITED_INFORMATION access right. The value returned by GetCurrentProcess can also be specified here.", "possible_constants": []}, {"name": "CpuSetIds", "type": "", "description": "\nSpecifies the list of CPU Set IDs to set as the process default CPU set. If this is NULL, the SetProcessDefaultCpuSets clears out any assignment.", "possible_constants": []}, {"name": "CpuSetIdCount", "type": "", "description": "\nSpecifies the number of IDs in the list passed in the CpuSetIds argument. If that value is NULL, this should be 0.", "possible_constants": []}]}, {"name": "SetProcessDynamicEHContinuationTargets", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setprocessdynamicehcontinuationtargets", "description": "Sets dynamic exception handling continuation targets for the specified process.", "parameters": [{"name": "Process", "type": "", "description": "\nA handle to the process. This handle must have the PROCESS_SET_INFORMATION access right.\nFor more information, see Process Security and Access Rights.", "possible_constants": []}, {"name": "NumberOfTargets", "type": "", "description": "\nSupplies the number of dynamic exception handling continuation targets to set.", "possible_constants": []}, {"name": "Targets", "type": "", "description": "\nA pointer to an array of dynamic exception handling continuation targets. For more information on this structure, see PROCESS_DYNAMIC_EH_CONTINUATION_TARGET.", "possible_constants": []}]}, {"name": "SetProcessDynamicEnforcedCetCompatibleRanges", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setprocessdynamicenforcedcetcompatibleranges", "description": "Sets dynamic enforced CETCOMPAT ranges for the specified process.", "parameters": [{"name": "Process", "type": "", "description": "\nA handle to the process. This handle must have the PROCESS_SET_INFORMATION access right.\nFor more information, see Process Security and Access Rights.", "possible_constants": []}, {"name": "NumberOfRanges", "type": "", "description": "\nSupplies the number of dynamic enforced CETCOMPAT ranges to set.", "possible_constants": []}, {"name": "Ranges", "type": "", "description": "\nA pointer to an array of dynamic enforced CETCOMPAT ranges. For more information on this structure, see PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE.", "possible_constants": []}]}, {"name": "SetProcessInformation", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setprocessinformation", "description": "Sets information for the specified process.", "parameters": [{"name": "hProcess", "type": "", "description": "\nA handle to the process. This handle must have the PROCESS_SET_INFORMATION access\nright. For more information, see\nProcess Security and Access Rights.", "possible_constants": []}, {"name": "ProcessInformationClass", "type": "", "description": "\nA member of the PROCESS_INFORMATION_CLASS enumeration specifying the kind of information to set.", "possible_constants": []}, {"name": "ProcessInformation", "type": "", "description": "\nPointer to an object that contains the type of information specified by the\nProcessInformationClass parameter.\nIf the ProcessInformationClass parameter is\nProcessMemoryPriority, this parameter must point to a\nMEMORY_PRIORITY_INFORMATION structure.\nIf the ProcessInformationClass parameter is\nProcessPowerThrottling, this parameter must point to a\nPROCESS_POWER_THROTTLING_STATE structure.\nIf the ProcessInformationClass parameter is\nProcessLeapSecondInfo, this parameter must point to a\nPROCESS_LEAP_SECOND_INFO structure.", "possible_constants": []}, {"name": "ProcessInformationSize", "type": "", "description": "\nThe size in bytes of the structure specified by the ProcessInformation parameter.", "possible_constants": []}, {"name": "If the ProcessInformationClass parameter is\nProcessMemoryPriority, this parameter must be\nsizeof(MEMORY_PRIORITY_INFORMATION).", "type": "", "description": "", "possible_constants": []}, {"name": "If the ProcessInformationClass parameter is\nProcessPowerThrottling, this parameter must be\nsizeof(PROCESS_POWER_THROTTLING_STATE).", "type": "", "description": "", "possible_constants": []}, {"name": "If the ProcessInformationClass parameter is\nProcessLeapSecondInfo, this parameter must be\nsizeof(PROCESS_LEAP_SECOND_INFO).", "type": "", "description": "", "possible_constants": []}]}, {"name": "SetProcessMitigationPolicy", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setprocessmitigationpolicy", "description": "Sets a mitigation policy for the calling process. Mitigation policies enable a process to harden itself against various types of attacks.", "parameters": [{"name": "MitigationPolicy", "type": "", "description": "\nThe mitigation policy to apply. This parameter can be one of the following values.", "possible_constants": [{"ProcessDEPPolicy": -1}, {"ProcessASLRPolicy": -1}, {"ProcessDynamicCodePolicy": -1}, {"ProcessStrictHandleCheckPolicy": -1}, {"ProcessSystemCallDisablePolicy": -1}, {"ProcessMitigationOptionsMask": -1}, {"ProcessExtensionPointDisablePolicy": -1}, {"ProcessControlFlowGuardPolicy": -1}, {"ProcessSignaturePolicy": -1}, {"ProcessFontDisablePolicy": -1}, {"ProcessImageLoadPolicy": -1}, {"ProcessUserShadowStackPolicy": -1}]}, {"name": "lpBuffer", "type": "", "description": "\nIf the MitigationPolicy parameter is ProcessDEPPolicy, this parameter points to a PROCESS_MITIGATION_DEP_POLICY structure that specifies the DEP policy flags.\nIf the MitigationPolicy parameter is ProcessASLRPolicy, this parameter points to a PROCESS_MITIGATION_ASLR_POLICY structure that specifies the ASLR policy flags.\nIf the MitigationPolicy parameter is ProcessImageLoadPolicy, this parameter points to a PROCESS_MITIGATION_IMAGE_LOAD_POLICY structure that receives the policy flags for image loading.\nIf the MitigationPolicy parameter is ProcessStrictHandleCheckPolicy, this parameter points to a PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY structure that specifies the handle check policy flags.\nIf the MitigationPolicy parameter is ProcessSystemCallDisablePolicy, this parameter points to a PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY structure that specifies the system call disable policy flags.\nIf the MitigationPolicy parameter is ProcessMitigationOptionsMask, this parameter points to a ULONG64 bit vector for the mask, or to accommodate more than 64 bits, a two-element array of ULONG64 bit vectors.\nIf the MitigationPolicy parameter is ProcessExtensionPointDisablePolicy, this parameter points to a PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY structure that specifies the extension point disable policy flags.\nIf the MitigationPolicy parameter is ProcessControlFlowGuardPolicy, this parameter points to a PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY structure that specifies the CFG policy flags.\nIf the MitigationPolicy parameter is ProcessSignaturePolicy, this parameter points to a PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY structure that specifies the signature policy flags.\nIf the MitigationPolicy parameter is ProcessFontDisablePolicy, this parameter points to a PROCESS_MITIGATION_FONT_DISABLE_POLICY structure that specifies the policy flags for font loading.\nIf the MitigationPolicy parameter is ProcessImageLoadPolicy, this parameter points to a PROCESS_MITIGATION_IMAGE_LOAD_POLICY structure that specifies the policy flags for image loading.\nIf the MitigationPolicy parameter is ProcessUserShadowStackPolicy, this parameter points to a PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY structure that specifies the policy flags for user-mode Hardware-enforced Stack Protection.", "possible_constants": []}, {"name": "dwLength", "type": "", "description": "\nThe size of lpBuffer, in bytes.", "possible_constants": []}]}, {"name": "SetProcessPriorityBoost", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setprocesspriorityboost", "description": "Disables or enables the ability of the system to temporarily boost the priority of the threads of the specified process.", "parameters": [{"name": "hProcess", "type": "", "description": "\nA handle to the process. This handle must have the PROCESS_SET_INFORMATION access right. For more information, see\nProcess Security and Access Rights.", "possible_constants": []}, {"name": "bDisablePriorityBoost", "type": "", "description": "\nIf this parameter is TRUE, dynamic boosting is disabled. If the parameter is FALSE, dynamic boosting is enabled.", "possible_constants": []}]}, {"name": "SetProcessShutdownParameters", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setprocessshutdownparameters", "description": "Sets shutdown parameters for the currently calling process. This function sets a shutdown order for a process relative to the other processes in the system.", "parameters": [{"name": "dwLevel", "type": "", "description": "\nThe shutdown priority for a process relative to other processes in the system. The system shuts down processes from high dwLevel values to low. The highest and lowest shutdown priorities are reserved for system components. This parameter must be in the following range of values.\nAll processes start at shutdown level 0x280.", "possible_constants": [{"000-0FF": -1}, {"100-1FF": -1}, {"200-2FF": -1}, {"300-3FF": -1}, {"400-4FF": -1}]}, {"name": "dwFlags", "type": "", "description": "\nThis parameter can be the following value.", "possible_constants": [{"SHUTDOWN_NORETRY": 1}]}]}, {"name": "SetProtectedPolicy", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setprotectedpolicy", "description": "Sets a protected policy. This function is for use primarily by Windows, and not designed for external use.", "parameters": [{"name": "PolicyGuid", "type": "", "description": "\nThe globally-unique identifier of the policy to set.", "possible_constants": []}, {"name": "PolicyValue", "type": "", "description": "\nThe value to set the policy to.", "possible_constants": []}, {"name": "OldPolicyValue", "type": "", "description": "\nOptionally receives the original value that was associated with the supplied policy.", "possible_constants": []}]}, {"name": "SetThreadContext", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setthreadcontext", "description": "Sets the context for the specified thread.", "parameters": [{"name": "hThread", "type": "", "description": "\nA handle to the thread whose context is to be set. The handle must have the\nTHREAD_SET_CONTEXT access right to the thread. For more information, see\nThread Security and Access Rights.", "possible_constants": []}, {"name": "lpContext", "type": "", "description": "\nA pointer to a CONTEXT structure that contains the\ncontext to be set in the specified thread. The value of the ContextFlags member of\nthis structure specifies which portions of a thread's context to set. Some values in the\nCONTEXT structure that cannot be specified are silently\nset to the correct value. This includes bits in the CPU status register that specify the privileged processor\nmode, global enabling bits in the debugging register, and other states that must be controlled by the operating\nsystem.", "possible_constants": []}]}, {"name": "SetThreadDescription", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setthreaddescription", "description": "Assigns a description to a thread.", "parameters": [{"name": "hThread", "type": "", "description": "\nA handle for the thread for which you want to set the description. The handle must have THREAD_SET_LIMITED_INFORMATION access.", "possible_constants": []}, {"name": "lpThreadDescription", "type": "", "description": "\nA Unicode string that specifies the description of the thread.", "possible_constants": []}]}, {"name": "SetThreadIdealProcessor", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setthreadidealprocessor", "description": "Sets a preferred processor for a thread. The system schedules threads on their preferred processors whenever possible.", "parameters": [{"name": "hThread", "type": "", "description": "\nA handle to the thread whose preferred processor is to be set. The handle must have the THREAD_SET_INFORMATION access right. For more information, see\nThread Security and Access Rights.", "possible_constants": []}, {"name": "dwIdealProcessor", "type": "", "description": "\nThe number of the preferred processor for the thread. This value is zero-based. If this parameter is MAXIMUM_PROCESSORS, the function returns the current ideal processor without changing it.", "possible_constants": []}]}, {"name": "SetThreadIdealProcessorEx", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setthreadidealprocessorex", "description": "Sets the ideal processor for the specified thread and optionally retrieves the previous ideal processor.", "parameters": [{"name": "hThread", "type": "", "description": "\nA handle to the thread for which to set the ideal processor. This handle must have been created with the THREAD_SET_INFORMATION access right. For more information, see Thread Security and Access Rights.", "possible_constants": []}, {"name": "lpIdealProcessor", "type": "", "description": "\nA pointer to a PROCESSOR_NUMBER structure that specifies the processor number of the desired ideal processor.", "possible_constants": []}, {"name": "lpPreviousIdealProcessor", "type": "", "description": "\nA pointer to a PROCESSOR_NUMBER structure to receive the previous ideal processor. This parameter can point to the same memory location as the lpIdealProcessor parameter. This parameter can be NULL if the previous ideal processor is not required.", "possible_constants": []}]}, {"name": "SetThreadInformation", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setthreadinformation", "description": "Sets information for the specified thread.", "parameters": [{"name": "hThread", "type": "", "description": "\nA handle to the thread. The handle must have THREAD_SET_INFORMATION access right. For more information, see  Thread Security and Access Rights.", "possible_constants": []}, {"name": "ThreadInformationClass", "type": "", "description": "\nThe class of information to set. The only supported values are ThreadMemoryPriority and ThreadPowerThrottling.", "possible_constants": []}, {"name": "ThreadInformation", "type": "", "description": "\nPointer to a structure that contains the type of information specified by the ThreadInformationClass parameter.\nIf the ThreadInformationClass parameter is ThreadMemoryPriority, this parameter must point to a MEMORY_PRIORITY_INFORMATION structure.\nIf the ThreadInformationClass parameter is ThreadPowerThrottling, this parameter must point to a THREAD_POWER_THROTTLING_STATE structure.", "possible_constants": []}, {"name": "ThreadInformationSize", "type": "", "description": "\nThe size in bytes of the structure specified by the ThreadInformation parameter.", "possible_constants": []}, {"name": "If the ThreadInformationClass parameter is ThreadMemoryPriority, this parameter must be sizeof(MEMORY_PRIORITY_INFORMATION).", "type": "", "description": "", "possible_constants": []}, {"name": "If the ThreadInformationClass parameter is ThreadPowerThrottling, this parameter must be sizeof(THREAD_POWER_THROTTLING_STATE).", "type": "", "description": "", "possible_constants": []}]}, {"name": "SetThreadPriority", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setthreadpriority", "description": "Sets the priority value for the specified thread. This value, together with the priority class of the thread's process, determines the thread's base priority level.", "parameters": [{"name": "hThread", "type": "", "description": "\nA handle to the thread whose priority value is to be set.\nThe handle must have the THREAD_SET_INFORMATION or THREAD_SET_LIMITED_INFORMATION access right. For more information, see\nThread Security and Access Rights.Windows Server\u00c2\u00a02003:\u00c2\u00a0\u00c2\u00a0The handle must have the THREAD_SET_INFORMATION access right.", "possible_constants": []}, {"name": "nPriority", "type": "", "description": "\nThe priority value for the thread. This parameter can be one of the following values.\nIf the thread has the REALTIME_PRIORITY_CLASS base class, this parameter can also be -7, -6, -5, -4, -3, 3, 4, 5, or 6. For more information, see\nScheduling Priorities.", "possible_constants": []}]}, {"name": "SetThreadPriorityBoost", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setthreadpriorityboost", "description": "Disables or enables the ability of the system to temporarily boost the priority of a thread.", "parameters": [{"name": "hThread", "type": "", "description": "\nA handle to the thread whose priority is to be boosted. The handle must have the THREAD_SET_INFORMATION or THREAD_SET_LIMITED_INFORMATION access right. For more information, see\nThread Security and Access Rights.\nWindows Server\u00c2\u00a02003 and Windows\u00c2\u00a0XP:\u00c2\u00a0\u00c2\u00a0The handle must have the THREAD_SET_INFORMATION access right.", "possible_constants": []}, {"name": "bDisablePriorityBoost", "type": "", "description": "\nIf this parameter is TRUE, dynamic boosting is disabled. If the parameter is FALSE, dynamic boosting is enabled.", "possible_constants": []}]}, {"name": "SetThreadSelectedCpuSetMasks", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setthreadselectedcpusetmasks", "description": "Sets the selected CPU Sets assignment for the specified thread. This assignment overrides the process default assignment, if one is set.", "parameters": [{"name": "Thread", "type": "", "description": "\nSpecifies the thread on which to set the CPU Set assignment. PROCESS_SET_LIMITED_INFORMATION access right. The value returned by GetCurrentProcess can also be specified here.", "possible_constants": []}, {"name": "CpuSetMasks", "type": "", "description": "\nSpecifies an optional buffer of GROUP_AFFINITY structures representing the CPU Sets to set as the thread selected CPU set. If this is NULL, the SetThreadSelectedCpuSetMasks function clears out any assignment, reverting to process default assignment if one is set.", "possible_constants": []}, {"name": "CpuSetMaskCount", "type": "", "description": "\nSpecifies the number of GROUP_AFFINITY structures in the list passed in the GroupCpuSets argument. If the buffer is NULL, this value must be zero.", "possible_constants": []}]}, {"name": "SetThreadSelectedCpuSets", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setthreadselectedcpusets", "description": "Sets the selected CPU Sets assignment for the specified thread. This assignment overrides the process default assignment, if one is set.", "parameters": [{"name": "Thread", "type": "", "description": "\nSpecifies the thread on which to set the CPU Set assignment. This handle must have the THREAD_SET_LIMITED_INFORMATION access right. The value returned by GetCurrentThread can also be used.", "possible_constants": []}, {"name": "CpuSetIds", "type": "", "description": "\nSpecifies the list of CPU Set IDs to set as the thread selected CPU set. If this is NULL, the API clears out any assignment, reverting to process default assignment if one is set.", "possible_constants": []}, {"name": "CpuSetIdCount", "type": "", "description": "\nSpecifies the number of IDs in the list passed in the CpuSetIds argument. If that value is NULL, this should be 0.", "possible_constants": []}]}, {"name": "SetThreadStackGuarantee", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setthreadstackguarantee", "description": "Sets the minimum size of the stack associated with the calling thread or fiber that will be available during any stack overflow exceptions. This is useful for handling stack overflow exceptions; the application can safely use the specified number of bytes during exception handling.", "parameters": [{"name": "StackSizeInBytes", "type": "", "description": "\nThe size of the stack, in bytes. On return, this value is set to the size of the previous stack, in bytes.\nIf this parameter is 0 (zero), the function succeeds and the parameter contains the size of the current stack.\nIf the specified size is less than the current size, the function succeeds but ignores this request. Therefore, you cannot use this function to reduce the size of the stack.\nThis value cannot be larger than the reserved stack size.", "possible_constants": []}]}, {"name": "SetThreadToken", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setthreadtoken", "description": "The SetThreadToken function assigns an impersonation token to a thread. The function can also cause a thread to stop using an impersonation token.", "parameters": [{"name": "Thread", "type": "", "description": "\nA pointer to a handle to the thread to which the function assigns the impersonation token.\nIf Thread is NULL, the function assigns the impersonation token to the calling thread.", "possible_constants": []}, {"name": "Token", "type": "", "description": "\nA handle to the impersonation token to assign to the thread. This handle must have been opened with TOKEN_IMPERSONATE access rights. For more information, see\nAccess Rights for Access-Token Objects.\nIf Token is NULL, the function causes the thread to stop using an impersonation token.", "possible_constants": []}]}, {"name": "SuspendThread", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-suspendthread", "description": "Suspends the specified thread.", "parameters": [{"name": "hThread", "type": "", "description": "\nA handle to the thread that is to be suspended.\nThe handle must have the THREAD_SUSPEND_RESUME access right. For more information, see\nThread Security and Access Rights.", "possible_constants": []}]}, {"name": "SwitchToThread", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-switchtothread", "description": "Causes the calling thread to yield execution to another thread that is ready to run on the current processor. The operating system selects the next thread to be executed.", "parameters": []}, {"name": "TerminateProcess", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-terminateprocess", "description": "Terminates the specified process and all of its threads.", "parameters": [{"name": "hProcess", "type": "", "description": "\nA handle to the process to be terminated.\nThe handle must have the PROCESS_TERMINATE access right. For more information, see\nProcess Security and Access Rights.", "possible_constants": []}, {"name": "uExitCode", "type": "", "description": "\nThe exit code to be used by the process and threads terminated as a result of this call. Use the\nGetExitCodeProcess function to retrieve a process's exit value. Use the\nGetExitCodeThread function to retrieve a thread's exit value.", "possible_constants": []}]}, {"name": "TerminateThread", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-terminatethread", "description": "Terminates a thread.", "parameters": [{"name": "hThread", "type": "", "description": "\nA handle to the thread to be terminated.\nThe handle must have the THREAD_TERMINATE access right. For more information, see\nThread Security and Access Rights.", "possible_constants": []}, {"name": "dwExitCode", "type": "", "description": "\nThe exit code for the thread. Use the\nGetExitCodeThread function to retrieve a thread's exit value.", "possible_constants": []}]}, {"name": "TlsAlloc", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-tlsalloc", "description": "Allocates a thread local storage (TLS) index. Any thread of the process can subsequently use this index to store and retrieve values that are local to the thread, because each thread receives its own slot for the index.", "parameters": []}, {"name": "TlsFree", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-tlsfree", "description": "Releases a thread local storage (TLS) index, making it available for reuse.", "parameters": [{"name": "dwTlsIndex", "type": "", "description": "\nThe TLS index that was allocated by the\nTlsAlloc function.", "possible_constants": []}]}, {"name": "TlsGetValue", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-tlsgetvalue", "description": "Retrieves the value in the calling thread's thread local storage (TLS) slot for the specified TLS index. Each thread of a process has its own slot for each TLS index.", "parameters": [{"name": "dwTlsIndex", "type": "", "description": "\nThe TLS index that was allocated by the\nTlsAlloc function.", "possible_constants": []}]}, {"name": "TlsSetValue", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-tlssetvalue", "description": "Stores a value in the calling thread's thread local storage (TLS) slot for the specified TLS index. Each thread of a process has its own slot for each TLS index.", "parameters": [{"name": "dwTlsIndex", "type": "", "description": "\nThe TLS index that was allocated by the TlsAlloc\nfunction.", "possible_constants": []}, {"name": "lpTlsValue", "type": "", "description": "\nThe value to be stored in the calling thread's TLS slot for the index.", "possible_constants": []}]}, {"name": "UpdateProcThreadAttribute", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-updateprocthreadattribute", "description": "Updates the specified attribute in a list of attributes for process and thread creation.", "parameters": [{"name": "lpAttributeList", "type": "", "description": "\nA pointer to an attribute list created by the InitializeProcThreadAttributeList function.", "possible_constants": []}, {"name": "dwFlags", "type": "", "description": "\nThis parameter is reserved and must be zero.", "possible_constants": []}, {"name": "Attribute", "type": "", "description": "\nThe attribute key to update in the attribute list. This parameter can be one of the following values.", "possible_constants": [{"PROC_THREAD_ATTRIBUTE_GROUP_AFFINITY": -1}, {"PROC_THREAD_ATTRIBUTE_HANDLE_LIST": -1}, {"PROC_THREAD_ATTRIBUTE_IDEAL_PROCESSOR": -1}, {"PROC_THREAD_ATTRIBUTE_MITIGATION_POLICY": -1}, {"PROC_THREAD_ATTRIBUTE_PARENT_PROCESS": -1}, {"PROC_THREAD_ATTRIBUTE_PREFERRED_NODE": -1}, {"PROC_THREAD_ATTRIBUTE_UMS_THREAD": -1}, {"PROC_THREAD_ATTRIBUTE_SECURITY_CAPABILITIES": -1}, {"PROC_THREAD_ATTRIBUTE_PROTECTION_LEVEL": -1}, {"PROC_THREAD_ATTRIBUTE_CHILD_PROCESS_POLICY": -1}, {"PROC_THREAD_ATTRIBUTE_DESKTOP_APP_POLICY": -1}, {"PROC_THREAD_ATTRIBUTE_JOB_LIST": -1}]}, {"name": "lpValue", "type": "", "description": "\nA pointer to the attribute value. This value should persist until the attribute is destroyed using the DeleteProcThreadAttributeList function.", "possible_constants": []}, {"name": "cbSize", "type": "", "description": "\nThe size of the attribute value specified by the lpValue parameter.", "possible_constants": []}, {"name": "lpPreviousValue", "type": "", "description": "\nThis parameter is reserved and must be NULL.", "possible_constants": []}, {"name": "lpReturnSize", "type": "", "description": "\nThis parameter is reserved and must be NULL.", "possible_constants": []}]}]}