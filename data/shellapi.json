{"functions": [{"name": "AssocCreateForClasses", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-assoccreateforclasses", "description": "Retrieves an object that implements an IQueryAssociations interface.", "parameters": [{"name": "rgClasses", "type": "const ASSOCIATIONELEMENT*", "description": "A pointer to an array of ASSOCIATIONELEMENT structures."}, {"name": "cClasses", "type": "ULONG", "description": "The number of elements in the array pointed to by rgClasses."}, {"name": "riid", "type": "REFIID", "description": "Reference to the desired IID, normally IID_IQueryAssociations."}, {"name": "ppv", "type": "void**", "description": "When this method returns, contains the interface pointer requested in riid. This is normally IQueryAssociations."}]}, {"name": "CommandLineToArgvW", "return_type": "LPWSTR*", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-commandlinetoargvw", "description": "Parses a Unicode command line string and returns an array of pointers to the command line arguments, along with a count of such arguments, in a way that is similar to the standard C run-time argv and argc values.", "parameters": [{"name": "lpCmdLine", "type": "LPCWSTR", "description": "Pointer to a null-terminated Unicode string that contains the full command line. If this parameter is an empty string the function returns the path to the current executable file."}, {"name": "pNumArgs", "type": "int*", "description": "Pointer to an int that receives the number of array elements returned, similar to argc."}]}, {"name": "DoEnvironmentSubstA", "return_type": "DWORD", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-doenvironmentsubsta", "description": "[This function is retained only for backward compatibility. Use ExpandEnvironmentStrings instead.]\nParses an input string that contains references to one or more environment variables and replaces them with their fully expanded values.\nSyntax\nDWORD DoEnvironmentSubstA(\n  LPSTR pszSrc,\n  UINT  cchSrc\n);\n\nParameters\npszSrc\nType: LPTSTR\nA pointer to a null-terminated string that contains references to one or more environment variables, each in the following form. Case is ignored.\n%VariableName%\nAny character in the string that is not enclosed in '%' characters is ignored and returned unchanged. Therefore, if your string contains multiple environment variables, you can use any character other than '%' as a separator, including spaces or no separator.\nWhen this function returns successfully, each %VariableName% is replaced with its expanded value. The replacement rules are the same as those used by the command interpreter. If the variable name is not found on the system, the %variableName% is left as it was submitted on entry.\nIf this function fails due to the expanded string being too large for the buffer, the contents of this buffer are left unchanged.\ncchSrc\nType: UINT\nThe size, in characters, of the buffer pointed to by pszSrc. Note that the buffer must be large enough to hold the returned string.\nReturn value\nType: DWORD\nIf the expanded string fits in the buffer, TRUE is returned in the HIWORD and the length, in characters, of the new pszSrc is returned in the LOWORD.\nIf the expanded string is too large for the buffer, FALSE is returned in the HIWORD and cchSrc in the LOWORD.\nRemarks\nParameters must contain valid, non-NULL values. You must validate these values. Failure to do so can provide unexpected results.\nBecause the string that is returned in pszSrc will typically be longer than the input string, make sure that the buffer is large enough to hold the expanded version of the string. The allotted size of the cchSrc buffer for ANSI strings must be one larger than the buffer for a Unicode string. When dealing with ANSI strings, use the formula buffer size = string length + terminating null character + 1 to determine the minimum correct buffer size.\nBecause environment variables can be added by the user or applications, the complete list is system-dependent. The following environment variables are standard and are available to both interactive applications and services.\n\nALLUSERSPROFILE\nAPPDATA\nCOMPUTERNAME\nLOCALAPPDATA\nNUMBER_OF_PROCESSORS\nOS\nPROCESSOR_ARCHITECTURE\nPROCESSOR_IDENTIFIER\nPROCESSOR_LEVEL\nPROCESSOR_REVISION\nProgramData\nProgramFiles\nPUBLIC\nSystemDrive\nSystemRoot\nUSERPROFILE\nwindir\n\nThe following are only available to interactive applications.\n\nHOMEDRIVE\nHOMEPATH\nLOGONSERVER\nUSERDOMAIN\nUSERNAME\n\nThe environment variables that correspond to file system folders can be mapped to an equivalent CSIDL or KNOWNFOLDERIDvalue can be obtained through SHGetFolderLocation or SHGetKnownFolderPath. CSIDLs and KNOWNFOLDERIDs are more reliable than environment variable names and should be used whenever possible.\nExamples\nThe following console application demonstrates the use of DoEnvironmentSubstW.\n\n#include \"stdafx.h\"\n#include \"windows.h\"\n#include \"windef.h\"\n#include \"shellapi.h\"\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n\tWCHAR szSrc[MAX_PATH] = L\"%OS%;%HOMEPATH%\";\n\n\tDWORD result = DoEnvironmentSubstW(szSrc, MAX_PATH);\n\n\tWORD success = HIWORD(result);\n\tWORD string_length = LOWORD(result);\n\n\treturn 0;\n}\n\n\nNote\nThe shellapi.h header defines DoEnvironmentSubst as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see Conventions for Function Prototypes.\n\nRequirements\n\n\n\n\u00c2\u00a0\n\u00c2\u00a0\n\n\n\n\nMinimum supported client\nWindows\u00c2\u00a0XP [desktop apps only]\n\n\nMinimum supported server\nWindows\u00c2\u00a02000 Server [desktop apps only]\n\n\nTarget Platform\nWindows\n\n\nHeader\nshellapi.h\n\n\nLibrary\nShell32.lib\n\n\nDLL\nShell32.dll (version 4.0 or later)", "parameters": [{"name": "pszSrc", "type": "LPTSTR", "description": "A pointer to a null-terminated string that contains references to one or more environment variables, each in the following form. Case is ignored."}]}, {"name": "DoEnvironmentSubstW", "return_type": "DWORD", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-doenvironmentsubstw", "description": "[This function is retained only for backward compatibility. Use ExpandEnvironmentStrings instead.]\nParses an input string that contains references to one or more environment variables and replaces them with their fully expanded values.\nSyntax\nDWORD DoEnvironmentSubstW(\n  LPWSTR pszSrc,\n  UINT   cchSrc\n);\n\nParameters\npszSrc\nType: LPTSTR\nA pointer to a null-terminated string that contains references to one or more environment variables, each in the following form. Case is ignored.\n%VariableName%\nAny character in the string that is not enclosed in '%' characters is ignored and returned unchanged. Therefore, if your string contains multiple environment variables, you can use any character other than '%' as a separator, including spaces or no separator.\nWhen this function returns successfully, each %VariableName% is replaced with its expanded value. The replacement rules are the same as those used by the command interpreter. If the variable name is not found on the system, the %variableName% is left as it was submitted on entry.\nIf this function fails due to the expanded string being too large for the buffer, the contents of this buffer are left unchanged.\ncchSrc\nType: UINT\nThe size, in characters, of the buffer pointed to by pszSrc. Note that the buffer must be large enough to hold the returned string.\nReturn value\nType: DWORD\nIf the expanded string fits in the buffer, TRUE is returned in the HIWORD and the length, in characters, of the new pszSrc is returned in the LOWORD.\nIf the expanded string is too large for the buffer, FALSE is returned in the HIWORD and cchSrc in the LOWORD.\nRemarks\nParameters must contain valid, non-NULL values. You must validate these values. Failure to do so can provide unexpected results.\nBecause the string that is returned in pszSrc will typically be longer than the input string, make sure that the buffer is large enough to hold the expanded version of the string. The allotted size of the cchSrc buffer for ANSI strings must be one larger than the buffer for a Unicode string. When dealing with ANSI strings, use the formula buffer size = string length + terminating null character + 1 to determine the minimum correct buffer size.\nBecause environment variables can be added by the user or applications, the complete list is system-dependent. The following environment variables are standard and are available to both interactive applications and services.\n\nALLUSERSPROFILE\nAPPDATA\nCOMPUTERNAME\nLOCALAPPDATA\nNUMBER_OF_PROCESSORS\nOS\nPROCESSOR_ARCHITECTURE\nPROCESSOR_IDENTIFIER\nPROCESSOR_LEVEL\nPROCESSOR_REVISION\nProgramData\nProgramFiles\nPUBLIC\nSystemDrive\nSystemRoot\nUSERPROFILE\nwindir\n\nThe following are only available to interactive applications.\n\nHOMEDRIVE\nHOMEPATH\nLOGONSERVER\nUSERDOMAIN\nUSERNAME\n\nThe environment variables that correspond to file system folders can be mapped to an equivalent CSIDL or KNOWNFOLDERIDvalue can be obtained through SHGetFolderLocation or SHGetKnownFolderPath. CSIDLs and KNOWNFOLDERIDs are more reliable than environment variable names and should be used whenever possible.\nExamples\nThe following console application demonstrates the use of DoEnvironmentSubstW.\n\n#include \"stdafx.h\"\n#include \"windows.h\"\n#include \"windef.h\"\n#include \"shellapi.h\"\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n\tWCHAR szSrc[MAX_PATH] = L\"%OS%;%HOMEPATH%\";\n\n\tDWORD result = DoEnvironmentSubstW(szSrc, MAX_PATH);\n\n\tWORD success = HIWORD(result);\n\tWORD string_length = LOWORD(result);\n\n\treturn 0;\n}\n\n\nNote\nThe shellapi.h header defines DoEnvironmentSubst as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see Conventions for Function Prototypes.\n\nRequirements\n\n\n\n\u00c2\u00a0\n\u00c2\u00a0\n\n\n\n\nMinimum supported client\nWindows\u00c2\u00a0XP [desktop apps only]\n\n\nMinimum supported server\nWindows\u00c2\u00a02000 Server [desktop apps only]\n\n\nTarget Platform\nWindows\n\n\nHeader\nshellapi.h\n\n\nLibrary\nShell32.lib\n\n\nDLL\nShell32.dll (version 4.0 or later)", "parameters": [{"name": "pszSrc", "type": "LPTSTR", "description": "A pointer to a null-terminated string that contains references to one or more environment variables, each in the following form. Case is ignored."}]}, {"name": "DragAcceptFiles", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-dragacceptfiles", "description": "Registers whether a window accepts dropped files.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "The identifier of the window that is registering whether it will accept dropped files."}, {"name": "fAccept", "type": "BOOL", "description": "A value that indicates if the window identified by the hWnd parameter accepts dropped files. This value is TRUE to accept dropped files or FALSE to discontinue accepting dropped files."}]}, {"name": "DragFinish", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-dragfinish", "description": "Releases memory that the system allocated for use in transferring file names to the application.", "parameters": [{"name": "hDrop", "type": "HDROP", "description": "Identifier of the structure that describes dropped files. This handle is retrieved from the wParam parameter of the WM_DROPFILES message."}]}, {"name": "DragQueryFileA", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-dragqueryfilea", "description": "Retrieves the names of dropped files that result from a successful drag-and-drop operation.", "parameters": [{"name": "hDrop", "type": "HDROP", "description": "Identifier of the structure that contains the file names of the dropped files."}, {"name": "iFile", "type": "UINT", "description": "Index of the file to query. If the value of this parameter is 0xFFFFFFFF, DragQueryFile returns a count of the files dropped. If the value of this parameter is between zero and the total number of files dropped, DragQueryFile copies the file name with the corresponding value to the buffer pointed to by the lpszFile parameter."}, {"name": "lpszFile", "type": "LPTSTR", "description": "The address of a buffer that receives the file name of a dropped file when the function returns. This file name is a null-terminated string. If this parameter is NULL, DragQueryFile returns the required size, in characters, of this buffer."}, {"name": "cch", "type": "UINT", "description": "The size, in characters, of the lpszFile buffer."}]}, {"name": "DragQueryFileW", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-dragqueryfilew", "description": "Retrieves the names of dropped files that result from a successful drag-and-drop operation.", "parameters": [{"name": "hDrop", "type": "HDROP", "description": "Identifier of the structure that contains the file names of the dropped files."}, {"name": "iFile", "type": "UINT", "description": "Index of the file to query. If the value of this parameter is 0xFFFFFFFF, DragQueryFile returns a count of the files dropped. If the value of this parameter is between zero and the total number of files dropped, DragQueryFile copies the file name with the corresponding value to the buffer pointed to by the lpszFile parameter."}, {"name": "lpszFile", "type": "LPTSTR", "description": "The address of a buffer that receives the file name of a dropped file when the function returns. This file name is a null-terminated string. If this parameter is NULL, DragQueryFile returns the required size, in characters, of this buffer."}, {"name": "cch", "type": "UINT", "description": "The size, in characters, of the lpszFile buffer."}]}, {"name": "DragQueryPoint", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-dragquerypoint", "description": "Retrieves the position of the mouse pointer at the time a file was dropped during a drag-and-drop operation.", "parameters": [{"name": "hDrop", "type": "HDROP", "description": "Handle of the drop structure that describes the dropped file."}, {"name": "ppt", "type": "POINT*", "description": "Pointer to a POINT structure that, when this function returns successfully, receives the coordinates of the mouse pointer at the time the file was dropped."}]}, {"name": "DuplicateIcon", "return_type": "HICON", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-duplicateicon", "description": "Creates a duplicate of a specified icon.", "parameters": [{"name": "hInst", "type": "HINSTANCE", "description": "hIcon"}]}, {"name": "ExtractAssociatedIconA", "return_type": "HICON", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-extractassociatedicona", "description": "Gets a handle to an icon stored as a resource in a file or an icon stored in a file's associated executable file.", "parameters": [{"name": "hInst", "type": "HINSTANCE", "description": "A handle to the instance of the calling application."}, {"name": "pszIconPath", "type": "LPTSTR", "description": "Pointer to a string that, on entry, specifies the full path and file name of the file that contains the icon. The function extracts the icon handle from that file, or from an executable file associated with that file."}]}, {"name": "ExtractAssociatedIconExA", "return_type": "HICON", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-extractassociatediconexa", "description": "[ExtractAssociatedIconEx is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]\nGets a handle to an icon stored as a resource in a file or an icon stored in a file's associated executable file. It extends the ExtractAssociatedIcon function by retrieving the icon's ID when that icon is extracted from an executable file.\nSyntax\nHICON ExtractAssociatedIconExA(\n  HINSTANCE hInst,\n  LPSTR     pszIconPath,\n  WORD      *piIconIndex,\n  WORD      *piIconId\n);\n\nParameters\nhInst\nType: HINSTANCE\nThe handle of the module from which to extract the icon.\npszIconPath\nType: LPTSTR\nPointer to a string that, on entry, specifies the full path and file name of the file that contains the icon. The function extracts the icon handle from that file, or from an executable file associated with that file.\nWhen this function returns, if the icon handle was obtained from an executable file (either an executable file directly pointed to by this parameter or an associated executable file) the function stores the full path and file name of that executable in the buffer pointed to by this parameter.\npiIconIndex\nType: LPWORD\nPointer to a WORD value that, on entry, specifies the index of the icon whose handle is to be obtained.\nWhen the function returns, if the icon handle was obtained from an executable file (either an executable file pointed to by lpIconPath or an associated executable file), this value points to the icon's index in that file.\npiIconId\nType: LPWORD\nPointer to a WORD value that, on entry, specifies the ID of the icon whose handle is to be obtained.\nWhen the function returns, if the icon handle was obtained from an executable file (either an executable file pointed to by lpIconPath or an associated executable file), this value points to the icon's ID within that file.\nReturn value\nType: HICON\nReturns the icon's handle if successful, otherwise NULL.\nRemarks\nThe icon handle returned by this function must be released by calling DestroyIcon when it is no longer needed.\n\nNote\nThe shellapi.h header defines ExtractAssociatedIconEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see Conventions for Function Prototypes.\n\nRequirements\n\n\n\n\u00c2\u00a0\n\u00c2\u00a0\n\n\n\n\nMinimum supported client\nWindows\u00c2\u00a0XP [desktop apps only]\n\n\nMinimum supported server\nWindows Server\u00c2\u00a02003 [desktop apps only]\n\n\nTarget Platform\nWindows\n\n\nHeader\nshellapi.h\n\n\nLibrary\nShell32.lib\n\n\nDLL\nShell32.dll (version 5.0 or later)\n\n\n\nSee also\nExtractAssociatedIcon\nExtractIcon\nExtractIconEx", "parameters": [{"name": "hInst", "type": "HINSTANCE", "description": "The handle of the module from which to extract the icon."}, {"name": "pszIconPath", "type": "LPTSTR", "description": "Pointer to a string that, on entry, specifies the full path and file name of the file that contains the icon. The function extracts the icon handle from that file, or from an executable file associated with that file."}]}, {"name": "ExtractAssociatedIconExW", "return_type": "HICON", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-extractassociatediconexw", "description": "[ExtractAssociatedIconEx is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]\nGets a handle to an icon stored as a resource in a file or an icon stored in a file's associated executable file. It extends the ExtractAssociatedIcon function by retrieving the icon's ID when that icon is extracted from an executable file.\nSyntax\nHICON ExtractAssociatedIconExW(\n  HINSTANCE hInst,\n  LPWSTR    pszIconPath,\n  WORD      *piIconIndex,\n  WORD      *piIconId\n);\n\nParameters\nhInst\nType: HINSTANCE\nThe handle of the module from which to extract the icon.\npszIconPath\nType: LPTSTR\nPointer to a string that, on entry, specifies the full path and file name of the file that contains the icon. The function extracts the icon handle from that file, or from an executable file associated with that file.\nWhen this function returns, if the icon handle was obtained from an executable file (either an executable file directly pointed to by this parameter or an associated executable file) the function stores the full path and file name of that executable in the buffer pointed to by this parameter.\npiIconIndex\nType: LPWORD\nPointer to a WORD value that, on entry, specifies the index of the icon whose handle is to be obtained.\nWhen the function returns, if the icon handle was obtained from an executable file (either an executable file pointed to by lpIconPath or an associated executable file), this value points to the icon's index in that file.\npiIconId\nType: LPWORD\nPointer to a WORD value that, on entry, specifies the ID of the icon whose handle is to be obtained.\nWhen the function returns, if the icon handle was obtained from an executable file (either an executable file pointed to by lpIconPath or an associated executable file), this value points to the icon's ID within that file.\nReturn value\nType: HICON\nReturns the icon's handle if successful, otherwise NULL.\nRemarks\nThe icon handle returned by this function must be released by calling DestroyIcon when it is no longer needed.\n\nNote\nThe shellapi.h header defines ExtractAssociatedIconEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see Conventions for Function Prototypes.\n\nRequirements\n\n\n\n\u00c2\u00a0\n\u00c2\u00a0\n\n\n\n\nMinimum supported client\nWindows\u00c2\u00a0XP [desktop apps only]\n\n\nMinimum supported server\nWindows Server\u00c2\u00a02003 [desktop apps only]\n\n\nTarget Platform\nWindows\n\n\nHeader\nshellapi.h\n\n\nLibrary\nShell32.lib\n\n\nDLL\nShell32.dll (version 5.0 or later)\n\n\n\nSee also\nExtractAssociatedIcon\nExtractIcon\nExtractIconEx", "parameters": [{"name": "hInst", "type": "HINSTANCE", "description": "The handle of the module from which to extract the icon."}, {"name": "pszIconPath", "type": "LPTSTR", "description": "Pointer to a string that, on entry, specifies the full path and file name of the file that contains the icon. The function extracts the icon handle from that file, or from an executable file associated with that file."}]}, {"name": "ExtractAssociatedIconW", "return_type": "HICON", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-extractassociatediconw", "description": "Gets a handle to an icon stored as a resource in a file or an icon stored in a file's associated executable file.", "parameters": [{"name": "hInst", "type": "HINSTANCE", "description": "A handle to the instance of the calling application."}, {"name": "pszIconPath", "type": "LPTSTR", "description": "Pointer to a string that, on entry, specifies the full path and file name of the file that contains the icon. The function extracts the icon handle from that file, or from an executable file associated with that file."}]}, {"name": "ExtractIconA", "return_type": "HICON", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-extracticona", "description": "Gets a handle to an icon from the specified executable file, DLL, or icon file.", "parameters": [{"name": "hInst", "type": "HINSTANCE", "description": "Handle to the instance of the application that calls the function."}, {"name": "pszExeFileName", "type": "LPCTSTR", "description": "Pointer to a null-terminated string that specifies the name of an executable file, DLL, or icon file."}, {"name": "nIconIndex", "type": "UINT", "description": "Specifies the zero-based index of the icon to retrieve. For example, if this value is 0, the function returns a handle to the first icon in the specified file."}]}, {"name": "ExtractIconExA", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-extracticonexa", "description": "The ExtractIconEx function creates an array of handles to large or small icons extracted from the specified executable file, DLL, or icon file.", "parameters": [{"name": "lpszFile", "type": "LPCTSTR", "description": "Pointer to a null-terminated string that specifies the name of an executable file, DLL, or icon file from which icons will be extracted."}, {"name": "nIconIndex", "type": "int", "description": "Specifies the zero-based index of the first icon to extract. For example, if this value is zero, the function extracts the first icon in the specified file."}]}, {"name": "ExtractIconExW", "return_type": "UINT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-extracticonexw", "description": "The ExtractIconEx function creates an array of handles to large or small icons extracted from the specified executable file, DLL, or icon file.", "parameters": [{"name": "lpszFile", "type": "LPCTSTR", "description": "Pointer to a null-terminated string that specifies the name of an executable file, DLL, or icon file from which icons will be extracted."}, {"name": "nIconIndex", "type": "int", "description": "Specifies the zero-based index of the first icon to extract. For example, if this value is zero, the function extracts the first icon in the specified file."}]}, {"name": "ExtractIconW", "return_type": "HICON", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-extracticonw", "description": "Gets a handle to an icon from the specified executable file, DLL, or icon file.", "parameters": [{"name": "hInst", "type": "HINSTANCE", "description": "Handle to the instance of the application that calls the function."}, {"name": "pszExeFileName", "type": "LPCTSTR", "description": "Pointer to a null-terminated string that specifies the name of an executable file, DLL, or icon file."}, {"name": "nIconIndex", "type": "UINT", "description": "Specifies the zero-based index of the icon to retrieve. For example, if this value is 0, the function returns a handle to the first icon in the specified file."}]}, {"name": "FindExecutableA", "return_type": "HINSTANCE", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-findexecutablea", "description": "Retrieves the name of and handle to the executable (.exe) file associated with a specific document file.", "parameters": [{"name": "lpFile", "type": "LPCTSTR", "description": "The address of a null-terminated string that specifies a file name. This file should be a document."}, {"name": "lpDirectory", "type": "LPCTSTR", "description": "The address of a null-terminated string that specifies the default directory. This value can be NULL."}, {"name": "lpResult", "type": "LPTSTR", "description": "The address of a buffer that receives the file name of the associated executable file. This file name is a null-terminated string that specifies the executable file started when an \"open\" by association is run on the file specified in the lpFile parameter. Put simply, this is the application that is launched when the document file is directly double-clicked or when Open is chosen from the file's shortcut menu. This parameter must contain a valid non-null value and is assumed to be of length MAX_PATH. Responsibility for validating the value is left to the programmer."}]}, {"name": "FindExecutableW", "return_type": "HINSTANCE", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-findexecutablew", "description": "Retrieves the name of and handle to the executable (.exe) file associated with a specific document file.", "parameters": [{"name": "lpFile", "type": "LPCTSTR", "description": "The address of a null-terminated string that specifies a file name. This file should be a document."}, {"name": "lpDirectory", "type": "LPCTSTR", "description": "The address of a null-terminated string that specifies the default directory. This value can be NULL."}, {"name": "lpResult", "type": "LPTSTR", "description": "The address of a buffer that receives the file name of the associated executable file. This file name is a null-terminated string that specifies the executable file started when an \"open\" by association is run on the file specified in the lpFile parameter. Put simply, this is the application that is launched when the document file is directly double-clicked or when Open is chosen from the file's shortcut menu. This parameter must contain a valid non-null value and is assumed to be of length MAX_PATH. Responsibility for validating the value is left to the programmer."}]}, {"name": "InitNetworkAddressControl", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-initnetworkaddresscontrol", "description": "Initializes the network address control window class.", "parameters": []}, {"name": "NetAddr_DisplayErrorTip", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-netaddr_displayerrortip", "description": "Displays an error message in the balloon tip associated with the network address control.", "parameters": [{"name": "hwnd", "type": "", "description": "A handle to the network address control."}]}, {"name": "NetAddr_GetAddress", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-netaddr_getaddress", "description": "Indicates whether a network address conforms to a specified type and format.", "parameters": [{"name": "hwnd", "type": "", "description": "A handle to the network address control that contains the address to validate."}, {"name": "pv", "type": "", "description": "A pointer to an NC_ADDRESS structure to receive network address information in parsed form, if the address format and type in the control specified by hwnd are validated. The calling application is responsible for allocating the memory for this structure."}]}, {"name": "NetAddr_GetAllowType", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-netaddr_getallowtype", "description": "Retrieves the network address types that a specified network address control accepts.", "parameters": [{"name": "hwnd", "type": "", "description": "A handle to the network address control."}]}, {"name": "NetAddr_SetAllowType", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-netaddr_setallowtype", "description": "Sets the network address types that a specified network address control accepts.", "parameters": [{"name": "hwnd", "type": "", "description": "A handle to the network address control."}, {"name": "addrMask", "type": "", "description": "Specifies the network address types as one or more of the NET_STRING constants."}]}, {"name": "SHAppBarMessage", "return_type": "UINT_PTR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shappbarmessage", "description": "Sends an appbar message to the system.", "parameters": [{"name": "dwMessage", "type": "DWORD", "description": "Appbar message value to send. This parameter can be one of the following values."}]}, {"name": "SHCreateProcessAsUserW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shcreateprocessasuserw", "description": "[SHCreateProcessAsUserW is not implemented under Windows\u00c2\u00a0XP or later systems.]\nCreates a new user-mode process and its primary thread to run a specified executable file.\nSyntax\nBOOL SHCreateProcessAsUserW(\n  PSHCREATEPROCESSINFOW pscpi\n);\n\nParameters\npscpi\nType: PSHCREATEPROCESSINFOW\nA pointer to an SHCREATEPROCESSINFOW structure with information on how to create the process.\nReturn value\nType: BOOL\nReturns TRUE if successful, or FALSE if not. To retrieve extended error information, call GetLastError.\nRemarks\nThis function is similar to ShellExecuteEx with runas as the verb. However, SHCreateProcessAsUserW creates a process that runs in the security context of the user represented by the hUserToken member of the structure pointed to by pscpi. The lpProcessInformation member can be used to return a PROCESS_INFORMATION structure with information on the new process.\nThe runas verb must be supported by the executable file's file type. The .exe file type supports runas. Use the AssocQueryString function to check whether runas is supported by other file types. The following code fragment illustrates the syntax.\nAssocQueryString(0, ASSOCSTR_COMMAND, pszFile, TEXT(\"runas\"), NULL, &cchVerb)\n\nFor a discussion of how to use the Shell to launch applications, see Launching Applications.\nSHCreateProcessAsUserW is not supported under Windows\u00c2\u00a0XP. Users requiring similar functionality should examine CreateProcess, CreateProcessAsUser, CreateProcessWithLogonW and ShellExecuteEx, carefully evaluating each based on required functionality and security. IQueryAssociations can be used to extract information used with CreateProcess, if necessary.\nRequirements\n\n\n\n\u00c2\u00a0\n\u00c2\u00a0\n\n\n\n\nMinimum supported client\nWindows\u00c2\u00a02000 Professional, Windows\u00c2\u00a0XP [desktop apps only]\n\n\nMinimum supported server\nWindows Server\u00c2\u00a02003 [desktop apps only]\n\n\nTarget Platform\nWindows\n\n\nHeader\nshellapi.h\n\n\nLibrary\nShell32.lib\n\n\nDLL\nShell32.dll (version 5.0 or later)\n\n\n\nSee also\nCreateProcess\nCreateProcessAsUser\nCreateProcessWithLogonW\nShellExecuteEx", "parameters": [{"name": "pscpi", "type": "PSHCREATEPROCESSINFOW", "description": "A pointer to an SHCREATEPROCESSINFOW structure with information on how to create the process."}]}, {"name": "Shell_NotifyIconA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shell_notifyicona", "description": "Sends a message to the taskbar's status area.", "parameters": [{"name": "dwMessage", "type": "DWORD", "description": "A value that specifies the action to be taken by this function. It can have one of the following values:"}]}, {"name": "Shell_NotifyIconGetRect", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shell_notifyicongetrect", "description": "Gets the screen coordinates of the bounding rectangle of a notification icon.", "parameters": [{"name": "identifier", "type": "const NOTIFYICONIDENTIFIER*", "description": "Pointer to a NOTIFYICONIDENTIFIER structure that identifies the icon."}, {"name": "iconLocation", "type": "RECT*", "description": "Pointer to a RECT structure that, when this function returns successfully, receives the coordinates of the icon."}]}, {"name": "Shell_NotifyIconW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shell_notifyiconw", "description": "Sends a message to the taskbar's status area.", "parameters": [{"name": "dwMessage", "type": "DWORD", "description": "A value that specifies the action to be taken by this function. It can have one of the following values:"}]}, {"name": "ShellAboutA", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shellabouta", "description": "Displays a ShellAbout dialog box.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A window handle to a parent window. This parameter can be NULL."}, {"name": "szApp", "type": "LPCTSTR", "description": "A pointer to a null-terminated string that contains text to be displayed in the title bar of the ShellAbout dialog box and on the first line of the dialog box after the text \"Microsoft\". If the text contains a separator (#) that divides it into two parts, the function displays the first part in the title bar and the second part on the first line after the text \"Microsoft\"."}]}, {"name": "ShellAboutW", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shellaboutw", "description": "Displays a ShellAbout dialog box.", "parameters": [{"name": "hWnd", "type": "HWND", "description": "A window handle to a parent window. This parameter can be NULL."}, {"name": "szApp", "type": "LPCTSTR", "description": "A pointer to a null-terminated string that contains text to be displayed in the title bar of the ShellAbout dialog box and on the first line of the dialog box after the text \"Microsoft\". If the text contains a separator (#) that divides it into two parts, the function displays the first part in the title bar and the second part on the first line after the text \"Microsoft\"."}]}, {"name": "ShellExecuteA", "return_type": "HINSTANCE", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shellexecutea", "description": "Performs an operation on a specified file.", "parameters": [{"name": "hwnd", "type": "HWND", "description": "A handle to the parent window used for displaying a UI or error messages. This value can be NULL if the operation is not associated with a window."}, {"name": "lpOperation", "type": "LPCTSTR", "description": "A pointer to a null-terminated string, referred to in this case as a verb, that specifies the action to be performed. The set of available verbs depends on the particular file or folder. Generally, the actions available from an object's shortcut menu are available verbs. The following verbs are commonly used:"}]}, {"name": "ShellExecuteExA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shellexecuteexa", "description": "Performs an operation on a specified file.", "parameters": [{"name": "pExecInfo", "type": "SHELLEXECUTEINFO*", "description": "A pointer to a SHELLEXECUTEINFO structure that contains and receives information about the application being executed."}]}, {"name": "ShellExecuteExW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shellexecuteexw", "description": "Performs an operation on a specified file.", "parameters": [{"name": "pExecInfo", "type": "SHELLEXECUTEINFO*", "description": "A pointer to a SHELLEXECUTEINFO structure that contains and receives information about the application being executed."}]}, {"name": "ShellExecuteW", "return_type": "HINSTANCE", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shellexecutew", "description": "Performs an operation on a specified file.", "parameters": [{"name": "hwnd", "type": "HWND", "description": "A handle to the parent window used for displaying a UI or error messages. This value can be NULL if the operation is not associated with a window."}, {"name": "lpOperation", "type": "LPCTSTR", "description": "A pointer to a null-terminated string, referred to in this case as a verb, that specifies the action to be performed. The set of available verbs depends on the particular file or folder. Generally, the actions available from an object's shortcut menu are available verbs. The following verbs are commonly used:"}]}, {"name": "ShellMessageBoxA", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shellmessageboxa", "description": "[ShellMessageBox is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]\nShellMessageBox is a special instance of MessageBox that provides the option of using the owner window's title as the title of the message box.\nSyntax\nint ShellMessageBoxA(\n  HINSTANCE hAppInst,\n  HWND      hWnd,\n  LPCSTR    lpcText,\n  LPCSTR    lpcTitle,\n  UINT      fuStyle,\n  ...       \n);\n\nParameters\nhAppInst\nType: HINSTANCE\nThe handle of the module from which to load a string resource named in pszTitle. If pszTitle does not name a string resource, this parameter is ignored. This value must be valid if pszMsg or pszTitle is a resource ID.\nhWnd\nType: HWND\nA handle to the owner window of the message box to be created. If this variable is not NULL, the title of the owner window is used as the title of the message box.\nlpcText\nType: LPCTSTR\nA pointer to a null-terminated string that contains either the message to be displayed or a resource ID specifying where the message is to be retrieved from.\nlpcTitle\nType: LPCTSTR\nA pointer to a null-terminated string that contains the dialog box title or a resource ID specifying where the title is to be retrieved. If both this parameter and hWnd are NULL, no title is displayed. If this parameter points to a loadable resource formed with the MAKEINTRESOURCE macro, it overrides hWnd as the title.\nfuStyle\nType: UINT\nSpecifies the contents and behavior of the dialog box. For possible values, see MessageBox.\n...\nA variable argument list that is combined with pszMsg to form the full text displayed in the message box.\nReturn value\nType: int\nAn integer value indicating a button that was pressed in the message box. For specific values, see MessageBox.\nIf the function fails, the return value is zero. To get extended error information, call GetLastError.\nRemarks\n\nNote\nThe shellapi.h header defines ShellMessageBox as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see Conventions for Function Prototypes.\n\nRequirements\n\n\n\n\u00c2\u00a0\n\u00c2\u00a0\n\n\n\n\nMinimum supported client\nWindows\u00c2\u00a0XP [desktop apps only]\n\n\nMinimum supported server\nWindows Server\u00c2\u00a02003 [desktop apps only]\n\n\nTarget Platform\nWindows\n\n\nHeader\nshellapi.h\n\n\nLibrary\nShlwapi.lib\n\n\nDLL\nShlwapi.dll\n\n\n\nSee also\nMAKEINTRESOURCE\nMessageBox", "parameters": [{"name": "hAppInst", "type": "HINSTANCE", "description": "The handle of the module from which to load a string resource named in pszTitle. If pszTitle does not name a string resource, this parameter is ignored. This value must be valid if pszMsg or pszTitle is a resource ID."}, {"name": "hWnd", "type": "HWND", "description": "A handle to the owner window of the message box to be created. If this variable is not NULL, the title of the owner window is used as the title of the message box."}, {"name": "lpcText", "type": "LPCTSTR", "description": "A pointer to a null-terminated string that contains either the message to be displayed or a resource ID specifying where the message is to be retrieved from."}, {"name": "lpcTitle", "type": "LPCTSTR", "description": "A pointer to a null-terminated string that contains the dialog box title or a resource ID specifying where the title is to be retrieved. If both this parameter and hWnd are NULL, no title is displayed. If this parameter points to a loadable resource formed with the MAKEINTRESOURCE macro, it overrides hWnd as the title."}, {"name": "fuStyle", "type": "UINT", "description": "Specifies the contents and behavior of the dialog box. For possible values, see MessageBox."}, {"name": "...", "type": "", "description": "A variable argument list that is combined with pszMsg to form the full text displayed in the message box."}]}, {"name": "ShellMessageBoxW", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shellmessageboxw", "description": "[ShellMessageBox is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]\nShellMessageBox is a special instance of MessageBox that provides the option of using the owner window's title as the title of the message box.\nSyntax\nint ShellMessageBoxW(\n  HINSTANCE hAppInst,\n  HWND      hWnd,\n  LPCWSTR   lpcText,\n  LPCWSTR   lpcTitle,\n  UINT      fuStyle,\n  ...       \n);\n\nParameters\nhAppInst\nType: HINSTANCE\nThe handle of the module from which to load a string resource named in pszTitle. If pszTitle does not name a string resource, this parameter is ignored. This value must be valid if pszMsg or pszTitle is a resource ID.\nhWnd\nType: HWND\nA handle to the owner window of the message box to be created. If this variable is not NULL, the title of the owner window is used as the title of the message box.\nlpcText\nType: LPCTSTR\nA pointer to a null-terminated string that contains either the message to be displayed or a resource ID specifying where the message is to be retrieved from.\nlpcTitle\nType: LPCTSTR\nA pointer to a null-terminated string that contains the dialog box title or a resource ID specifying where the title is to be retrieved. If both this parameter and hWnd are NULL, no title is displayed. If this parameter points to a loadable resource formed with the MAKEINTRESOURCE macro, it overrides hWnd as the title.\nfuStyle\nType: UINT\nSpecifies the contents and behavior of the dialog box. For possible values, see MessageBox.\n...\nA variable argument list that is combined with pszMsg to form the full text displayed in the message box.\nReturn value\nType: int\nAn integer value indicating a button that was pressed in the message box. For specific values, see MessageBox.\nIf the function fails, the return value is zero. To get extended error information, call GetLastError.\nRemarks\n\nNote\nThe shellapi.h header defines ShellMessageBox as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see Conventions for Function Prototypes.\n\nRequirements\n\n\n\n\u00c2\u00a0\n\u00c2\u00a0\n\n\n\n\nMinimum supported client\nWindows\u00c2\u00a0XP [desktop apps only]\n\n\nMinimum supported server\nWindows Server\u00c2\u00a02003 [desktop apps only]\n\n\nTarget Platform\nWindows\n\n\nHeader\nshellapi.h\n\n\nLibrary\nShlwapi.lib\n\n\nDLL\nShlwapi.dll\n\n\n\nSee also\nMAKEINTRESOURCE\nMessageBox", "parameters": [{"name": "hAppInst", "type": "HINSTANCE", "description": "The handle of the module from which to load a string resource named in pszTitle. If pszTitle does not name a string resource, this parameter is ignored. This value must be valid if pszMsg or pszTitle is a resource ID."}, {"name": "hWnd", "type": "HWND", "description": "A handle to the owner window of the message box to be created. If this variable is not NULL, the title of the owner window is used as the title of the message box."}, {"name": "lpcText", "type": "LPCTSTR", "description": "A pointer to a null-terminated string that contains either the message to be displayed or a resource ID specifying where the message is to be retrieved from."}, {"name": "lpcTitle", "type": "LPCTSTR", "description": "A pointer to a null-terminated string that contains the dialog box title or a resource ID specifying where the title is to be retrieved. If both this parameter and hWnd are NULL, no title is displayed. If this parameter points to a loadable resource formed with the MAKEINTRESOURCE macro, it overrides hWnd as the title."}, {"name": "fuStyle", "type": "UINT", "description": "Specifies the contents and behavior of the dialog box. For possible values, see MessageBox."}, {"name": "...", "type": "", "description": "A variable argument list that is combined with pszMsg to form the full text displayed in the message box."}]}, {"name": "SHEmptyRecycleBinA", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shemptyrecyclebina", "description": "Empties the Recycle Bin on the specified drive.", "parameters": [{"name": "hwnd", "type": "HWND", "description": "A handle to the parent window of any dialog boxes that might be displayed during the operation. This parameter can be NULL."}, {"name": "pszRootPath", "type": "LPCTSTR", "description": "The address of a null-terminated string of maximum length MAX_PATH that contains the path of the root drive on which the Recycle Bin is located. This parameter can contain the address of a string formatted with the drive, folder, and subfolder names, for example c:\\windows\\system. It can also contain an empty string or NULL. If this value is an empty string or NULL, all Recycle Bins on all drives will be emptied."}, {"name": "dwFlags", "type": "DWORD", "description": "One or more of the following values."}]}, {"name": "SHEmptyRecycleBinW", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shemptyrecyclebinw", "description": "Empties the Recycle Bin on the specified drive.", "parameters": [{"name": "hwnd", "type": "HWND", "description": "A handle to the parent window of any dialog boxes that might be displayed during the operation. This parameter can be NULL."}, {"name": "pszRootPath", "type": "LPCTSTR", "description": "The address of a null-terminated string of maximum length MAX_PATH that contains the path of the root drive on which the Recycle Bin is located. This parameter can contain the address of a string formatted with the drive, folder, and subfolder names, for example c:\\windows\\system. It can also contain an empty string or NULL. If this value is an empty string or NULL, all Recycle Bins on all drives will be emptied."}, {"name": "dwFlags", "type": "DWORD", "description": "One or more of the following values."}]}, {"name": "SHEnumerateUnreadMailAccountsA", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shenumerateunreadmailaccountsa", "description": "Enumerates the user accounts that have unread email.", "parameters": [{"name": "hKeyUser", "type": "HKEY", "description": "A valid HKEY for a given user."}, {"name": "dwIndex", "type": "DWORD", "description": "The index of the user account."}, {"name": "pszMailAddress", "type": "LPTSTR", "description": "A pointer to a Unicode string that specifies the email address of an account belonging to the specified user."}, {"name": "cchMailAddress", "type": "int", "description": "The number of characters in the email address."}]}, {"name": "SHEnumerateUnreadMailAccountsW", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shenumerateunreadmailaccountsw", "description": "Enumerates the user accounts that have unread email.", "parameters": [{"name": "hKeyUser", "type": "HKEY", "description": "A valid HKEY for a given user."}, {"name": "dwIndex", "type": "DWORD", "description": "The index of the user account."}, {"name": "pszMailAddress", "type": "LPTSTR", "description": "A pointer to a Unicode string that specifies the email address of an account belonging to the specified user."}, {"name": "cchMailAddress", "type": "int", "description": "The number of characters in the email address."}]}, {"name": "SHEvaluateSystemCommandTemplate", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shevaluatesystemcommandtemplate", "description": "Enforces strict validation of parameters used in a call to CreateProcess or ShellExecute.", "parameters": [{"name": "pszCmdTemplate", "type": "PCWSTR", "description": "A command line, which may or may not include parameters. If the parameters are substitution parameters, then SHEvaluateSystemCommandTemplate should be called before parameters have been replaced."}, {"name": "ppszApplication", "type": "PWSTR*", "description": "A pointer to the verified path to the application. This value should be passed as the lpApplication parameter in a call to CreateProcess or as the lpFile parameter in a call to ShellExecute. This resource is allocated using CoTaskMemAlloc, and it is the responsibility of the caller to free the resource when it is no longer needed by calling CoTaskMemFree."}, {"name": "ppszCommandLine", "type": "PWSTR*", "description": "A pointer to a command-line string template to be used in a call to CreateProcess. Command-line parameters should be specified based on this template, and then passed as the lpCommandLine parameter to CreateProcess. It is guaranteed to be of a form that PathGetArgs can always read correctly. This resource is allocated using CoTaskMemAlloc, and it is the responsibility of the caller to free the resource when it is no longer needed by calling CoTaskMemFree."}]}, {"name": "SHFileOperationA", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shfileoperationa", "description": "Copies, moves, renames, or deletes a file system object. This function has been replaced in Windows\u00c2\u00a0Vista by IFileOperation.", "parameters": [{"name": "lpFileOp", "type": "LPSHFILEOPSTRUCT", "description": "A pointer to an SHFILEOPSTRUCT structure that contains information this function needs to carry out the specified operation. This parameter must contain a valid value that is not NULL. You are responsible for validating the value. If you do not validate it, you will experience unexpected results."}]}, {"name": "SHFileOperationW", "return_type": "int", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shfileoperationw", "description": "Copies, moves, renames, or deletes a file system object. This function has been replaced in Windows\u00c2\u00a0Vista by IFileOperation.", "parameters": [{"name": "lpFileOp", "type": "LPSHFILEOPSTRUCT", "description": "A pointer to an SHFILEOPSTRUCT structure that contains information this function needs to carry out the specified operation. This parameter must contain a valid value that is not NULL. You are responsible for validating the value. If you do not validate it, you will experience unexpected results."}]}, {"name": "SHFreeNameMappings", "return_type": "", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shfreenamemappings", "description": "Frees a file name mapping object that was retrieved by the SHFileOperation function.", "parameters": [{"name": "hNameMappings", "type": "HANDLE", "description": "A handle to the file name mapping object to be freed."}]}, {"name": "SHGetDiskFreeSpaceExA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shgetdiskfreespaceexa", "description": "Retrieves disk space information for a disk volume.", "parameters": [{"name": "pszDirectoryName", "type": "LPCTSTR", "description": "A null-terminated string that specifies the volume for which size information is retrieved. This can be a drive letter, UNC name, or the path of a folder. You cannot use NULL to represent the current drive."}, {"name": "pulFreeBytesAvailableToCaller", "type": "ULARGE_INTEGER*", "description": "Pointer to a value that receives the number of bytes on the volume available to the calling application. If the operating system implements per-user quotas, this value may be less than the total number of free bytes on the volume."}, {"name": "pulTotalNumberOfBytes", "type": "ULARGE_INTEGER*", "description": "Pointer to a value that receives the total size of the volume, in bytes."}, {"name": "pulTotalNumberOfFreeBytes", "type": "ULARGE_INTEGER*", "description": "Pointer to a value that receives the number of bytes of free space on the volume."}]}, {"name": "SHGetDiskFreeSpaceExW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shgetdiskfreespaceexw", "description": "Retrieves disk space information for a disk volume.", "parameters": [{"name": "pszDirectoryName", "type": "LPCTSTR", "description": "A null-terminated string that specifies the volume for which size information is retrieved. This can be a drive letter, UNC name, or the path of a folder. You cannot use NULL to represent the current drive."}, {"name": "pulFreeBytesAvailableToCaller", "type": "ULARGE_INTEGER*", "description": "Pointer to a value that receives the number of bytes on the volume available to the calling application. If the operating system implements per-user quotas, this value may be less than the total number of free bytes on the volume."}, {"name": "pulTotalNumberOfBytes", "type": "ULARGE_INTEGER*", "description": "Pointer to a value that receives the total size of the volume, in bytes."}, {"name": "pulTotalNumberOfFreeBytes", "type": "ULARGE_INTEGER*", "description": "Pointer to a value that receives the number of bytes of free space on the volume."}]}, {"name": "SHGetDriveMedia", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shgetdrivemedia", "description": "Returns the type of media that is in the given drive.", "parameters": [{"name": "pszDrive", "type": "PCWSTR", "description": "The drive in which to check the media type."}, {"name": "pdwMediaContent", "type": "DWORD*", "description": "A pointer to the type of media in the given drive. A combination of ARCONTENT flags."}]}, {"name": "SHGetFileInfoA", "return_type": "DWORD_PTR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shgetfileinfoa", "description": "Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.", "parameters": [{"name": "pszPath", "type": "LPCTSTR", "description": "A pointer to a null-terminated string of maximum length MAX_PATH that contains the path and file name. Both absolute and relative paths are valid."}]}, {"name": "SHGetFileInfoW", "return_type": "DWORD_PTR", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shgetfileinfow", "description": "Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.", "parameters": [{"name": "pszPath", "type": "LPCTSTR", "description": "A pointer to a null-terminated string of maximum length MAX_PATH that contains the path and file name. Both absolute and relative paths are valid."}]}, {"name": "SHGetImageList", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shgetimagelist", "description": "Retrieves an image list.", "parameters": [{"name": "iImageList", "type": "int", "description": "The image type contained in the list. One of the following values:"}]}, {"name": "SHGetLocalizedName", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shgetlocalizedname", "description": "Retrieves the localized name of a file in a Shell folder.", "parameters": [{"name": "pszPath", "type": "PCWSTR", "description": "A pointer to a string that specifies the fully qualified path of the file."}, {"name": "pszResModule", "type": "PWSTR", "description": "When this function returns, contains a pointer to a string resource that specifies the localized version of the file name."}, {"name": "cch", "type": "UINT", "description": "When this function returns, contains the size of the string, in WCHARs, at pszResModule."}, {"name": "pidsRes", "type": "int*", "description": "When this function returns, contains a pointer to the ID of the localized file name in the resource file."}]}, {"name": "SHGetNewLinkInfoA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shgetnewlinkinfoa", "description": "Creates a name for a new shortcut based on the shortcut's proposed target. This function does not create the shortcut, just the name.", "parameters": [{"name": "pszLinkTo", "type": "LPCTSTR", "description": "A pointer to the path and file name of the shortcut's target. If uFlags does not contain the SHGNLI_PIDL value, this parameter is the address of a null-terminated string that contains the target. If uFlags contains the SHGNLI_PIDL value, this parameter is a PIDL that represents the target."}, {"name": "pszDir", "type": "LPCTSTR", "description": "A pointer to a null-terminated string that contains the path of the folder in which the shortcut would be created."}, {"name": "pszName", "type": "LPTSTR", "description": "A pointer to a string that receives the null-terminated path and file name for the shortcut. This buffer is assumed to be at least MAX_PATH characters in size."}, {"name": "pfMustCopy", "type": "BOOL*", "description": "The address of a BOOL value that receives a flag indicating whether the shortcut would be copied. When a shortcut to another shortcut is created, the Shell simply copies the target shortcut and modifies that copied shortcut appropriately. This parameter receives a nonzero value if the target specified in pszLinkTo specifies a shortcut that will cause the target shortcut to be copied. This parameter receives zero if the target does not specify a shortcut that would be copied."}, {"name": "uFlags", "type": "UINT", "description": "The options for the function. This can be zero or a combination of the following values."}]}, {"name": "SHGetNewLinkInfoW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shgetnewlinkinfow", "description": "Creates a name for a new shortcut based on the shortcut's proposed target. This function does not create the shortcut, just the name.", "parameters": [{"name": "pszLinkTo", "type": "LPCTSTR", "description": "A pointer to the path and file name of the shortcut's target. If uFlags does not contain the SHGNLI_PIDL value, this parameter is the address of a null-terminated string that contains the target. If uFlags contains the SHGNLI_PIDL value, this parameter is a PIDL that represents the target."}, {"name": "pszDir", "type": "LPCTSTR", "description": "A pointer to a null-terminated string that contains the path of the folder in which the shortcut would be created."}, {"name": "pszName", "type": "LPTSTR", "description": "A pointer to a string that receives the null-terminated path and file name for the shortcut. This buffer is assumed to be at least MAX_PATH characters in size."}, {"name": "pfMustCopy", "type": "BOOL*", "description": "The address of a BOOL value that receives a flag indicating whether the shortcut would be copied. When a shortcut to another shortcut is created, the Shell simply copies the target shortcut and modifies that copied shortcut appropriately. This parameter receives a nonzero value if the target specified in pszLinkTo specifies a shortcut that will cause the target shortcut to be copied. This parameter receives zero if the target does not specify a shortcut that would be copied."}, {"name": "uFlags", "type": "UINT", "description": "The options for the function. This can be zero or a combination of the following values."}]}, {"name": "SHGetPropertyStoreForWindow", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shgetpropertystoreforwindow", "description": "Retrieves an object that represents a specific window's collection of properties, which allows those properties to be queried or set.", "parameters": [{"name": "hwnd", "type": "HWND", "description": "A handle to the window whose properties are being retrieved."}, {"name": "riid", "type": "REFIID", "description": "A reference to the IID of the property store object to retrieve through ppv. This is typically IID_IPropertyStore."}, {"name": "ppv", "type": "void**", "description": "When this function returns, contains the interface pointer requested in riid. This is typically IPropertyStore."}]}, {"name": "SHGetStockIconInfo", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shgetstockiconinfo", "description": "Retrieves information about system-defined Shell icons.", "parameters": [{"name": "siid", "type": "SHSTOCKICONID", "description": "One of the values from the SHSTOCKICONID enumeration that specifies which icon should be retrieved."}, {"name": "uFlags", "type": "UINT", "description": "A combination of zero or more of the following flags that specify which information is requested."}]}, {"name": "SHGetUnreadMailCountA", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shgetunreadmailcounta", "description": "Retrieves a specified user's unread message count for any or all email accounts.", "parameters": [{"name": "hKeyUser", "type": "HKEY", "description": "A valid HKEY for a given user. This parameter should be NULL if the function is called in a user's environment, in which case HKEY_CURRENT_USER is used. This parameter should be NULL if the function is called from the SYSTEM context, in which case HKEY_USERS\\{SID} is used."}, {"name": "pszMailAddress", "type": "LPCTSTR", "description": "A pointer to a string in Unicode that specifies the email address of an account belonging to the specified user. When this parameter is NULL, pdwCount returns the total count of unread messages for all accounts owned by the designated user."}, {"name": "pdwCount", "type": "DWORD*", "description": "Pointer to a DWORD value which receives the unread message count."}, {"name": "pFileTime", "type": "FILETIME*", "description": "A pointer to a FILETIME structure.  The use of this parameter is determined by whether pszMailAddress is NULL. If pszMailAddress is NULL, then this parameter is treated as an [in] parameter, which specifies a filter, so that only unread mail newer than the specified time appears. If pszMailAddress is not NULL, then this parameter is treated as an [out] parameter, which points to a FILETIME structure into which the function places the timestamp of the last SHSetUnreadMailCount call for the specified user and email account."}, {"name": "pszShellExecuteCommand", "type": "LPCTSTR", "description": "A pointer to a string that returns the ShellExecute command statement passed into the last SHSetUnreadMailCount call for the specified user and email account. This command string starts the email application that owns the account referenced by pszMailAddress. If the ShellExecute command is not required, this parameter can be NULL. If pszMailAddress is NULL, this parameter is ignored and must be NULL."}, {"name": "cchShellExecuteCommand", "type": "int", "description": "The maximum size, in characters, of the ShellExecute command buffer pointed to by pszShellExecuteCommand. This parameter must be zero for total counts when pszMailAddress is NULL. It can also be NULL whenever the ShellExecute command string is not required."}]}, {"name": "SHGetUnreadMailCountW", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shgetunreadmailcountw", "description": "Retrieves a specified user's unread message count for any or all email accounts.", "parameters": [{"name": "hKeyUser", "type": "HKEY", "description": "A valid HKEY for a given user. This parameter should be NULL if the function is called in a user's environment, in which case HKEY_CURRENT_USER is used. This parameter should be NULL if the function is called from the SYSTEM context, in which case HKEY_USERS\\{SID} is used."}, {"name": "pszMailAddress", "type": "LPCTSTR", "description": "A pointer to a string in Unicode that specifies the email address of an account belonging to the specified user. When this parameter is NULL, pdwCount returns the total count of unread messages for all accounts owned by the designated user."}, {"name": "pdwCount", "type": "DWORD*", "description": "Pointer to a DWORD value which receives the unread message count."}, {"name": "pFileTime", "type": "FILETIME*", "description": "A pointer to a FILETIME structure.  The use of this parameter is determined by whether pszMailAddress is NULL. If pszMailAddress is NULL, then this parameter is treated as an [in] parameter, which specifies a filter, so that only unread mail newer than the specified time appears. If pszMailAddress is not NULL, then this parameter is treated as an [out] parameter, which points to a FILETIME structure into which the function places the timestamp of the last SHSetUnreadMailCount call for the specified user and email account."}, {"name": "pszShellExecuteCommand", "type": "LPCTSTR", "description": "A pointer to a string that returns the ShellExecute command statement passed into the last SHSetUnreadMailCount call for the specified user and email account. This command string starts the email application that owns the account referenced by pszMailAddress. If the ShellExecute command is not required, this parameter can be NULL. If pszMailAddress is NULL, this parameter is ignored and must be NULL."}, {"name": "cchShellExecuteCommand", "type": "int", "description": "The maximum size, in characters, of the ShellExecute command buffer pointed to by pszShellExecuteCommand. This parameter must be zero for total counts when pszMailAddress is NULL. It can also be NULL whenever the ShellExecute command string is not required."}]}, {"name": "SHInvokePrinterCommandA", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shinvokeprintercommanda", "description": "Executes a command on a printer object.", "parameters": [{"name": "hwnd", "type": "HWND", "description": "The handle of the parent window of any windows or dialog boxes that are created during the operation."}, {"name": "uAction", "type": "UINT", "description": "The type of printer operation to perform. One of the following values:"}]}, {"name": "SHInvokePrinterCommandW", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shinvokeprintercommandw", "description": "Executes a command on a printer object.", "parameters": [{"name": "hwnd", "type": "HWND", "description": "The handle of the parent window of any windows or dialog boxes that are created during the operation."}, {"name": "uAction", "type": "UINT", "description": "The type of printer operation to perform. One of the following values:"}]}, {"name": "SHIsFileAvailableOffline", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shisfileavailableoffline", "description": "Determines whether a file or folder is available for offline use. This function also determines whether the file would be opened from the network, from the local Offline Files cache, or from both locations.", "parameters": [{"name": "pwszPath", "type": "PCWSTR", "description": "A pointer to a string value that specifies the full path to a network file or directory. This path does not need to be in UNC form. If pszPath is not a network path, the function returns E_INVALIDARG."}, {"name": "pdwStatus", "type": "LPDWORD", "description": "A pointer to a variable of type DWORD that receives one or more of the following flags if the function succeeds."}]}, {"name": "SHLoadNonloadedIconOverlayIdentifiers", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shloadnonloadediconoverlayidentifiers", "description": "Signals the Shell that during the next operation requiring overlay information, it should load icon overlay identifiers that either failed creation or were not present for creation at startup. Identifiers that have already been loaded are not affected.", "parameters": []}, {"name": "SHQueryRecycleBinA", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shqueryrecyclebina", "description": "Retrieves the size of the Recycle Bin and the number of items in it, for a specified drive.", "parameters": [{"name": "pszRootPath", "type": "LPCTSTR", "description": "The address of a null-terminated string of maximum length MAX_PATH to contain the path of the root drive on which the Recycle Bin is located. This parameter can contain the address of a string formatted with the drive, folder, and subfolder names (C:\\Windows\\System...)."}, {"name": "pSHQueryRBInfo", "type": "LPSHQUERYRBINFO", "description": "The address of a SHQUERYRBINFO structure that receives the Recycle Bin information. The cbSize member of the structure must be set to the size of the structure before calling this API."}]}, {"name": "SHQueryRecycleBinW", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shqueryrecyclebinw", "description": "Retrieves the size of the Recycle Bin and the number of items in it, for a specified drive.", "parameters": [{"name": "pszRootPath", "type": "LPCTSTR", "description": "The address of a null-terminated string of maximum length MAX_PATH to contain the path of the root drive on which the Recycle Bin is located. This parameter can contain the address of a string formatted with the drive, folder, and subfolder names (C:\\Windows\\System...)."}, {"name": "pSHQueryRBInfo", "type": "LPSHQUERYRBINFO", "description": "The address of a SHQUERYRBINFO structure that receives the Recycle Bin information. The cbSize member of the structure must be set to the size of the structure before calling this API."}]}, {"name": "SHQueryUserNotificationState", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shqueryusernotificationstate", "description": "Checks the state of the computer for the current user to determine whether sending a notification is appropriate.", "parameters": [{"name": "pquns", "type": "QUERY_USER_NOTIFICATION_STATE*", "description": "When this function returns, contains a pointer to one of the values of the QUERY_USER_NOTIFICATION_STATE enumeration."}]}, {"name": "SHRemoveLocalizedName", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shremovelocalizedname", "description": "Removes the localized name of a file in a Shell folder.", "parameters": [{"name": "pszPath", "type": "PCWSTR", "description": "A pointer to a null-terminated, Unicode string that specifies the fully qualified path of the target file."}]}, {"name": "SHSetLocalizedName", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shsetlocalizedname", "description": "Sets the localized name of a file in a Shell folder.", "parameters": [{"name": "pszPath", "type": "PCWSTR", "description": "A pointer to a string that specifies the fully qualified path of the target file."}, {"name": "pszResModule", "type": "PCWSTR", "description": "A pointer to a string resource that specifies the localized version of the file name."}, {"name": "idsRes", "type": "int", "description": "An integer ID that specifies the localized file name in the string resource."}]}, {"name": "SHSetUnreadMailCountA", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shsetunreadmailcounta", "description": "Stores the current user's unread message count for a specified email account in the registry.", "parameters": [{"name": "pszMailAddress", "type": "LPCTSTR", "description": "A pointer to a string in Unicode that contains the current user's full email address."}, {"name": "dwCount", "type": "DWORD", "description": "The number of unread messages."}, {"name": "pszShellExecuteCommand", "type": "LPCTSTR", "description": "A pointer to a string in Unicode that contains the full text of a command that can be passed to ShellExecute. This command should start the email application that owns the account referenced by pszMailAddress."}]}, {"name": "SHSetUnreadMailCountW", "return_type": "HRESULT", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shsetunreadmailcountw", "description": "Stores the current user's unread message count for a specified email account in the registry.", "parameters": [{"name": "pszMailAddress", "type": "LPCTSTR", "description": "A pointer to a string in Unicode that contains the current user's full email address."}, {"name": "dwCount", "type": "DWORD", "description": "The number of unread messages."}, {"name": "pszShellExecuteCommand", "type": "LPCTSTR", "description": "A pointer to a string in Unicode that contains the full text of a command that can be passed to ShellExecute. This command should start the email application that owns the account referenced by pszMailAddress."}]}, {"name": "SHTestTokenMembership", "return_type": "BOOL", "msdn": "https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shtesttokenmembership", "description": "Uses CheckTokenMembership to test whether the given token is a member of the local group with the specified RID.", "parameters": [{"name": "hToken", "type": "HANDLE", "description": "A handle to the token. This value can be NULL."}, {"name": "ulRID", "type": "ULONG", "description": "The RID of the local group for which membership is tested."}]}]}